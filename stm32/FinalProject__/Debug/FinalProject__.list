
FinalProject__.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08009798  08009798  00019798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a78  08009a78  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a80  08009a80  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a84  08009a84  00019a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009a88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001f0  08009c78  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08009c78  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e860  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002220  00000000  00000000  0002ea80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d60  00000000  00000000  00031b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f8d  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abc8  00000000  00000000  000497f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091bbe  00000000  00000000  000543bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5f7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000e5ff8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800977c 	.word	0x0800977c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800977c 	.word	0x0800977c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb8:	d1ed      	bne.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_uldivmod>:
 8000e14:	b953      	cbnz	r3, 8000e2c <__aeabi_uldivmod+0x18>
 8000e16:	b94a      	cbnz	r2, 8000e2c <__aeabi_uldivmod+0x18>
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	2800      	cmpeq	r0, #0
 8000e1e:	bf1c      	itt	ne
 8000e20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e28:	f000 b972 	b.w	8001110 <__aeabi_idiv0>
 8000e2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e34:	f000 f806 	bl	8000e44 <__udivmoddi4>
 8000e38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr

08000e44 <__udivmoddi4>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	9e08      	ldr	r6, [sp, #32]
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4688      	mov	r8, r1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d14b      	bne.n	8000eea <__udivmoddi4+0xa6>
 8000e52:	428a      	cmp	r2, r1
 8000e54:	4615      	mov	r5, r2
 8000e56:	d967      	bls.n	8000f28 <__udivmoddi4+0xe4>
 8000e58:	fab2 f282 	clz	r2, r2
 8000e5c:	b14a      	cbz	r2, 8000e72 <__udivmoddi4+0x2e>
 8000e5e:	f1c2 0720 	rsb	r7, r2, #32
 8000e62:	fa01 f302 	lsl.w	r3, r1, r2
 8000e66:	fa20 f707 	lsr.w	r7, r0, r7
 8000e6a:	4095      	lsls	r5, r2
 8000e6c:	ea47 0803 	orr.w	r8, r7, r3
 8000e70:	4094      	lsls	r4, r2
 8000e72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e76:	0c23      	lsrs	r3, r4, #16
 8000e78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000e7c:	fa1f fc85 	uxth.w	ip, r5
 8000e80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000e84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e88:	fb07 f10c 	mul.w	r1, r7, ip
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x60>
 8000e90:	18eb      	adds	r3, r5, r3
 8000e92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e96:	f080 811b 	bcs.w	80010d0 <__udivmoddi4+0x28c>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 8118 	bls.w	80010d0 <__udivmoddi4+0x28c>
 8000ea0:	3f02      	subs	r7, #2
 8000ea2:	442b      	add	r3, r5
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000eb8:	45a4      	cmp	ip, r4
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x8c>
 8000ebc:	192c      	adds	r4, r5, r4
 8000ebe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ec2:	f080 8107 	bcs.w	80010d4 <__udivmoddi4+0x290>
 8000ec6:	45a4      	cmp	ip, r4
 8000ec8:	f240 8104 	bls.w	80010d4 <__udivmoddi4+0x290>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	442c      	add	r4, r5
 8000ed0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ed4:	eba4 040c 	sub.w	r4, r4, ip
 8000ed8:	2700      	movs	r7, #0
 8000eda:	b11e      	cbz	r6, 8000ee4 <__udivmoddi4+0xa0>
 8000edc:	40d4      	lsrs	r4, r2
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d909      	bls.n	8000f02 <__udivmoddi4+0xbe>
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	f000 80eb 	beq.w	80010ca <__udivmoddi4+0x286>
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e9c6 0100 	strd	r0, r1, [r6]
 8000efa:	4638      	mov	r0, r7
 8000efc:	4639      	mov	r1, r7
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	fab3 f783 	clz	r7, r3
 8000f06:	2f00      	cmp	r7, #0
 8000f08:	d147      	bne.n	8000f9a <__udivmoddi4+0x156>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xd0>
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	f200 80fa 	bhi.w	8001108 <__udivmoddi4+0x2c4>
 8000f14:	1a84      	subs	r4, r0, r2
 8000f16:	eb61 0303 	sbc.w	r3, r1, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d0e0      	beq.n	8000ee4 <__udivmoddi4+0xa0>
 8000f22:	e9c6 4800 	strd	r4, r8, [r6]
 8000f26:	e7dd      	b.n	8000ee4 <__udivmoddi4+0xa0>
 8000f28:	b902      	cbnz	r2, 8000f2c <__udivmoddi4+0xe8>
 8000f2a:	deff      	udf	#255	; 0xff
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	f040 808f 	bne.w	8001054 <__udivmoddi4+0x210>
 8000f36:	1b49      	subs	r1, r1, r5
 8000f38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3c:	fa1f f885 	uxth.w	r8, r5
 8000f40:	2701      	movs	r7, #1
 8000f42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f46:	0c23      	lsrs	r3, r4, #16
 8000f48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f50:	fb08 f10c 	mul.w	r1, r8, ip
 8000f54:	4299      	cmp	r1, r3
 8000f56:	d907      	bls.n	8000f68 <__udivmoddi4+0x124>
 8000f58:	18eb      	adds	r3, r5, r3
 8000f5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000f5e:	d202      	bcs.n	8000f66 <__udivmoddi4+0x122>
 8000f60:	4299      	cmp	r1, r3
 8000f62:	f200 80cd 	bhi.w	8001100 <__udivmoddi4+0x2bc>
 8000f66:	4684      	mov	ip, r0
 8000f68:	1a59      	subs	r1, r3, r1
 8000f6a:	b2a3      	uxth	r3, r4
 8000f6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000f74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f78:	fb08 f800 	mul.w	r8, r8, r0
 8000f7c:	45a0      	cmp	r8, r4
 8000f7e:	d907      	bls.n	8000f90 <__udivmoddi4+0x14c>
 8000f80:	192c      	adds	r4, r5, r4
 8000f82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x14a>
 8000f88:	45a0      	cmp	r8, r4
 8000f8a:	f200 80b6 	bhi.w	80010fa <__udivmoddi4+0x2b6>
 8000f8e:	4618      	mov	r0, r3
 8000f90:	eba4 0408 	sub.w	r4, r4, r8
 8000f94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f98:	e79f      	b.n	8000eda <__udivmoddi4+0x96>
 8000f9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000f9e:	40bb      	lsls	r3, r7
 8000fa0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000fa4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000fa8:	fa01 f407 	lsl.w	r4, r1, r7
 8000fac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000fb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000fb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000fb8:	4325      	orrs	r5, r4
 8000fba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000fbe:	0c2c      	lsrs	r4, r5, #16
 8000fc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000fc4:	fa1f fa8e 	uxth.w	sl, lr
 8000fc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000fcc:	fb09 f40a 	mul.w	r4, r9, sl
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000fd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000fda:	d90b      	bls.n	8000ff4 <__udivmoddi4+0x1b0>
 8000fdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000fe0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fe4:	f080 8087 	bcs.w	80010f6 <__udivmoddi4+0x2b2>
 8000fe8:	429c      	cmp	r4, r3
 8000fea:	f240 8084 	bls.w	80010f6 <__udivmoddi4+0x2b2>
 8000fee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ff2:	4473      	add	r3, lr
 8000ff4:	1b1b      	subs	r3, r3, r4
 8000ff6:	b2ad      	uxth	r5, r5
 8000ff8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ffc:	fb08 3310 	mls	r3, r8, r0, r3
 8001000:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001004:	fb00 fa0a 	mul.w	sl, r0, sl
 8001008:	45a2      	cmp	sl, r4
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x1da>
 800100c:	eb1e 0404 	adds.w	r4, lr, r4
 8001010:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001014:	d26b      	bcs.n	80010ee <__udivmoddi4+0x2aa>
 8001016:	45a2      	cmp	sl, r4
 8001018:	d969      	bls.n	80010ee <__udivmoddi4+0x2aa>
 800101a:	3802      	subs	r0, #2
 800101c:	4474      	add	r4, lr
 800101e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001022:	fba0 8902 	umull	r8, r9, r0, r2
 8001026:	eba4 040a 	sub.w	r4, r4, sl
 800102a:	454c      	cmp	r4, r9
 800102c:	46c2      	mov	sl, r8
 800102e:	464b      	mov	r3, r9
 8001030:	d354      	bcc.n	80010dc <__udivmoddi4+0x298>
 8001032:	d051      	beq.n	80010d8 <__udivmoddi4+0x294>
 8001034:	2e00      	cmp	r6, #0
 8001036:	d069      	beq.n	800110c <__udivmoddi4+0x2c8>
 8001038:	ebb1 050a 	subs.w	r5, r1, sl
 800103c:	eb64 0403 	sbc.w	r4, r4, r3
 8001040:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001044:	40fd      	lsrs	r5, r7
 8001046:	40fc      	lsrs	r4, r7
 8001048:	ea4c 0505 	orr.w	r5, ip, r5
 800104c:	e9c6 5400 	strd	r5, r4, [r6]
 8001050:	2700      	movs	r7, #0
 8001052:	e747      	b.n	8000ee4 <__udivmoddi4+0xa0>
 8001054:	f1c2 0320 	rsb	r3, r2, #32
 8001058:	fa20 f703 	lsr.w	r7, r0, r3
 800105c:	4095      	lsls	r5, r2
 800105e:	fa01 f002 	lsl.w	r0, r1, r2
 8001062:	fa21 f303 	lsr.w	r3, r1, r3
 8001066:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800106a:	4338      	orrs	r0, r7
 800106c:	0c01      	lsrs	r1, r0, #16
 800106e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001072:	fa1f f885 	uxth.w	r8, r5
 8001076:	fb0e 3317 	mls	r3, lr, r7, r3
 800107a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107e:	fb07 f308 	mul.w	r3, r7, r8
 8001082:	428b      	cmp	r3, r1
 8001084:	fa04 f402 	lsl.w	r4, r4, r2
 8001088:	d907      	bls.n	800109a <__udivmoddi4+0x256>
 800108a:	1869      	adds	r1, r5, r1
 800108c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001090:	d22f      	bcs.n	80010f2 <__udivmoddi4+0x2ae>
 8001092:	428b      	cmp	r3, r1
 8001094:	d92d      	bls.n	80010f2 <__udivmoddi4+0x2ae>
 8001096:	3f02      	subs	r7, #2
 8001098:	4429      	add	r1, r5
 800109a:	1acb      	subs	r3, r1, r3
 800109c:	b281      	uxth	r1, r0
 800109e:	fbb3 f0fe 	udiv	r0, r3, lr
 80010a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80010a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010aa:	fb00 f308 	mul.w	r3, r0, r8
 80010ae:	428b      	cmp	r3, r1
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x27e>
 80010b2:	1869      	adds	r1, r5, r1
 80010b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80010b8:	d217      	bcs.n	80010ea <__udivmoddi4+0x2a6>
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d915      	bls.n	80010ea <__udivmoddi4+0x2a6>
 80010be:	3802      	subs	r0, #2
 80010c0:	4429      	add	r1, r5
 80010c2:	1ac9      	subs	r1, r1, r3
 80010c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010c8:	e73b      	b.n	8000f42 <__udivmoddi4+0xfe>
 80010ca:	4637      	mov	r7, r6
 80010cc:	4630      	mov	r0, r6
 80010ce:	e709      	b.n	8000ee4 <__udivmoddi4+0xa0>
 80010d0:	4607      	mov	r7, r0
 80010d2:	e6e7      	b.n	8000ea4 <__udivmoddi4+0x60>
 80010d4:	4618      	mov	r0, r3
 80010d6:	e6fb      	b.n	8000ed0 <__udivmoddi4+0x8c>
 80010d8:	4541      	cmp	r1, r8
 80010da:	d2ab      	bcs.n	8001034 <__udivmoddi4+0x1f0>
 80010dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80010e0:	eb69 020e 	sbc.w	r2, r9, lr
 80010e4:	3801      	subs	r0, #1
 80010e6:	4613      	mov	r3, r2
 80010e8:	e7a4      	b.n	8001034 <__udivmoddi4+0x1f0>
 80010ea:	4660      	mov	r0, ip
 80010ec:	e7e9      	b.n	80010c2 <__udivmoddi4+0x27e>
 80010ee:	4618      	mov	r0, r3
 80010f0:	e795      	b.n	800101e <__udivmoddi4+0x1da>
 80010f2:	4667      	mov	r7, ip
 80010f4:	e7d1      	b.n	800109a <__udivmoddi4+0x256>
 80010f6:	4681      	mov	r9, r0
 80010f8:	e77c      	b.n	8000ff4 <__udivmoddi4+0x1b0>
 80010fa:	3802      	subs	r0, #2
 80010fc:	442c      	add	r4, r5
 80010fe:	e747      	b.n	8000f90 <__udivmoddi4+0x14c>
 8001100:	f1ac 0c02 	sub.w	ip, ip, #2
 8001104:	442b      	add	r3, r5
 8001106:	e72f      	b.n	8000f68 <__udivmoddi4+0x124>
 8001108:	4638      	mov	r0, r7
 800110a:	e708      	b.n	8000f1e <__udivmoddi4+0xda>
 800110c:	4637      	mov	r7, r6
 800110e:	e6e9      	b.n	8000ee4 <__udivmoddi4+0xa0>

08001110 <__aeabi_idiv0>:
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <setDhtPin>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"
void setDhtPin(uint16_t pin) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
	DHT_PIN = pin;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <setDhtPin+0x1c>)
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	8013      	strh	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000000 	.word	0x20000000

08001134 <DWT_Delay_Init>:

uint32_t DWT_Delay_Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <DWT_Delay_Init+0x58>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <DWT_Delay_Init+0x58>)
 800113e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001142:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <DWT_Delay_Init+0x58>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <DWT_Delay_Init+0x58>)
 800114a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <DWT_Delay_Init+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <DWT_Delay_Init+0x5c>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800116e:	bf00      	nop
     __ASM volatile ("NOP");
 8001170:	bf00      	nop
  __ASM volatile ("NOP");
 8001172:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800117c:	2300      	movs	r3, #0
 800117e:	e000      	b.n	8001182 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001180:	2301      	movs	r3, #1
  }
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000edf0 	.word	0xe000edf0
 8001190:	e0001000 	.word	0xe0001000

08001194 <delay>:

void delay(volatile uint32_t microseconds)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <delay+0x3c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80011a2:	f003 fdfd 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <delay+0x40>)
 80011aa:	fba3 2302 	umull	r2, r3, r3, r2
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80011b8:	bf00      	nop
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <delay+0x3c>)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3f8      	bcc.n	80011ba <delay+0x26>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	e0001000 	.word	0xe0001000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <startTimeout>:

uint32_t startTime;
uint32_t timeout;

void startTimeout() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	startTime = DWT->CYCCNT;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <startTimeout+0x2c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <startTimeout+0x30>)
 80011e2:	6013      	str	r3, [r2, #0]
	timeout = 30000 * (HAL_RCC_GetHCLKFreq() / 1000000);
 80011e4:	f003 fddc 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <startTimeout+0x34>)
 80011ec:	fba3 2302 	umull	r2, r3, r3, r2
 80011f0:	0c9b      	lsrs	r3, r3, #18
 80011f2:	f247 5230 	movw	r2, #30000	; 0x7530
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <startTimeout+0x38>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e0001000 	.word	0xe0001000
 8001208:	20000264 	.word	0x20000264
 800120c:	431bde83 	.word	0x431bde83
 8001210:	2000025c 	.word	0x2000025c

08001214 <checkTimeout>:

uint8_t checkTimeout() {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	return DWT->CYCCNT - startTime > timeout ? 1 : 0;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <checkTimeout+0x28>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <checkTimeout+0x2c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <checkTimeout+0x30>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	bf8c      	ite	hi
 800122a:	2301      	movhi	r3, #1
 800122c:	2300      	movls	r3, #0
 800122e:	b2db      	uxtb	r3, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e0001000 	.word	0xe0001000
 8001240:	20000264 	.word	0x20000264
 8001244:	2000025c 	.word	0x2000025c

08001248 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f002 ffb0 	bl	80041dc <HAL_GPIO_Init>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4619      	mov	r1, r3
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f002 ff92 	bl	80041dc <HAL_GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <DHT_Start>:


void DHT_Start (void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80012c4:	f7ff ff36 	bl	8001134 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <DHT_Start+0x50>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <DHT_Start+0x54>)
 80012d0:	f7ff ffba 	bl	8001248 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <DHT_Start+0x50>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <DHT_Start+0x54>)
 80012de:	f003 f917 	bl	8004510 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80012e2:	f244 6050 	movw	r0, #18000	; 0x4650
 80012e6:	f7ff ff55 	bl	8001194 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <DHT_Start+0x50>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <DHT_Start+0x54>)
 80012f4:	f003 f90c 	bl	8004510 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80012f8:	2014      	movs	r0, #20
 80012fa:	f7ff ff4b 	bl	8001194 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <DHT_Start+0x50>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <DHT_Start+0x54>)
 8001306:	f7ff ffbd 	bl	8001284 <Set_Pin_Input>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000
 8001314:	40020000 	.word	0x40020000

08001318 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001322:	2028      	movs	r0, #40	; 0x28
 8001324:	f7ff ff36 	bl	8001194 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <DHT_Check_Response+0x74>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <DHT_Check_Response+0x78>)
 8001330:	f003 f8d6 	bl	80044e0 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d110      	bne.n	800135c <DHT_Check_Response+0x44>
	{
		delay (80);
 800133a:	2050      	movs	r0, #80	; 0x50
 800133c:	f7ff ff2a 	bl	8001194 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <DHT_Check_Response+0x74>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	; (8001390 <DHT_Check_Response+0x78>)
 8001348:	f003 f8ca 	bl	80044e0 <HAL_GPIO_ReadPin>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <DHT_Check_Response+0x40>
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e001      	b.n	800135c <DHT_Check_Response+0x44>
		else Response = -1;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	71fb      	strb	r3, [r7, #7]
	}

	startTimeout();
 800135c:	f7ff ff3c 	bl	80011d8 <startTimeout>
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 8001360:	e006      	b.n	8001370 <DHT_Check_Response+0x58>
		if (checkTimeout() > 0) return -1;
 8001362:	f7ff ff57 	bl	8001214 <checkTimeout>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <DHT_Check_Response+0x58>
 800136c:	23ff      	movs	r3, #255	; 0xff
 800136e:	e009      	b.n	8001384 <DHT_Check_Response+0x6c>
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <DHT_Check_Response+0x74>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <DHT_Check_Response+0x78>)
 8001378:	f003 f8b2 	bl	80044e0 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ef      	bne.n	8001362 <DHT_Check_Response+0x4a>
	}

	return Response;
 8001382:	79fb      	ldrb	r3, [r7, #7]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	40020000 	.word	0x40020000

08001394 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800139a:	2300      	movs	r3, #0
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	e04f      	b.n	8001440 <DHT_Read+0xac>
	{
		startTimeout();
 80013a0:	f7ff ff1a 	bl	80011d8 <startTimeout>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 80013a4:	e006      	b.n	80013b4 <DHT_Read+0x20>
			if (checkTimeout() > 0 ) return -1;
 80013a6:	f7ff ff35 	bl	8001214 <checkTimeout>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <DHT_Read+0x20>
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	e049      	b.n	8001448 <DHT_Read+0xb4>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <DHT_Read+0xbc>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <DHT_Read+0xc0>)
 80013bc:	f003 f890 	bl	80044e0 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ef      	beq.n	80013a6 <DHT_Read+0x12>
		}

		delay (40);   // wait for 40 us
 80013c6:	2028      	movs	r0, #40	; 0x28
 80013c8:	f7ff fee4 	bl	8001194 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <DHT_Read+0xbc>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4820      	ldr	r0, [pc, #128]	; (8001454 <DHT_Read+0xc0>)
 80013d4:	f003 f884 	bl	80044e0 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10e      	bne.n	80013fc <DHT_Read+0x68>
		{
			i&= ~(1<<(7-j));   // write 0
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	f1c3 0307 	rsb	r3, r3, #7
 80013e4:	2201      	movs	r2, #1
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4013      	ands	r3, r2
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e00b      	b.n	8001414 <DHT_Read+0x80>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2201      	movs	r2, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	4313      	orrs	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	71fb      	strb	r3, [r7, #7]

		startTimeout();
 8001414:	f7ff fee0 	bl	80011d8 <startTimeout>
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 8001418:	e006      	b.n	8001428 <DHT_Read+0x94>
			if (checkTimeout() > 0) return -1;
 800141a:	f7ff fefb 	bl	8001214 <checkTimeout>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <DHT_Read+0x94>
 8001424:	23ff      	movs	r3, #255	; 0xff
 8001426:	e00f      	b.n	8001448 <DHT_Read+0xb4>
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) {
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <DHT_Read+0xbc>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <DHT_Read+0xc0>)
 8001430:	f003 f856 	bl	80044e0 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <DHT_Read+0x86>
	for (j=0;j<8;j++)
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	3301      	adds	r3, #1
 800143e:	71bb      	strb	r3, [r7, #6]
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d9ac      	bls.n	80013a0 <DHT_Read+0xc>
		}
	}
	return i;
 8001446:	79fb      	ldrb	r3, [r7, #7]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	40020000 	.word	0x40020000

08001458 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001460:	f7ff ff2e 	bl	80012c0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001464:	f7ff ff58 	bl	8001318 <DHT_Check_Response>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <DHT_GetData+0xa4>)
 800146e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001470:	f7ff ff90 	bl	8001394 <DHT_Read>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <DHT_GetData+0xa8>)
 800147a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800147c:	f7ff ff8a 	bl	8001394 <DHT_Read>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <DHT_GetData+0xac>)
 8001486:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001488:	f7ff ff84 	bl	8001394 <DHT_Read>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <DHT_GetData+0xb0>)
 8001492:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001494:	f7ff ff7e 	bl	8001394 <DHT_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <DHT_GetData+0xb4>)
 800149e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80014a0:	f7ff ff78 	bl	8001394 <DHT_Read>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <DHT_GetData+0xb8>)
 80014aa:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <DHT_GetData+0xb8>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <DHT_GetData+0xa8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <DHT_GetData+0xac>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <DHT_GetData+0xb0>)
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <DHT_GetData+0xb4>)
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d111      	bne.n	80014f2 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <DHT_GetData+0xb0>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <DHT_GetData+0xa8>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000020c 	.word	0x2000020c
 8001500:	20000258 	.word	0x20000258
 8001504:	2000025a 	.word	0x2000025a
 8001508:	20000259 	.word	0x20000259
 800150c:	20000262 	.word	0x20000262
 8001510:	20000260 	.word	0x20000260

08001514 <setLed>:
uint8_t autoWatering_FLAG = 1;
uint8_t debugMode_FLAG = 0;
uint8_t lightOn_FLAG = 1;
uint8_t captureMode_FLAG = 0;

void setLed(uint8_t lightingState) { // 1 == normal , 0 == watering
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	if (!lightOn_FLAG) {
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <setLed+0x78>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <setLed+0x28>
		// Lighting mode 'c'
		char x = 'c';
 8001526:	2363      	movs	r3, #99	; 0x63
 8001528:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1,&x,1,100);
 800152a:	f107 010f 	add.w	r1, r7, #15
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	2201      	movs	r2, #1
 8001532:	4817      	ldr	r0, [pc, #92]	; (8001590 <setLed+0x7c>)
 8001534:	f004 f891 	bl	800565a <HAL_UART_Transmit>
		return;
 8001538:	bf00      	nop
 800153a:	e024      	b.n	8001586 <setLed+0x72>
	}
	if (captureMode_FLAG) {
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <setLed+0x80>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <setLed+0x46>
		// Lighting mode 'd' -> white light
		char x = 'd';
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1,&x,1,100);
 8001548:	f107 010e 	add.w	r1, r7, #14
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	2201      	movs	r2, #1
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <setLed+0x7c>)
 8001552:	f004 f882 	bl	800565a <HAL_UART_Transmit>
		return;
 8001556:	bf00      	nop
 8001558:	e015      	b.n	8001586 <setLed+0x72>
	}

	if (lightingState == LED_NORMAL) {
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d109      	bne.n	8001574 <setLed+0x60>
		// Lighting mode 'a'
		char x = 'a';
 8001560:	2361      	movs	r3, #97	; 0x61
 8001562:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart1,&x,1,100);
 8001564:	f107 010d 	add.w	r1, r7, #13
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	2201      	movs	r2, #1
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <setLed+0x7c>)
 800156e:	f004 f874 	bl	800565a <HAL_UART_Transmit>
 8001572:	e008      	b.n	8001586 <setLed+0x72>
	}
	else {
		// Lighting mode 'b'
		char x = 'b';
 8001574:	2362      	movs	r3, #98	; 0x62
 8001576:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(&huart1,&x,1,100);
 8001578:	f107 010c 	add.w	r1, r7, #12
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	2201      	movs	r2, #1
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <setLed+0x7c>)
 8001582:	f004 f86a 	bl	800565a <HAL_UART_Transmit>
	}
}
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000003 	.word	0x20000003
 8001590:	20000430 	.word	0x20000430
 8001594:	20000210 	.word	0x20000210

08001598 <setRelay>:

void setRelay(uint8_t relayState) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	if (forceRelayOn_FLAG) {
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <setRelay+0x88>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <setRelay+0x24>
		setLed(LED_NORMAL);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff ffb2 	bl	8001514 <setLed>
		HAL_GPIO_WritePin(RELAY_GPIO, RELAY_PIN, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2120      	movs	r1, #32
 80015b4:	481b      	ldr	r0, [pc, #108]	; (8001624 <setRelay+0x8c>)
 80015b6:	f002 ffab 	bl	8004510 <HAL_GPIO_WritePin>
		return;
 80015ba:	e02d      	b.n	8001618 <setRelay+0x80>
	}
	if (forceRelayOff_FLAG) {
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <setRelay+0x90>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <setRelay+0x3e>
		setLed(LED_NORMAL);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff ffa5 	bl	8001514 <setLed>
		HAL_GPIO_WritePin(RELAY_GPIO, RELAY_PIN, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2120      	movs	r1, #32
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <setRelay+0x8c>)
 80015d0:	f002 ff9e 	bl	8004510 <HAL_GPIO_WritePin>
		return;
 80015d4:	e020      	b.n	8001618 <setRelay+0x80>
	}

	if (autoWatering_FLAG) {
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <setRelay+0x94>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d014      	beq.n	8001608 <setRelay+0x70>
		if (relayState == RELAY_ON) {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <setRelay+0x5e>
			setLed(LED_WATERING);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff95 	bl	8001514 <setLed>
			HAL_GPIO_WritePin(RELAY_GPIO, RELAY_PIN, GPIO_PIN_SET); // Lighting mode 'b'
 80015ea:	2201      	movs	r2, #1
 80015ec:	2120      	movs	r1, #32
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <setRelay+0x8c>)
 80015f0:	f002 ff8e 	bl	8004510 <HAL_GPIO_WritePin>
 80015f4:	e010      	b.n	8001618 <setRelay+0x80>
		}
		else {
			setLed(LED_NORMAL);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff ff8c 	bl	8001514 <setLed>
			HAL_GPIO_WritePin(RELAY_GPIO, RELAY_PIN, GPIO_PIN_RESET); // Lighting mode 'a'
 80015fc:	2200      	movs	r2, #0
 80015fe:	2120      	movs	r1, #32
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <setRelay+0x8c>)
 8001602:	f002 ff85 	bl	8004510 <HAL_GPIO_WritePin>
 8001606:	e007      	b.n	8001618 <setRelay+0x80>
		}
	}
	else {
		setLed(LED_NORMAL);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ff83 	bl	8001514 <setLed>
		HAL_GPIO_WritePin(RELAY_GPIO, RELAY_PIN, GPIO_PIN_RESET); // Lighting mode 'a'
 800160e:	2200      	movs	r2, #0
 8001610:	2120      	movs	r1, #32
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <setRelay+0x8c>)
 8001614:	f002 ff7c 	bl	8004510 <HAL_GPIO_WritePin>
	}
}
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000020d 	.word	0x2000020d
 8001624:	40020000 	.word	0x40020000
 8001628:	2000020e 	.word	0x2000020e
 800162c:	20000002 	.word	0x20000002

08001630 <adcCallback>:
uint16_t timer_StartRelay = 0;
uint8_t relayFlag = 0;
uint16_t PumpWorkingTime = 10000;
uint16_t lastProcessTime = 0;

void adcCallback(){
 8001630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001634:	b093      	sub	sp, #76	; 0x4c
 8001636:	af00      	add	r7, sp, #0

	if (__HAL_TIM_GET_COUNTER(&htim1) - lastProcessTime < 200) { // IRQ block other codes thus 100ms delay for each execute
 8001638:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <adcCallback+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	4a99      	ldr	r2, [pc, #612]	; (80018a4 <adcCallback+0x274>)
 8001640:	8812      	ldrh	r2, [r2, #0]
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	2bc7      	cmp	r3, #199	; 0xc7
 8001646:	f240 811c 	bls.w	8001882 <adcCallback+0x252>
		return;
	}
	lastProcessTime = __HAL_TIM_GET_COUNTER(&htim1);
 800164a:	4b95      	ldr	r3, [pc, #596]	; (80018a0 <adcCallback+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b94      	ldr	r3, [pc, #592]	; (80018a4 <adcCallback+0x274>)
 8001654:	801a      	strh	r2, [r3, #0]
	if (relayFlag){ // && __HAL_TIM_GET_COUNTER(&htim1) - timer_StartRelay < PumpWorkingTime) {
 8001656:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <adcCallback+0x278>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <adcCallback+0x36>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		setRelay(RELAY_ON);
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff ff9a 	bl	8001598 <setRelay>
 8001664:	e005      	b.n	8001672 <adcCallback+0x42>
	}
	else {
		relayFlag = 0;
 8001666:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <adcCallback+0x278>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		setRelay(RELAY_OFF);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff ff93 	bl	8001598 <setRelay>
	}

	uint32_t readValue = HAL_ADC_GetValue(&hadc1);
 8001672:	488e      	ldr	r0, [pc, #568]	; (80018ac <adcCallback+0x27c>)
 8001674:	f001 feac 	bl	80033d0 <HAL_ADC_GetValue>
 8001678:	6438      	str	r0, [r7, #64]	; 0x40



	// Some Dynamic Programming
	// f(n) = alpha* f(n-1) + nowValue * (1 - alpha);
	double smoothValue = dp * alpha + readValue * (1 - alpha);
 800167a:	4b8d      	ldr	r3, [pc, #564]	; (80018b0 <adcCallback+0x280>)
 800167c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001680:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <adcCallback+0x284>)
 8001682:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	f7fe ffbd 	bl	8000608 <__aeabi_dmul>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	461d      	mov	r5, r3
 8001694:	4626      	mov	r6, r4
 8001696:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001698:	f7fe ff3c 	bl	8000514 <__aeabi_ui2d>
 800169c:	4680      	mov	r8, r0
 800169e:	4689      	mov	r9, r1
 80016a0:	4b84      	ldr	r3, [pc, #528]	; (80018b4 <adcCallback+0x284>)
 80016a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <adcCallback+0x288>)
 80016b0:	f7fe fdf2 	bl	8000298 <__aeabi_dsub>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	4640      	mov	r0, r8
 80016be:	4649      	mov	r1, r9
 80016c0:	f7fe ffa2 	bl	8000608 <__aeabi_dmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	4628      	mov	r0, r5
 80016ce:	4631      	mov	r1, r6
 80016d0:	f7fe fde4 	bl	800029c <__adddf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	uint8_t moisurePercent = smoothValue * 100 / 1023;
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <adcCallback+0x28c>)
 80016e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80016e6:	f7fe ff8f 	bl	8000608 <__aeabi_dmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	460c      	mov	r4, r1
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	a367      	add	r3, pc, #412	; (adr r3, 8001890 <adcCallback+0x260>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff f8b0 	bl	800085c <__aeabi_ddiv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	4618      	mov	r0, r3
 8001702:	4621      	mov	r1, r4
 8001704:	f7ff fa58 	bl	8000bb8 <__aeabi_d2uiz>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	globalValue.soilMoisure = moisurePercent;
 800170e:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <adcCallback+0x290>)
 8001710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001714:	7113      	strb	r3, [r2, #4]

	dp = smoothValue;
 8001716:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <adcCallback+0x280>)
 8001718:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800171c:	e9c2 3400 	strd	r3, r4, [r2]
	//
	if (debugMode_FLAG){
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <adcCallback+0x294>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d029      	beq.n	800177c <adcCallback+0x14c>
		char out[50];
		for (int i = 0 ; i< 50 ; i++) out[i] = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
 800172c:	e007      	b.n	800173e <adcCallback+0x10e>
 800172e:	463a      	mov	r2, r7
 8001730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001732:	4413      	add	r3, r2
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173a:	3301      	adds	r3, #1
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
 800173e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001740:	2b31      	cmp	r3, #49	; 0x31
 8001742:	ddf4      	ble.n	800172e <adcCallback+0xfe>

		sprintf(out,"Raw : %d",readValue);
 8001744:	463b      	mov	r3, r7
 8001746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001748:	495f      	ldr	r1, [pc, #380]	; (80018c8 <adcCallback+0x298>)
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fbde 	bl	8006f0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint32_t *) out,50,100);
 8001750:	4639      	mov	r1, r7
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	2232      	movs	r2, #50	; 0x32
 8001756:	485d      	ldr	r0, [pc, #372]	; (80018cc <adcCallback+0x29c>)
 8001758:	f003 ff7f 	bl	800565a <HAL_UART_Transmit>

		sprintf(out," Smooth: %d\n\r",(int) smoothValue);
 800175c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001760:	f7ff fa02 	bl	8000b68 <__aeabi_d2iz>
 8001764:	4602      	mov	r2, r0
 8001766:	463b      	mov	r3, r7
 8001768:	4959      	ldr	r1, [pc, #356]	; (80018d0 <adcCallback+0x2a0>)
 800176a:	4618      	mov	r0, r3
 800176c:	f005 fbce 	bl	8006f0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint32_t *) out,50,100);
 8001770:	4639      	mov	r1, r7
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	4855      	ldr	r0, [pc, #340]	; (80018cc <adcCallback+0x29c>)
 8001778:	f003 ff6f 	bl	800565a <HAL_UART_Transmit>
	// Mode 1 Force Pump to turn ON
	// Mode 2 Water when Moisure Value less than xxx  until yyy value
	// if 500 < val < 900 for 5 second .. Trigger pump until val < 300
	// Mode 3 Force pump to turn off
	// Make sure that measure value not A noise
	if (!relayFlag && ! (smoothValue > 500 && smoothValue < 900)) {
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <adcCallback+0x278>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d131      	bne.n	80017e8 <adcCallback+0x1b8>
 8001784:	2301      	movs	r3, #1
 8001786:	461c      	mov	r4, r3
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <adcCallback+0x2a4>)
 800178e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001792:	f7ff f9c9 	bl	8000b28 <__aeabi_dcmpgt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <adcCallback+0x170>
 800179c:	2300      	movs	r3, #0
 800179e:	461c      	mov	r4, r3
 80017a0:	b2e3      	uxtb	r3, r4
 80017a2:	f083 0301 	eor.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d113      	bne.n	80017d4 <adcCallback+0x1a4>
 80017ac:	2301      	movs	r3, #1
 80017ae:	461c      	mov	r4, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <adcCallback+0x2a8>)
 80017b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017ba:	f7ff f997 	bl	8000aec <__aeabi_dcmplt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <adcCallback+0x198>
 80017c4:	2300      	movs	r3, #0
 80017c6:	461c      	mov	r4, r3
 80017c8:	b2e3      	uxtb	r3, r4
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d009      	beq.n	80017e8 <adcCallback+0x1b8>
		timer_last_Dry = __HAL_TIM_GET_COUNTER(&htim1);
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <adcCallback+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <adcCallback+0x2ac>)
 80017de:	801a      	strh	r2, [r3, #0]
		relayFlag = 0;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <adcCallback+0x278>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e04d      	b.n	8001884 <adcCallback+0x254>
	}
	else if (relayFlag && ! (smoothValue > 300 && smoothValue < 900)){
 80017e8:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <adcCallback+0x278>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d031      	beq.n	8001854 <adcCallback+0x224>
 80017f0:	2301      	movs	r3, #1
 80017f2:	461c      	mov	r4, r3
 80017f4:	a328      	add	r3, pc, #160	; (adr r3, 8001898 <adcCallback+0x268>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017fe:	f7ff f993 	bl	8000b28 <__aeabi_dcmpgt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <adcCallback+0x1dc>
 8001808:	2300      	movs	r3, #0
 800180a:	461c      	mov	r4, r3
 800180c:	b2e3      	uxtb	r3, r4
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d113      	bne.n	8001840 <adcCallback+0x210>
 8001818:	2301      	movs	r3, #1
 800181a:	461c      	mov	r4, r3
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <adcCallback+0x2a8>)
 8001822:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001826:	f7ff f961 	bl	8000aec <__aeabi_dcmplt>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <adcCallback+0x204>
 8001830:	2300      	movs	r3, #0
 8001832:	461c      	mov	r4, r3
 8001834:	b2e3      	uxtb	r3, r4
 8001836:	f083 0301 	eor.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <adcCallback+0x224>
		timer_last_Dry = __HAL_TIM_GET_COUNTER(&htim1);
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <adcCallback+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <adcCallback+0x2ac>)
 800184a:	801a      	strh	r2, [r3, #0]
		relayFlag = 0;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <adcCallback+0x278>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e017      	b.n	8001884 <adcCallback+0x254>
	}
	else {
		// Dry Case
		uint16_t escapeTime = __HAL_TIM_GET_COUNTER(&htim1) - timer_last_Dry;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <adcCallback+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <adcCallback+0x2ac>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	86bb      	strh	r3, [r7, #52]	; 0x34
		// 1 timer tick = 0.001 second
		if (escapeTime > 5000) {// (5 Second) / (0.001 Second/Tick)
 8001864:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d90a      	bls.n	8001884 <adcCallback+0x254>
			relayFlag = 1;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <adcCallback+0x278>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
			timer_StartRelay = __HAL_TIM_GET_COUNTER(&htim1);
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <adcCallback+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <adcCallback+0x2b0>)
 800187e:	801a      	strh	r2, [r3, #0]
 8001880:	e000      	b.n	8001884 <adcCallback+0x254>
		return;
 8001882:	bf00      	nop
		}
	}

}
 8001884:	374c      	adds	r7, #76	; 0x4c
 8001886:	46bd      	mov	sp, r7
 8001888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800188c:	f3af 8000 	nop.w
 8001890:	00000000 	.word	0x00000000
 8001894:	408ff800 	.word	0x408ff800
 8001898:	00000000 	.word	0x00000000
 800189c:	4072c000 	.word	0x4072c000
 80018a0:	2000047c 	.word	0x2000047c
 80018a4:	20000224 	.word	0x20000224
 80018a8:	20000222 	.word	0x20000222
 80018ac:	200003e8 	.word	0x200003e8
 80018b0:	20000218 	.word	0x20000218
 80018b4:	20000008 	.word	0x20000008
 80018b8:	3ff00000 	.word	0x3ff00000
 80018bc:	40590000 	.word	0x40590000
 80018c0:	200002d8 	.word	0x200002d8
 80018c4:	2000020f 	.word	0x2000020f
 80018c8:	08009798 	.word	0x08009798
 80018cc:	200004c0 	.word	0x200004c0
 80018d0:	080097a4 	.word	0x080097a4
 80018d4:	407f4000 	.word	0x407f4000
 80018d8:	408c2000 	.word	0x408c2000
 80018dc:	200004bc 	.word	0x200004bc
 80018e0:	20000220 	.word	0x20000220

080018e4 <timerIRQcallback>:
// -----------------------  END PUMP-SOIL SYSTEM ---------------------------------------

uint8_t nowFanState = FAN_OFF;

uint64_t timerTick = 0;
void timerIRQcallback() {
 80018e4:	b490      	push	{r4, r7}
 80018e6:	af00      	add	r7, sp, #0
//	uint16_t nowTimer =  __HAL_TIM_GET_COUNTER(&htim1);
//	sprintf(serialOutBuffer,"Timer interupted : nowTIme -> %d" , nowTimer);
//	HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
	timerTick++;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <timerIRQcallback+0x20>)
 80018ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018ee:	1c4b      	adds	r3, r1, #1
 80018f0:	f142 0400 	adc.w	r4, r2, #0
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <timerIRQcallback+0x20>)
 80018f6:	e9c2 3400 	strd	r3, r4, [r2]

}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc90      	pop	{r4, r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000228 	.word	0x20000228

08001908 <getTickTimer1>:

uint64_t getTickTimer1() {
 8001908:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800190c:	af00      	add	r7, sp, #0
	return (timerTick - 1) * 65536 + (uint64_t) __HAL_TIM_GET_COUNTER(&htim1);
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <getTickTimer1+0x44>)
 8001910:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	f04f 0400 	mov.w	r4, #0
 800191c:	0414      	lsls	r4, r2, #16
 800191e:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8001922:	040b      	lsls	r3, r1, #16
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <getTickTimer1+0x48>)
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800192a:	4611      	mov	r1, r2
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	eb13 0b01 	adds.w	fp, r3, r1
 8001934:	eb44 0c02 	adc.w	ip, r4, r2
 8001938:	f5bb 3380 	subs.w	r3, fp, #65536	; 0x10000
 800193c:	f14c 34ff 	adc.w	r4, ip, #4294967295	; 0xffffffff
}
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800194a:	4770      	bx	lr
 800194c:	20000228 	.word	0x20000228
 8001950:	2000047c 	.word	0x2000047c

08001954 <getTimer1Second>:

uint64_t getTimer1Second() {
 8001954:	b598      	push	{r3, r4, r7, lr}
 8001956:	af00      	add	r7, sp, #0
	return getTickTimer1() / 1000;
 8001958:	f7ff ffd6 	bl	8001908 <getTickTimer1>
 800195c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7ff fa56 	bl	8000e14 <__aeabi_uldivmod>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
}
 800196c:	4618      	mov	r0, r3
 800196e:	4621      	mov	r1, r4
 8001970:	bd98      	pop	{r3, r4, r7, pc}
 8001972:	0000      	movs	r0, r0
 8001974:	0000      	movs	r0, r0
	...

08001978 <switchToOn>:

uint8_t fanState = FAN_OFF;
uint64_t lastFanOffTimeSecond = 0;
uint64_t lastFanOnTimeSecond = 0;

uint8_t switchToOn() {
 8001978:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800197c:	b08e      	sub	sp, #56	; 0x38
 800197e:	af00      	add	r7, sp, #0
	double triggerOnProbs = 1;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	4c82      	ldr	r4, [pc, #520]	; (8001b90 <switchToOn+0x218>)
 8001986:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	uint64_t timediff = getTimer1Second() - lastFanOffTimeSecond;
 800198a:	f7ff ffe3 	bl	8001954 <getTimer1Second>
 800198e:	460a      	mov	r2, r1
 8001990:	4601      	mov	r1, r0
 8001992:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <switchToOn+0x21c>)
 8001994:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001998:	460b      	mov	r3, r1
 800199a:	4614      	mov	r4, r2
 800199c:	ebb3 030b 	subs.w	r3, r3, fp
 80019a0:	eb64 040c 	sbc.w	r4, r4, ip
 80019a4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	timediff = timediff > 300 ? 300 : timediff;
 80019a8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80019ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	42a2      	cmp	r2, r4
 80019b6:	bf08      	it	eq
 80019b8:	4299      	cmpeq	r1, r3
 80019ba:	d203      	bcs.n	80019c4 <switchToOn+0x4c>
 80019bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	float timeFromLastOff = timediff; // Second Max = 300 ??
 80019c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019cc:	f7ff f9dc 	bl	8000d88 <__aeabi_ul2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24

	float insideRHNow = H2;
 80019d4:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <switchToOn+0x220>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	623b      	str	r3, [r7, #32]
	float outsideRHNow = H1;
 80019da:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <switchToOn+0x224>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	61fb      	str	r3, [r7, #28]
	float diffNowRH = insideRHNow - outsideRHNow;
 80019e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc7 7a06 	vstr	s15, [r7, #24]

	double probDiffNowRh = (double) (1 / (1 + pow(e, - 0.34 * diffNowRH + 1)) );
 80019f0:	69b8      	ldr	r0, [r7, #24]
 80019f2:	f7fe fdb1 	bl	8000558 <__aeabi_f2d>
 80019f6:	a35e      	add	r3, pc, #376	; (adr r3, 8001b70 <switchToOn+0x1f8>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fe04 	bl	8000608 <__aeabi_dmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <switchToOn+0x218>)
 8001a0e:	f7fe fc45 	bl	800029c <__adddf3>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	ec44 3b17 	vmov	d7, r3, r4
 8001a1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a1e:	eef0 1a67 	vmov.f32	s3, s15
 8001a22:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8001b78 <switchToOn+0x200>
 8001a26:	f006 fe53 	bl	80086d0 <pow>
 8001a2a:	ec51 0b10 	vmov	r0, r1, d0
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <switchToOn+0x218>)
 8001a34:	f7fe fc32 	bl	800029c <__adddf3>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	4952      	ldr	r1, [pc, #328]	; (8001b90 <switchToOn+0x218>)
 8001a46:	f7fe ff09 	bl	800085c <__aeabi_ddiv>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double probTimeFromLastOff = (double) (1 / (1 + pow(e, - 0.1 * timeFromLastOff + 1)) );
 8001a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a349      	add	r3, pc, #292	; (adr r3, 8001b80 <switchToOn+0x208>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <switchToOn+0x218>)
 8001a70:	f7fe fc14 	bl	800029c <__adddf3>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	ec44 3b17 	vmov	d7, r3, r4
 8001a7c:	eeb0 1a47 	vmov.f32	s2, s14
 8001a80:	eef0 1a67 	vmov.f32	s3, s15
 8001a84:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8001b78 <switchToOn+0x200>
 8001a88:	f006 fe22 	bl	80086d0 <pow>
 8001a8c:	ec51 0b10 	vmov	r0, r1, d0
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <switchToOn+0x218>)
 8001a96:	f7fe fc01 	bl	800029c <__adddf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	493a      	ldr	r1, [pc, #232]	; (8001b90 <switchToOn+0x218>)
 8001aa8:	f7fe fed8 	bl	800085c <__aeabi_ddiv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double probInsideRh = (double) (1 / (1 + pow(e, - 0.34 * (insideRHNow - 60) + 1)) );
 8001ab4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ab8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001ba0 <switchToOn+0x228>
 8001abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ac0:	ee17 0a90 	vmov	r0, s15
 8001ac4:	f7fe fd48 	bl	8000558 <__aeabi_f2d>
 8001ac8:	a329      	add	r3, pc, #164	; (adr r3, 8001b70 <switchToOn+0x1f8>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe fd9b 	bl	8000608 <__aeabi_dmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <switchToOn+0x218>)
 8001ae0:	f7fe fbdc 	bl	800029c <__adddf3>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	ec44 3b17 	vmov	d7, r3, r4
 8001aec:	eeb0 1a47 	vmov.f32	s2, s14
 8001af0:	eef0 1a67 	vmov.f32	s3, s15
 8001af4:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001b78 <switchToOn+0x200>
 8001af8:	f006 fdea 	bl	80086d0 <pow>
 8001afc:	ec51 0b10 	vmov	r0, r1, d0
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <switchToOn+0x218>)
 8001b06:	f7fe fbc9 	bl	800029c <__adddf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4623      	mov	r3, r4
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	491e      	ldr	r1, [pc, #120]	; (8001b90 <switchToOn+0x218>)
 8001b18:	f7fe fea0 	bl	800085c <__aeabi_ddiv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	e9c7 3400 	strd	r3, r4, [r7]

	triggerOnProbs = probDiffNowRh * probTimeFromLastOff * probInsideRh;
 8001b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2c:	f7fe fd6c 	bl	8000608 <__aeabi_dmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f7fe fd64 	bl	8000608 <__aeabi_dmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	return triggerOnProbs > 0.6;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	a30e      	add	r3, pc, #56	; (adr r3, 8001b88 <switchToOn+0x210>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b56:	f7fe ffe7 	bl	8000b28 <__aeabi_dcmpgt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <switchToOn+0x1ec>
 8001b60:	2300      	movs	r3, #0
 8001b62:	461c      	mov	r4, r3
 8001b64:	b2e3      	uxtb	r3, r4
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3738      	adds	r7, #56	; 0x38
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001b70:	5c28f5c3 	.word	0x5c28f5c3
 8001b74:	bfd5c28f 	.word	0xbfd5c28f
 8001b78:	8b145703 	.word	0x8b145703
 8001b7c:	4005bf0a 	.word	0x4005bf0a
 8001b80:	9999999a 	.word	0x9999999a
 8001b84:	bfb99999 	.word	0xbfb99999
 8001b88:	33333333 	.word	0x33333333
 8001b8c:	3fe33333 	.word	0x3fe33333
 8001b90:	3ff00000 	.word	0x3ff00000
 8001b94:	20000238 	.word	0x20000238
 8001b98:	20000500 	.word	0x20000500
 8001b9c:	20000504 	.word	0x20000504
 8001ba0:	42700000 	.word	0x42700000
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <switchToOff>:

uint8_t switchToOff() {
 8001ba8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001bac:	b08e      	sub	sp, #56	; 0x38
 8001bae:	af00      	add	r7, sp, #0
	double triggerOffProbs = 1;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	4c8a      	ldr	r4, [pc, #552]	; (8001de0 <switchToOff+0x238>)
 8001bb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	uint64_t timediff = getTimer1Second() - lastFanOnTimeSecond;
 8001bba:	f7ff fecb 	bl	8001954 <getTimer1Second>
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <switchToOff+0x23c>)
 8001bc4:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	ebb3 030b 	subs.w	r3, r3, fp
 8001bd0:	eb64 040c 	sbc.w	r4, r4, ip
 8001bd4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	timediff = timediff > 300 ? 300 : timediff;
 8001bd8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001bdc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	42a2      	cmp	r2, r4
 8001be6:	bf08      	it	eq
 8001be8:	4299      	cmpeq	r1, r3
 8001bea:	d203      	bcs.n	8001bf4 <switchToOff+0x4c>
 8001bec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001bf0:	f04f 0400 	mov.w	r4, #0
 8001bf4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	float timeFromLastOn = timediff; // Second Max = 300 ??
 8001bf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bfc:	f7ff f8c4 	bl	8000d88 <__aeabi_ul2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

	float insideRHNow = H2;
 8001c04:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <switchToOff+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	623b      	str	r3, [r7, #32]
	float outsideRHNow = H1;
 8001c0a:	4b78      	ldr	r3, [pc, #480]	; (8001dec <switchToOff+0x244>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61fb      	str	r3, [r7, #28]
	float diffNowRH = insideRHNow - outsideRHNow;
 8001c10:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c14:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1c:	edc7 7a06 	vstr	s15, [r7, #24]

	double probDiffNowRh = (double) (1 / (1 + pow(e, - 0.3 * diffNowRH + 0.3)) );
 8001c20:	69b8      	ldr	r0, [r7, #24]
 8001c22:	f7fe fc99 	bl	8000558 <__aeabi_f2d>
 8001c26:	a364      	add	r3, pc, #400	; (adr r3, 8001db8 <switchToOff+0x210>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fcec 	bl	8000608 <__aeabi_dmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	4618      	mov	r0, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	a361      	add	r3, pc, #388	; (adr r3, 8001dc0 <switchToOff+0x218>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fb2d 	bl	800029c <__adddf3>
 8001c42:	4603      	mov	r3, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	ec44 3b17 	vmov	d7, r3, r4
 8001c4a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c4e:	eef0 1a67 	vmov.f32	s3, s15
 8001c52:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8001dc8 <switchToOff+0x220>
 8001c56:	f006 fd3b 	bl	80086d0 <pow>
 8001c5a:	ec51 0b10 	vmov	r0, r1, d0
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <switchToOff+0x238>)
 8001c64:	f7fe fb1a 	bl	800029c <__adddf3>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	f04f 0000 	mov.w	r0, #0
 8001c74:	495a      	ldr	r1, [pc, #360]	; (8001de0 <switchToOff+0x238>)
 8001c76:	f7fe fdf1 	bl	800085c <__aeabi_ddiv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double probTimeFromLastOff = (double) (1 / (1 + pow(e, - 0.2 * timeFromLastOn + 10)) );
 8001c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c84:	f7fe fc68 	bl	8000558 <__aeabi_f2d>
 8001c88:	a351      	add	r3, pc, #324	; (adr r3, 8001dd0 <switchToOff+0x228>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fcbb 	bl	8000608 <__aeabi_dmul>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	4618      	mov	r0, r3
 8001c98:	4621      	mov	r1, r4
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <switchToOff+0x248>)
 8001ca0:	f7fe fafc 	bl	800029c <__adddf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	ec44 3b17 	vmov	d7, r3, r4
 8001cac:	eeb0 1a47 	vmov.f32	s2, s14
 8001cb0:	eef0 1a67 	vmov.f32	s3, s15
 8001cb4:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001dc8 <switchToOff+0x220>
 8001cb8:	f006 fd0a 	bl	80086d0 <pow>
 8001cbc:	ec51 0b10 	vmov	r0, r1, d0
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <switchToOff+0x238>)
 8001cc6:	f7fe fae9 	bl	800029c <__adddf3>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	4942      	ldr	r1, [pc, #264]	; (8001de0 <switchToOff+0x238>)
 8001cd8:	f7fe fdc0 	bl	800085c <__aeabi_ddiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	probTimeFromLastOff = 1 - probTimeFromLastOff;
 8001ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	493c      	ldr	r1, [pc, #240]	; (8001de0 <switchToOff+0x238>)
 8001cee:	f7fe fad3 	bl	8000298 <__aeabi_dsub>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	double probInsideRh = (double) (1 / (1 + pow(e, - 0.4 * (insideRHNow - 45) + 3.5)) );
 8001cfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cfe:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001df4 <switchToOff+0x24c>
 8001d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d06:	ee17 0a90 	vmov	r0, s15
 8001d0a:	f7fe fc25 	bl	8000558 <__aeabi_f2d>
 8001d0e:	a332      	add	r3, pc, #200	; (adr r3, 8001dd8 <switchToOff+0x230>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc78 	bl	8000608 <__aeabi_dmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4621      	mov	r1, r4
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <switchToOff+0x250>)
 8001d26:	f7fe fab9 	bl	800029c <__adddf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	ec44 3b17 	vmov	d7, r3, r4
 8001d32:	eeb0 1a47 	vmov.f32	s2, s14
 8001d36:	eef0 1a67 	vmov.f32	s3, s15
 8001d3a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001dc8 <switchToOff+0x220>
 8001d3e:	f006 fcc7 	bl	80086d0 <pow>
 8001d42:	ec51 0b10 	vmov	r0, r1, d0
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <switchToOff+0x238>)
 8001d4c:	f7fe faa6 	bl	800029c <__adddf3>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	4920      	ldr	r1, [pc, #128]	; (8001de0 <switchToOff+0x238>)
 8001d5e:	f7fe fd7d 	bl	800085c <__aeabi_ddiv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	e9c7 3400 	strd	r3, r4, [r7]

	triggerOffProbs = probDiffNowRh * probTimeFromLastOff * probInsideRh;
 8001d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d82:	f7fe fc41 	bl	8000608 <__aeabi_dmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	return triggerOffProbs < 0.5;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	461c      	mov	r4, r3
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <switchToOff+0x254>)
 8001d98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d9c:	f7fe fea6 	bl	8000aec <__aeabi_dcmplt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <switchToOff+0x202>
 8001da6:	2300      	movs	r3, #0
 8001da8:	461c      	mov	r4, r3
 8001daa:	b2e3      	uxtb	r3, r4
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001db6:	bf00      	nop
 8001db8:	33333333 	.word	0x33333333
 8001dbc:	bfd33333 	.word	0xbfd33333
 8001dc0:	33333333 	.word	0x33333333
 8001dc4:	3fd33333 	.word	0x3fd33333
 8001dc8:	8b145703 	.word	0x8b145703
 8001dcc:	4005bf0a 	.word	0x4005bf0a
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	bfc99999 	.word	0xbfc99999
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	bfd99999 	.word	0xbfd99999
 8001de0:	3ff00000 	.word	0x3ff00000
 8001de4:	20000240 	.word	0x20000240
 8001de8:	20000500 	.word	0x20000500
 8001dec:	20000504 	.word	0x20000504
 8001df0:	40240000 	.word	0x40240000
 8001df4:	42340000 	.word	0x42340000
 8001df8:	400c0000 	.word	0x400c0000
 8001dfc:	3fe00000 	.word	0x3fe00000

08001e00 <setFan>:

uint8_t forceFanOn_FLAG = 0;
uint8_t forceFanOff_FLAG = 0;


void setFan(uint8_t targetFanState) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
//	if (targetFanState == nowFanState) return;
	if (forceFanOn_FLAG) {
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <setFan+0x5c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <setFan+0x20>
		HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4811      	ldr	r0, [pc, #68]	; (8001e60 <setFan+0x60>)
 8001e1a:	f002 fb79 	bl	8004510 <HAL_GPIO_WritePin>
		return;
 8001e1e:	e01a      	b.n	8001e56 <setFan+0x56>
	}
	if (forceFanOff_FLAG) {
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <setFan+0x64>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <setFan+0x36>
		HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_SET);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <setFan+0x60>)
 8001e30:	f002 fb6e 	bl	8004510 <HAL_GPIO_WritePin>
		return;
 8001e34:	e00f      	b.n	8001e56 <setFan+0x56>
	}


	if (targetFanState == FAN_ON) {
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <setFan+0x4a>
		HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <setFan+0x60>)
 8001e44:	f002 fb64 	bl	8004510 <HAL_GPIO_WritePin>
 8001e48:	e005      	b.n	8001e56 <setFan+0x56>
	}
	else {
		HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <setFan+0x60>)
 8001e52:	f002 fb5d 	bl	8004510 <HAL_GPIO_WritePin>
	}
}
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000248 	.word	0x20000248
 8001e60:	40020800 	.word	0x40020800
 8001e64:	20000249 	.word	0x20000249

08001e68 <fanControlLoop>:

void fanControlLoop() {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
//	float insideRH = 50;
//	float outsideRH = 60;
//	uint64_t timeInSecond = getTimer1Second();

	switch (fanState) {
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <fanControlLoop+0x24>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <fanControlLoop+0x18>
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d000      	beq.n	8001e7a <fanControlLoop+0x12>
			break;
		case FAN_OFF :
			state_FanOff();
			break;
		default :
			break;
 8001e78:	e005      	b.n	8001e86 <fanControlLoop+0x1e>
			state_FanOn();
 8001e7a:	f000 f809 	bl	8001e90 <state_FanOn>
			break;
 8001e7e:	e002      	b.n	8001e86 <fanControlLoop+0x1e>
			state_FanOff();
 8001e80:	f000 f820 	bl	8001ec4 <state_FanOff>
			break;
 8001e84:	bf00      	nop
	}

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000230 	.word	0x20000230

08001e90 <state_FanOn>:

void state_FanOn() {
 8001e90:	b598      	push	{r3, r4, r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	if (switchToOff() > 0) {
 8001e94:	f7ff fe88 	bl	8001ba8 <switchToOff>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <state_FanOn+0x24>
		lastFanOffTimeSecond = getTimer1Second();
 8001e9e:	f7ff fd59 	bl	8001954 <getTimer1Second>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <state_FanOn+0x2c>)
 8001ea8:	e9c2 3400 	strd	r3, r4, [r2]
		fanState = FAN_OFF;
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <state_FanOn+0x30>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
		return;
 8001eb2:	e002      	b.n	8001eba <state_FanOn+0x2a>
	}

	  //sprintf(serialOutBuffer,"FAN ON                                                                                                     \n" );
	  //HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
	  setFan(FAN_ON);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff ffa3 	bl	8001e00 <setFan>

}
 8001eba:	bd98      	pop	{r3, r4, r7, pc}
 8001ebc:	20000238 	.word	0x20000238
 8001ec0:	20000230 	.word	0x20000230

08001ec4 <state_FanOff>:

void state_FanOff() {
 8001ec4:	b598      	push	{r3, r4, r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	if (switchToOn() > 0) {
 8001ec8:	f7ff fd56 	bl	8001978 <switchToOn>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <state_FanOff+0x24>
		lastFanOnTimeSecond = getTimer1Second();
 8001ed2:	f7ff fd3f 	bl	8001954 <getTimer1Second>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460c      	mov	r4, r1
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <state_FanOff+0x2c>)
 8001edc:	e9c2 3400 	strd	r3, r4, [r2]
		fanState = FAN_ON;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <state_FanOff+0x30>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
		return;
 8001ee6:	e002      	b.n	8001eee <state_FanOff+0x2a>
	}
	  //sprintf(serialOutBuffer,"FAN OFF                                                                                                      \n" );
	  //HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
	  //HAL_GPIO_WritePin(FAN_GPIO, FAN_PIN, GPIO_PIN_SET);
	  setFan(FAN_OFF);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff ff89 	bl	8001e00 <setFan>
}
 8001eee:	bd98      	pop	{r3, r4, r7, pc}
 8001ef0:	20000240 	.word	0x20000240
 8001ef4:	20000230 	.word	0x20000230

08001ef8 <fanSystemHandle>:


void fanSystemHandle() {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
	  setDhtPin(GPIO_PIN_15);
 8001efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f02:	f7ff f907 	bl	8001114 <setDhtPin>
	  DHT_GetData(&DHT11_Data);
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f08:	f7ff faa6 	bl	8001458 <DHT_GetData>
	  T1 = DHT11_Data.Temperature;
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <fanSystemHandle+0xc4>)
 8001f12:	6013      	str	r3, [r2, #0]
	  H1 = DHT11_Data.Humidity;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <fanSystemHandle+0xc8>)
 8001f1a:	6013      	str	r3, [r2, #0]
	  globalValue.outTemperature = (uint8_t) T1;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <fanSystemHandle+0xc4>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f26:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f2a:	793b      	ldrb	r3, [r7, #4]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <fanSystemHandle+0xcc>)
 8001f30:	709a      	strb	r2, [r3, #2]
	  globalValue.outHumidity = (uint8_t) H1;
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <fanSystemHandle+0xc8>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f40:	793b      	ldrb	r3, [r7, #4]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <fanSystemHandle+0xcc>)
 8001f46:	70da      	strb	r2, [r3, #3]
	  //sprintf(serialOutBuffer,"Sensor 1 : Temperature : %.2f C , Humidity : %.2f %% \n",Temperature ,Humidity );
	  //HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 100 , 100 );
	  HAL_Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f000 ffad 	bl	8002ea8 <HAL_Delay>
//	  delay(100000);
	  int i = 20;
 8001f4e:	2314      	movs	r3, #20
 8001f50:	60fb      	str	r3, [r7, #12]
	  setDhtPin(GPIO_PIN_12);
 8001f52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f56:	f7ff f8dd 	bl	8001114 <setDhtPin>
	  DHT_GetData(&DHT11_Data);
 8001f5a:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f5c:	f7ff fa7c 	bl	8001458 <DHT_GetData>
	  T2 = DHT11_Data.Temperature;
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <fanSystemHandle+0xd0>)
 8001f66:	6013      	str	r3, [r2, #0]
	  H2 = DHT11_Data.Humidity + 4; // Shift up 4 %
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <fanSystemHandle+0xc0>)
 8001f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <fanSystemHandle+0xd4>)
 8001f78:	edc3 7a00 	vstr	s15, [r3]
	  globalValue.inTemperature = (uint8_t) T2;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <fanSystemHandle+0xd0>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f86:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f8a:	793b      	ldrb	r3, [r7, #4]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <fanSystemHandle+0xcc>)
 8001f90:	701a      	strb	r2, [r3, #0]
	  globalValue.inHumidity = (uint8_t) H2;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <fanSystemHandle+0xd4>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fa0:	793b      	ldrb	r3, [r7, #4]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <fanSystemHandle+0xcc>)
 8001fa6:	705a      	strb	r2, [r3, #1]
	  int x = 30;
 8001fa8:	231e      	movs	r3, #30
 8001faa:	60bb      	str	r3, [r7, #8]
	  //sprintf(serialOutBuffer,"Sensor 2 : Temperature : %.2f C , Humidity : %.2f %% \n",Temperature ,Humidity );
//	  sprintf(serialOutBuffer,"Sensor 1 : Temperature : %.2f C , Humidity : %.2f %%    Sensor 2 : Temperature : %.2f C , Humidity : %.2f %% \n",T1 ,H1 , T2 , H2 );
//	  HAL_UART_Transmit(&huart2 , (uint32_t *) serialOutBuffer , 200 , 100 );
	  fanControlLoop();
 8001fac:	f7ff ff5c 	bl	8001e68 <fanControlLoop>
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000470 	.word	0x20000470
 8001fbc:	20000478 	.word	0x20000478
 8001fc0:	20000504 	.word	0x20000504
 8001fc4:	200002d8 	.word	0x200002d8
 8001fc8:	20000268 	.word	0x20000268
 8001fcc:	20000500 	.word	0x20000500

08001fd0 <cpyTo>:
//			);
//	HAL_UART_Transmit(&huart2,(uint32_t *) out,150,200);
//	HAL_UART_Receive_IT(&huart2, rxData, 10);
//}

void cpyTo(char * from , char * to) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
	int lengthFrom = uart2_buff_size;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	613b      	str	r3, [r7, #16]
	int lengthTo = uart2_buff_size;
 8001fde:	230a      	movs	r3, #10
 8001fe0:	60fb      	str	r3, [r7, #12]
	int minlen = lengthFrom > lengthTo ? lengthTo : lengthFrom;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	bfa8      	it	ge
 8001fea:	4613      	movge	r3, r2
 8001fec:	60bb      	str	r3, [r7, #8]

	for (int i = 0 ; i < minlen ; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e00a      	b.n	800200a <cpyTo+0x3a>
		to[i] = from[i];
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	440b      	add	r3, r1
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < minlen ; i++) {
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	dbf0      	blt.n	8001ff4 <cpyTo+0x24>
	}
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <checkCorrectness>:



uint8_t checkCorrectness( char* data , int from , int to) {
 800201e:	b480      	push	{r7}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
	if (to - from + 1 != 8) return 0;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b07      	cmp	r3, #7
 8002032:	d001      	beq.n	8002038 <checkCorrectness+0x1a>
 8002034:	2300      	movs	r3, #0
 8002036:	e04b      	b.n	80020d0 <checkCorrectness+0xb2>
	if (data[from%uart2_buff_size] != 'S') return 0;
 8002038:	220a      	movs	r2, #10
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002040:	fb02 f201 	mul.w	r2, r2, r1
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b53      	cmp	r3, #83	; 0x53
 8002050:	d001      	beq.n	8002056 <checkCorrectness+0x38>
 8002052:	2300      	movs	r3, #0
 8002054:	e03c      	b.n	80020d0 <checkCorrectness+0xb2>
	if (data[to%uart2_buff_size] != 'E') return 0;
 8002056:	220a      	movs	r2, #10
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	fb93 f1f2 	sdiv	r1, r3, r2
 800205e:	fb02 f201 	mul.w	r2, r2, r1
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b45      	cmp	r3, #69	; 0x45
 800206e:	d001      	beq.n	8002074 <checkCorrectness+0x56>
 8002070:	2300      	movs	r3, #0
 8002072:	e02d      	b.n	80020d0 <checkCorrectness+0xb2>
	// iN temp , in hum , out temp , out hum , adc // first 5 bytes
	from++;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3301      	adds	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
	// fan pump light
	for (int i = 0 ; i < 3 ; i++ ) {
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e023      	b.n	80020c8 <checkCorrectness+0xaa>
		if ((data[(from + i)%uart2_buff_size]) + (data[(from + 3 + i)%uart2_buff_size]) != 255) {
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4413      	add	r3, r2
 8002086:	220a      	movs	r2, #10
 8002088:	fb93 f1f2 	sdiv	r1, r3, r2
 800208c:	fb02 f201 	mul.w	r2, r2, r1
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1cda      	adds	r2, r3, #3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4413      	add	r3, r2
 80020a4:	220a      	movs	r2, #10
 80020a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020aa:	fb02 f201 	mul.w	r2, r2, r1
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4403      	add	r3, r0
 80020ba:	2bff      	cmp	r3, #255	; 0xff
 80020bc:	d001      	beq.n	80020c2 <checkCorrectness+0xa4>
			return 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	e006      	b.n	80020d0 <checkCorrectness+0xb2>
	for (int i = 0 ; i < 3 ; i++ ) {
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	ddd8      	ble.n	8002080 <checkCorrectness+0x62>
		}
	}

	return 1;
 80020ce:	2301      	movs	r3, #1

}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <getStateFromUART2>:

uint8_t getStateFromUART2(Uart2Value * values) {
 80020dc:	b5b0      	push	{r4, r5, r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	466b      	mov	r3, sp
 80020e6:	461d      	mov	r5, r3
	char UART2_tmpBuffer[uart2_buff_size];
 80020e8:	230a      	movs	r3, #10
 80020ea:	3b01      	subs	r3, #1
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	230a      	movs	r3, #10
 80020f0:	4619      	mov	r1, r3
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	f04f 0400 	mov.w	r4, #0
 80020fe:	00d4      	lsls	r4, r2, #3
 8002100:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002104:	00cb      	lsls	r3, r1, #3
 8002106:	230a      	movs	r3, #10
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	f04f 0400 	mov.w	r4, #0
 8002116:	00d4      	lsls	r4, r2, #3
 8002118:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800211c:	00cb      	lsls	r3, r1, #3
 800211e:	230a      	movs	r3, #10
 8002120:	3307      	adds	r3, #7
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	ebad 0d03 	sub.w	sp, sp, r3
 800212a:	466b      	mov	r3, sp
 800212c:	3300      	adds	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
	cpyTo(UART2_rxBuffer , UART2_tmpBuffer);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4619      	mov	r1, r3
 8002134:	483b      	ldr	r0, [pc, #236]	; (8002224 <getStateFromUART2+0x148>)
 8002136:	f7ff ff4b 	bl	8001fd0 <cpyTo>

	int startPtr = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
	int endPtr = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]

	int ansStPtr = -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ansEndPtr = -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800214c:	617b      	str	r3, [r7, #20]

	int packetLength = 8; // Fixed length
 800214e:	2308      	movs	r3, #8
 8002150:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < (uart2_buff_size << 1) ; i++ ) {
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e029      	b.n	80021ac <getStateFromUART2+0xd0>
		int idx = i % uart2_buff_size;
 8002158:	220a      	movs	r2, #10
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002160:	fb02 f201 	mul.w	r2, r2, r1
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
		if (UART2_tmpBuffer[idx] == 'S') {
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b53      	cmp	r3, #83	; 0x53
 8002172:	d102      	bne.n	800217a <getStateFromUART2+0x9e>
			// Start from here
			startPtr = i;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
			continue;
 8002178:	e015      	b.n	80021a6 <getStateFromUART2+0xca>
		}
		if (UART2_tmpBuffer[idx] == 'E') {
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b45      	cmp	r3, #69	; 0x45
 8002184:	d10f      	bne.n	80021a6 <getStateFromUART2+0xca>
			endPtr = i;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	61bb      	str	r3, [r7, #24]

			if ( checkCorrectness(UART2_tmpBuffer,startPtr , endPtr) ) {
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff44 	bl	800201e <checkCorrectness>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <getStateFromUART2+0xc8>
				ansStPtr = startPtr;
 800219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
				ansEndPtr = endPtr;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	617b      	str	r3, [r7, #20]
			}
			continue;
 80021a4:	bf00      	nop
	for (int i = 0 ; i < (uart2_buff_size << 1) ; i++ ) {
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	3301      	adds	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
 80021ac:	230a      	movs	r3, #10
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbd0      	blt.n	8002158 <getStateFromUART2+0x7c>
//	values.inTemperature 	= UART2_tmpBuffer[ansStPtr+1];
//	values.inHumidity 		= UART2_tmpBuffer[ansStPtr+2];
//	values.outTemperature	= UART2_tmpBuffer[ansStPtr+3];
//	values.outHumidity 		= UART2_tmpBuffer[ansStPtr+4];
//	values.soilMoisure		= UART2_tmpBuffer[ansStPtr+5];
	if (ansStPtr == -1) return 0;
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021bc:	d101      	bne.n	80021c2 <getStateFromUART2+0xe6>
 80021be:	2300      	movs	r3, #0
 80021c0:	e02a      	b.n	8002218 <getStateFromUART2+0x13c>
	values->fanState		= UART2_tmpBuffer[(ansStPtr+1)%uart2_buff_size] - '0';
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	3301      	adds	r3, #1
 80021c6:	220a      	movs	r2, #10
 80021c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80021cc:	fb02 f201 	mul.w	r2, r2, r1
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	3b30      	subs	r3, #48	; 0x30
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	715a      	strb	r2, [r3, #5]
	values->pumpState		= UART2_tmpBuffer[(ansStPtr+2)%uart2_buff_size] - '0';
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	3302      	adds	r3, #2
 80021e2:	220a      	movs	r2, #10
 80021e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80021e8:	fb02 f201 	mul.w	r2, r2, r1
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	3b30      	subs	r3, #48	; 0x30
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	71da      	strb	r2, [r3, #7]
	values->lightState		= UART2_tmpBuffer[(ansStPtr+3)%uart2_buff_size] - '0';
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	3303      	adds	r3, #3
 80021fe:	220a      	movs	r2, #10
 8002200:	fb93 f1f2 	sdiv	r1, r3, r2
 8002204:	fb02 f201 	mul.w	r2, r2, r1
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	3b30      	subs	r3, #48	; 0x30
 8002210:	b2da      	uxtb	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	719a      	strb	r2, [r3, #6]

	return 1;
 8002216:	2301      	movs	r3, #1
 8002218:	46ad      	mov	sp, r5

}
 800221a:	4618      	mov	r0, r3
 800221c:	3730      	adds	r7, #48	; 0x30
 800221e:	46bd      	mov	sp, r7
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	bf00      	nop
 8002224:	2000026c 	.word	0x2000026c

08002228 <sendValueUART2>:

void sendValueUART2(Uart2Value values) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	463b      	mov	r3, r7
 8002230:	e883 0003 	stmia.w	r3, {r0, r1}
	char txBuffer[18];
	txBuffer[0] = 'S';
 8002234:	2353      	movs	r3, #83	; 0x53
 8002236:	733b      	strb	r3, [r7, #12]

	// Data
	txBuffer[1] = values.inTemperature;
 8002238:	783b      	ldrb	r3, [r7, #0]
 800223a:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = values.inHumidity;
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	73bb      	strb	r3, [r7, #14]
	txBuffer[3] = values.outTemperature;
 8002240:	78bb      	ldrb	r3, [r7, #2]
 8002242:	73fb      	strb	r3, [r7, #15]
	txBuffer[4] = values.outHumidity;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	743b      	strb	r3, [r7, #16]
	txBuffer[5] = values.soilMoisure;
 8002248:	793b      	ldrb	r3, [r7, #4]
 800224a:	747b      	strb	r3, [r7, #17]

	txBuffer[6] = values.fanState;
 800224c:	797b      	ldrb	r3, [r7, #5]
 800224e:	74bb      	strb	r3, [r7, #18]
	txBuffer[7] = values.pumpState;
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	74fb      	strb	r3, [r7, #19]
	txBuffer[8] = values.lightState;
 8002254:	79bb      	ldrb	r3, [r7, #6]
 8002256:	753b      	strb	r3, [r7, #20]

	// checkBit
	uint8_t mxValInt = 255;
 8002258:	23ff      	movs	r3, #255	; 0xff
 800225a:	77fb      	strb	r3, [r7, #31]
	//uint8_t mxValState = 3;

	txBuffer[9]  = mxValInt - txBuffer[1];
 800225c:	7b7b      	ldrb	r3, [r7, #13]
 800225e:	7ffa      	ldrb	r2, [r7, #31]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	757b      	strb	r3, [r7, #21]
	txBuffer[10] = mxValInt - txBuffer[2];
 8002266:	7bbb      	ldrb	r3, [r7, #14]
 8002268:	7ffa      	ldrb	r2, [r7, #31]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	75bb      	strb	r3, [r7, #22]
	txBuffer[11] = mxValInt - txBuffer[3];
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	7ffa      	ldrb	r2, [r7, #31]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	75fb      	strb	r3, [r7, #23]
	txBuffer[12] = mxValInt - txBuffer[4];
 800227a:	7c3b      	ldrb	r3, [r7, #16]
 800227c:	7ffa      	ldrb	r2, [r7, #31]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	763b      	strb	r3, [r7, #24]
	txBuffer[13] = mxValInt - txBuffer[5];
 8002284:	7c7b      	ldrb	r3, [r7, #17]
 8002286:	7ffa      	ldrb	r2, [r7, #31]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	767b      	strb	r3, [r7, #25]

	txBuffer[14] = mxValInt - txBuffer[6];
 800228e:	7cbb      	ldrb	r3, [r7, #18]
 8002290:	7ffa      	ldrb	r2, [r7, #31]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	76bb      	strb	r3, [r7, #26]
	txBuffer[15] = mxValInt - txBuffer[7];
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	7ffa      	ldrb	r2, [r7, #31]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	76fb      	strb	r3, [r7, #27]
	txBuffer[16] = mxValInt - txBuffer[8];
 80022a2:	7d3b      	ldrb	r3, [r7, #20]
 80022a4:	7ffa      	ldrb	r2, [r7, #31]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	773b      	strb	r3, [r7, #28]

	txBuffer[17] = 'E';
 80022ac:	2345      	movs	r3, #69	; 0x45
 80022ae:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart2,&txBuffer,18,100);
 80022b0:	f107 010c 	add.w	r1, r7, #12
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	2212      	movs	r2, #18
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <sendValueUART2+0xa0>)
 80022ba:	f003 f9ce 	bl	800565a <HAL_UART_Transmit>
//
//	char endLine[1];
//	endLine[0] = '\n';
//	HAL_UART_Transmit(&huart2,endLine,1,100);
}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200004c0 	.word	0x200004c0

080022cc <updateSystemState>:


void updateSystemState() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
//	Uart2Value globalValueFromUART2; // state set
//	Uart2Value globalValueSTM; // temp ...
	Uart2Value val;
	if (getStateFromUART2(&val)) {
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff01 	bl	80020dc <getStateFromUART2>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d059      	beq.n	8002394 <updateSystemState+0xc8>

		uint8_t fanState = val.fanState;
 80022e0:	7a7b      	ldrb	r3, [r7, #9]
 80022e2:	73fb      	strb	r3, [r7, #15]
		uint8_t pumpState = val.pumpState;
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	73bb      	strb	r3, [r7, #14]
		uint8_t lightState = val.lightState;
 80022e8:	7abb      	ldrb	r3, [r7, #10]
 80022ea:	737b      	strb	r3, [r7, #13]
//		uint8_t debugMode_FLAG = 0;
//		uint8_t lightOn_FLAG = 1;
//		uint8_t captureMode_FLAG = 0;

		// light state
		if (lightState == 0) {
 80022ec:	7b7b      	ldrb	r3, [r7, #13]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <updateSystemState+0x2e>
			// force off
			lightOn_FLAG = 0;
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <updateSystemState+0xd0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e00f      	b.n	800231a <updateSystemState+0x4e>
		}
		else if (lightState == 2) {
 80022fa:	7b7b      	ldrb	r3, [r7, #13]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d106      	bne.n	800230e <updateSystemState+0x42>
			// force white
			lightOn_FLAG = 1;
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <updateSystemState+0xd0>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
			captureMode_FLAG = 1;
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <updateSystemState+0xd4>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <updateSystemState+0x4e>
		}
		else {
			// normal mode
			lightOn_FLAG = 1;
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <updateSystemState+0xd0>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
			captureMode_FLAG = 0;
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <updateSystemState+0xd4>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
		}


		// PUMP
		if (pumpState == 0) {
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <updateSystemState+0x62>
			// force off
			forceRelayOn_FLAG = 0;
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <updateSystemState+0xd8>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 1;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <updateSystemState+0xdc>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e00f      	b.n	800234e <updateSystemState+0x82>
		}
		else if (pumpState == 2) {
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d106      	bne.n	8002342 <updateSystemState+0x76>
			// force on
			forceRelayOn_FLAG = 1;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <updateSystemState+0xd8>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 0;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <updateSystemState+0xdc>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e005      	b.n	800234e <updateSystemState+0x82>
		}
		else {
			// normal mode
			forceRelayOn_FLAG = 0;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <updateSystemState+0xd8>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 0;
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <updateSystemState+0xdc>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
//
//		uint8_t forceFanOn_FLAG = 0;
//		uint8_t forceFanOff_FLAG = 0;

		// FAN
		if (fanState == 0) {
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <updateSystemState+0x96>
			// force off
			forceFanOn_FLAG = 0;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <updateSystemState+0xe0>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 1;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <updateSystemState+0xdc>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e00f      	b.n	8002382 <updateSystemState+0xb6>


		}
		else if (fanState == 2) {
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d106      	bne.n	8002376 <updateSystemState+0xaa>
			// force on
			forceFanOn_FLAG = 1;
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <updateSystemState+0xe0>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 0;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <updateSystemState+0xdc>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e005      	b.n	8002382 <updateSystemState+0xb6>
		}
		else {
			// normal mode
			forceFanOn_FLAG = 0;
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <updateSystemState+0xe0>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
			forceRelayOff_FLAG = 0;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <updateSystemState+0xdc>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		}

		globalValue.fanState = fanState;
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <updateSystemState+0xe4>)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	7153      	strb	r3, [r2, #5]
		globalValue.lightState = lightState;
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <updateSystemState+0xe4>)
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	7193      	strb	r3, [r2, #6]
		globalValue.pumpState = pumpState;
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <updateSystemState+0xe4>)
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	71d3      	strb	r3, [r2, #7]

	}

}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000003 	.word	0x20000003
 80023a0:	20000210 	.word	0x20000210
 80023a4:	2000020d 	.word	0x2000020d
 80023a8:	2000020e 	.word	0x2000020e
 80023ac:	20000248 	.word	0x20000248
 80023b0:	200002d8 	.word	0x200002d8

080023b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b8:	f000 fd04 	bl	8002dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023bc:	f000 f84e 	bl	800245c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c0:	f000 fa1e 	bl	8002800 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c4:	f000 f9fc 	bl	80027c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80023c8:	f000 f9d0 	bl	800276c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80023cc:	f000 f8b0 	bl	8002530 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023d0:	f000 f902 	bl	80025d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80023d4:	f000 f9a0 	bl	8002718 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80023d8:	f000 f950 	bl	800267c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start(&hadc1);
  HAL_TIM_Base_Start_IT(&htim1);
 80023dc:	4819      	ldr	r0, [pc, #100]	; (8002444 <main+0x90>)
 80023de:	f002 fd3e 	bl	8004e5e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80023e2:	4819      	ldr	r0, [pc, #100]	; (8002448 <main+0x94>)
 80023e4:	f002 fd3b 	bl	8004e5e <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart2, rxData, 10);
  HAL_UART_Receive_DMA (&huart2, UART2_rxBuffer, uart2_buff_size);
 80023e8:	230a      	movs	r3, #10
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4917      	ldr	r1, [pc, #92]	; (800244c <main+0x98>)
 80023f0:	4817      	ldr	r0, [pc, #92]	; (8002450 <main+0x9c>)
 80023f2:	f003 f9cb 	bl	800578c <HAL_UART_Receive_DMA>
  HAL_ADC_Start_IT(&hadc1);
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <main+0xa0>)
 80023f8:	f000 fdbc 	bl	8002f74 <HAL_ADC_Start_IT>
  globalValue.fanState = 1;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <main+0xa4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	715a      	strb	r2, [r3, #5]
  globalValue.lightState = 1;
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <main+0xa4>)
 8002404:	2201      	movs	r2, #1
 8002406:	719a      	strb	r2, [r3, #6]
  globalValue.pumpState = 1;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <main+0xa4>)
 800240a:	2201      	movs	r2, #1
 800240c:	71da      	strb	r2, [r3, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Stop adc irq
	  HAL_ADC_Stop_IT(&hadc1);
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <main+0xa0>)
 8002410:	f000 fe60 	bl	80030d4 <HAL_ADC_Stop_IT>
	  fanSystemHandle();
 8002414:	f7ff fd70 	bl	8001ef8 <fanSystemHandle>
	  HAL_ADC_Start_IT(&hadc1);
 8002418:	480e      	ldr	r0, [pc, #56]	; (8002454 <main+0xa0>)
 800241a:	f000 fdab 	bl	8002f74 <HAL_ADC_Start_IT>
	  // send serial here //

//	  if (getStateFromUART2(&val)) {
//		  sendValueUART2(val);
//	  }
	  updateSystemState();
 800241e:	f7ff ff55 	bl	80022cc <updateSystemState>
	  sendValueUART2(globalValue);
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <main+0xa4>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2100      	movs	r1, #0
 8002428:	4611      	mov	r1, r2
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	461a      	mov	r2, r3
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	f7ff fef8 	bl	8002228 <sendValueUART2>
	  HAL_Delay(1000);
 8002438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800243c:	f000 fd34 	bl	8002ea8 <HAL_Delay>
	  HAL_ADC_Stop_IT(&hadc1);
 8002440:	e7e5      	b.n	800240e <main+0x5a>
 8002442:	bf00      	nop
 8002444:	2000047c 	.word	0x2000047c
 8002448:	200002e0 	.word	0x200002e0
 800244c:	2000026c 	.word	0x2000026c
 8002450:	200004c0 	.word	0x200004c0
 8002454:	200003e8 	.word	0x200003e8
 8002458:	200002d8 	.word	0x200002d8

0800245c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b094      	sub	sp, #80	; 0x50
 8002460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002462:	f107 0320 	add.w	r3, r7, #32
 8002466:	2230      	movs	r2, #48	; 0x30
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f004 f8ea 	bl	8006644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <SystemClock_Config+0xcc>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <SystemClock_Config+0xcc>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <SystemClock_Config+0xcc>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <SystemClock_Config+0xd0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a21      	ldr	r2, [pc, #132]	; (800252c <SystemClock_Config+0xd0>)
 80024a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <SystemClock_Config+0xd0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024bc:	2301      	movs	r3, #1
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c0:	2310      	movs	r3, #16
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c4:	2302      	movs	r3, #2
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024cc:	2308      	movs	r3, #8
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80024d0:	2350      	movs	r3, #80	; 0x50
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024d8:	2304      	movs	r3, #4
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 f82f 	bl	8004544 <HAL_RCC_OscConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024ec:	f000 fa1a 	bl	8002924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f0:	230f      	movs	r3, #15
 80024f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f4:	2302      	movs	r3, #2
 80024f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002502:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fa88 	bl	8004a24 <HAL_RCC_ClockConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800251a:	f000 fa03 	bl	8002924 <Error_Handler>
  }
}
 800251e:	bf00      	nop
 8002520:	3750      	adds	r7, #80	; 0x50
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000

08002530 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002536:	463b      	mov	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <MX_ADC1_Init+0xa0>)
 8002546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <MX_ADC1_Init+0x9c>)
 800254a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800254e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002552:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002556:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <MX_ADC1_Init+0x9c>)
 800255a:	2201      	movs	r2, #1
 800255c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002560:	2201      	movs	r2, #1
 8002562:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <MX_ADC1_Init+0x9c>)
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <MX_ADC1_Init+0xa4>)
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_ADC1_Init+0x9c>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002580:	2201      	movs	r2, #1
 8002582:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_ADC1_Init+0x9c>)
 800258e:	2200      	movs	r2, #0
 8002590:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002592:	480e      	ldr	r0, [pc, #56]	; (80025cc <MX_ADC1_Init+0x9c>)
 8002594:	f000 fcaa 	bl	8002eec <HAL_ADC_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800259e:	f000 f9c1 	bl	8002924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ae:	463b      	mov	r3, r7
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <MX_ADC1_Init+0x9c>)
 80025b4:	f000 ff38 	bl	8003428 <HAL_ADC_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80025be:	f000 f9b1 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200003e8 	.word	0x200003e8
 80025d0:	40012000 	.word	0x40012000
 80025d4:	0f000001 	.word	0x0f000001

080025d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	463b      	mov	r3, r7
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_TIM1_Init+0x9c>)
 80025f6:	4a20      	ldr	r2, [pc, #128]	; (8002678 <MX_TIM1_Init+0xa0>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000 - 1;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <MX_TIM1_Init+0x9c>)
 80025fc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002600:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_TIM1_Init+0x9c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_TIM1_Init+0x9c>)
 800260a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <MX_TIM1_Init+0x9c>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_TIM1_Init+0x9c>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <MX_TIM1_Init+0x9c>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <MX_TIM1_Init+0x9c>)
 8002624:	f002 fbf0 	bl	8004e08 <HAL_TIM_Base_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800262e:	f000 f979 	bl	8002924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002636:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	4619      	mov	r1, r3
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_TIM1_Init+0x9c>)
 8002640:	f002 fd39 	bl	80050b6 <HAL_TIM_ConfigClockSource>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800264a:	f000 f96b 	bl	8002924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002656:	463b      	mov	r3, r7
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_TIM1_Init+0x9c>)
 800265c:	f002 ff2e 	bl	80054bc <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002666:	f000 f95d 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000047c 	.word	0x2000047c
 8002678:	40010000 	.word	0x40010000

0800267c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM3_Init+0x94>)
 800269a:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <MX_TIM3_Init+0x98>)
 800269c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000 - 1;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM3_Init+0x94>)
 80026a0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80026a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM3_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM3_Init+0x94>)
 80026ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_TIM3_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_TIM3_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <MX_TIM3_Init+0x94>)
 80026c2:	f002 fba1 	bl	8004e08 <HAL_TIM_Base_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80026cc:	f000 f92a 	bl	8002924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	4619      	mov	r1, r3
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <MX_TIM3_Init+0x94>)
 80026de:	f002 fcea 	bl	80050b6 <HAL_TIM_ConfigClockSource>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80026e8:	f000 f91c 	bl	8002924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026f4:	463b      	mov	r3, r7
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM3_Init+0x94>)
 80026fa:	f002 fedf 	bl	80054bc <HAL_TIMEx_MasterConfigSynchronization>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002704:	f000 f90e 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200002e0 	.word	0x200002e0
 8002714:	40000400 	.word	0x40000400

08002718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <MX_USART1_UART_Init+0x50>)
 8002720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800273e:	220c      	movs	r2, #12
 8002740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_USART1_UART_Init+0x4c>)
 8002750:	f002 ff36 	bl	80055c0 <HAL_UART_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800275a:	f000 f8e3 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000430 	.word	0x20000430
 8002768:	40011000 	.word	0x40011000

0800276c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <MX_USART2_UART_Init+0x50>)
 8002774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800277c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002792:	220c      	movs	r2, #12
 8002794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027a2:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_USART2_UART_Init+0x4c>)
 80027a4:	f002 ff0c 	bl	80055c0 <HAL_UART_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ae:	f000 f8b9 	bl	8002924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200004c0 	.word	0x200004c0
 80027bc:	40004400 	.word	0x40004400

080027c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_DMA_Init+0x3c>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <MX_DMA_Init+0x3c>)
 80027d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_DMA_Init+0x3c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	2010      	movs	r0, #16
 80027e8:	f001 f931 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027ec:	2010      	movs	r0, #16
 80027ee:	f001 f94a 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <MX_GPIO_Init+0x114>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a3d      	ldr	r2, [pc, #244]	; (8002914 <MX_GPIO_Init+0x114>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <MX_GPIO_Init+0x114>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b37      	ldr	r3, [pc, #220]	; (8002914 <MX_GPIO_Init+0x114>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a36      	ldr	r2, [pc, #216]	; (8002914 <MX_GPIO_Init+0x114>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <MX_GPIO_Init+0x114>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <MX_GPIO_Init+0x114>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <MX_GPIO_Init+0x114>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <MX_GPIO_Init+0x114>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <MX_GPIO_Init+0x114>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <MX_GPIO_Init+0x114>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <MX_GPIO_Init+0x114>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	2120      	movs	r1, #32
 800288a:	4823      	ldr	r0, [pc, #140]	; (8002918 <MX_GPIO_Init+0x118>)
 800288c:	f001 fe40 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002896:	4821      	ldr	r0, [pc, #132]	; (800291c <MX_GPIO_Init+0x11c>)
 8002898:	f001 fe3a 	bl	8004510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800289c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <MX_GPIO_Init+0x120>)
 80028a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	481a      	ldr	r0, [pc, #104]	; (800291c <MX_GPIO_Init+0x11c>)
 80028b2:	f001 fc93 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028b6:	2320      	movs	r3, #32
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028ba:	2311      	movs	r3, #17
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4812      	ldr	r0, [pc, #72]	; (8002918 <MX_GPIO_Init+0x118>)
 80028ce:	f001 fc85 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028d8:	2311      	movs	r3, #17
 80028da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	4619      	mov	r1, r3
 80028ea:	480c      	ldr	r0, [pc, #48]	; (800291c <MX_GPIO_Init+0x11c>)
 80028ec:	f001 fc76 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	4804      	ldr	r0, [pc, #16]	; (8002918 <MX_GPIO_Init+0x118>)
 8002906:	f001 fc69 	bl	80041dc <HAL_GPIO_Init>

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000
 800291c:	40020800 	.word	0x40020800
 8002920:	10210000 	.word	0x10210000

08002924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <HAL_MspInit+0x4c>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_MspInit+0x4c>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002972:	2007      	movs	r0, #7
 8002974:	f001 f860 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_ADC_MspInit+0x8c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12f      	bne.n	8002a06 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_ADC_MspInit+0x90>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029de:	2301      	movs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e2:	2303      	movs	r3, #3
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <HAL_ADC_MspInit+0x94>)
 80029f2:	f001 fbf3 	bl	80041dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2012      	movs	r0, #18
 80029fc:	f001 f827 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a00:	2012      	movs	r0, #18
 8002a02:	f001 f840 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	; 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40012000 	.word	0x40012000
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000

08002a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_TIM_Base_MspInit+0x80>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d116      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2019      	movs	r0, #25
 8002a50:	f000 fffd 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a54:	2019      	movs	r0, #25
 8002a56:	f001 f816 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a5a:	e01a      	b.n	8002a92 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_TIM_Base_MspInit+0x88>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d115      	bne.n	8002a92 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_TIM_Base_MspInit+0x84>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	201d      	movs	r0, #29
 8002a88:	f000 ffe1 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a8c:	201d      	movs	r0, #29
 8002a8e:	f000 fffa 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <HAL_UART_MspInit+0x158>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d12d      	bne.n	8002b26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a45      	ldr	r2, [pc, #276]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b14:	2307      	movs	r3, #7
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	483a      	ldr	r0, [pc, #232]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b20:	f001 fb5c 	bl	80041dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b24:	e067      	b.n	8002bf6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_UART_MspInit+0x164>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d162      	bne.n	8002bf6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_UART_MspInit+0x15c>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 031c 	add.w	r3, r7, #28
 8002b80:	4619      	mov	r1, r3
 8002b82:	4821      	ldr	r0, [pc, #132]	; (8002c08 <HAL_UART_MspInit+0x160>)
 8002b84:	f001 fb2a 	bl	80041dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <HAL_UART_MspInit+0x16c>)
 8002b8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bca:	4811      	ldr	r0, [pc, #68]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bcc:	f000 ff76 	bl	8003abc <HAL_DMA_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002bd6:	f7ff fea5 	bl	8002924 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_UART_MspInit+0x168>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2026      	movs	r0, #38	; 0x26
 8002bec:	f000 ff2f 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	2026      	movs	r0, #38	; 0x26
 8002bf2:	f000 ff48 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3730      	adds	r7, #48	; 0x30
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40004400 	.word	0x40004400
 8002c10:	20000278 	.word	0x20000278
 8002c14:	40026088 	.word	0x40026088

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <NMI_Handler+0x4>

08002c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c64:	f000 f900 	bl	8002e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <DMA1_Stream5_IRQHandler+0x10>)
 8002c72:	f001 f84b 	bl	8003d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000278 	.word	0x20000278

08002c80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <ADC_IRQHandler+0x14>)
 8002c86:	f000 fa62 	bl	800314e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  adcCallback();
 8002c8a:	f7fe fcd1 	bl	8001630 <adcCallback>
  /* USER CODE END ADC_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200003e8 	.word	0x200003e8

08002c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002c9e:	f002 f902 	bl	8004ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  timerIRQcallback();
 8002ca2:	f7fe fe1f 	bl	80018e4 <timerIRQcallback>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000047c 	.word	0x2000047c

08002cb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <TIM3_IRQHandler+0x10>)
 8002cb6:	f002 f8f6 	bl	8004ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//  fanSystemHandle();
  /* USER CODE END TIM3_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200002e0 	.word	0x200002e0

08002cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <USART2_IRQHandler+0x10>)
 8002cca:	f002 fddf 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200004c0 	.word	0x200004c0

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f003 fc72 	bl	80065f0 <__errno>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20020000 	.word	0x20020000
 8002d38:	00000400 	.word	0x00000400
 8002d3c:	2000024c 	.word	0x2000024c
 8002d40:	20000510 	.word	0x20000510

08002d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <SystemInit+0x28>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <SystemInit+0x28>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SystemInit+0x28>)
 8002d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d76:	e003      	b.n	8002d80 <LoopCopyDataInit>

08002d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d7e:	3104      	adds	r1, #4

08002d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d80:	480b      	ldr	r0, [pc, #44]	; (8002db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d88:	d3f6      	bcc.n	8002d78 <CopyDataInit>
  ldr  r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d8c:	e002      	b.n	8002d94 <LoopFillZerobss>

08002d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d90:	f842 3b04 	str.w	r3, [r2], #4

08002d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d98:	d3f9      	bcc.n	8002d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d9a:	f7ff ffd3 	bl	8002d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f003 fc2d 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da2:	f7ff fb07 	bl	80023b4 <main>
  bx  lr    
 8002da6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dac:	08009a88 	.word	0x08009a88
  ldr  r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002db4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002db8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8002dbc:	20000510 	.word	0x20000510

08002dc0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <DMA1_Stream0_IRQHandler>
	...

08002dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_Init+0x40>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_Init+0x40>)
 8002dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_Init+0x40>)
 8002dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_Init+0x40>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f000 fe23 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f000 f808 	bl	8002e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df8:	f7ff fd9c 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00

08002e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_InitTick+0x54>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_InitTick+0x58>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fe3b 	bl	8003aa2 <HAL_SYSTICK_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00e      	b.n	8002e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d80a      	bhi.n	8002e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e44:	f000 fe03 	bl	8003a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e48:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <HAL_InitTick+0x5c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000010 	.word	0x20000010
 8002e60:	20000018 	.word	0x20000018
 8002e64:	20000014 	.word	0x20000014

08002e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_IncTick+0x20>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x24>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_IncTick+0x24>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000018 	.word	0x20000018
 8002e8c:	20000508 	.word	0x20000508

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_GetTick+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000508 	.word	0x20000508

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff ffee 	bl	8002e90 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec0:	d005      	beq.n	8002ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_Delay+0x40>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ece:	bf00      	nop
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f7      	bhi.n	8002ed0 <HAL_Delay+0x28>
  {
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000018 	.word	0x20000018

08002eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e033      	b.n	8002f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fd3a 	bl	8002984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fba4 	bl	800368c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
 8002f5a:	e001      	b.n	8002f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Start_IT+0x1a>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e094      	b.n	80030b8 <HAL_ADC_Start_IT+0x144>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d018      	beq.n	8002fd6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <HAL_ADC_Start_IT+0x150>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a43      	ldr	r2, [pc, #268]	; (80030c8 <HAL_ADC_Start_IT+0x154>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9a      	lsrs	r2, r3, #18
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f9      	bne.n	8002fca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d168      	bne.n	80030b6 <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800300e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f023 0206 	bic.w	r2, r3, #6
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
 8003030:	e002      	b.n	8003038 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003040:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_ADC_Start_IT+0x158>)
 8003042:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800304c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11c      	bne.n	80030b6 <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e013      	b.n	80030b6 <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_ADC_Start_IT+0x15c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10e      	bne.n	80030b6 <HAL_ADC_Start_IT+0x142>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	20000010 	.word	0x20000010
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	40012300 	.word	0x40012300
 80030d0:	40012000 	.word	0x40012000

080030d4 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Stop_IT+0x16>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e02b      	b.n	8003142 <HAL_ADC_Stop_IT+0x6e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d113      	bne.n	8003138 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800311e:	f023 0320 	bic.w	r3, r3, #32
 8003122:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d049      	beq.n	8003224 <HAL_ADC_IRQHandler+0xd6>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d046      	beq.n	8003224 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d12b      	bne.n	8003214 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d127      	bne.n	8003214 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d119      	bne.n	8003214 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0220 	bic.w	r2, r2, #32
 80031ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0201 	orr.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8e8 	bl	80033ea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0212 	mvn.w	r2, #18
 8003222:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d057      	beq.n	8003306 <HAL_ADC_IRQHandler+0x1b8>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d054      	beq.n	8003306 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d139      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800329a:	2b00      	cmp	r3, #0
 800329c:	d12b      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d124      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11d      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fac4 	bl	8003884 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 020c 	mvn.w	r2, #12
 8003304:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_ADC_IRQHandler+0x21a>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10d      	bne.n	8003368 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f850 	bl	80033fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0201 	mvn.w	r2, #1
 8003366:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b20      	cmp	r3, #32
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d015      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x27a>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0220 	mvn.w	r2, #32
 80033b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f82a 	bl	8003412 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0220 	mvn.w	r2, #32
 80033c6:	601a      	str	r2, [r3, #0]
  }
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x1c>
 8003440:	2302      	movs	r3, #2
 8003442:	e113      	b.n	800366c <HAL_ADC_ConfigChannel+0x244>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b09      	cmp	r3, #9
 8003452:	d925      	bls.n	80034a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68d9      	ldr	r1, [r3, #12]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	3b1e      	subs	r3, #30
 800346a:	2207      	movs	r2, #7
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43da      	mvns	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	400a      	ands	r2, r1
 8003478:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68d9      	ldr	r1, [r3, #12]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	4603      	mov	r3, r0
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4403      	add	r3, r0
 8003492:	3b1e      	subs	r3, #30
 8003494:	409a      	lsls	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	e022      	b.n	80034e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	2207      	movs	r2, #7
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	400a      	ands	r2, r1
 80034c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4403      	add	r3, r0
 80034dc:	409a      	lsls	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d824      	bhi.n	8003538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	3b05      	subs	r3, #5
 8003500:	221f      	movs	r2, #31
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	3b05      	subs	r3, #5
 800352a:	fa00 f203 	lsl.w	r2, r0, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	635a      	str	r2, [r3, #52]	; 0x34
 8003536:	e04c      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d824      	bhi.n	800358a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b23      	subs	r3, #35	; 0x23
 8003552:	221f      	movs	r2, #31
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43da      	mvns	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	400a      	ands	r2, r1
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	4618      	mov	r0, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	3b23      	subs	r3, #35	; 0x23
 800357c:	fa00 f203 	lsl.w	r2, r0, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
 8003588:	e023      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	3b41      	subs	r3, #65	; 0x41
 800359c:	221f      	movs	r2, #31
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	400a      	ands	r2, r1
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4618      	mov	r0, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	3b41      	subs	r3, #65	; 0x41
 80035c6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <HAL_ADC_ConfigChannel+0x250>)
 80035d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_ADC_ConfigChannel+0x254>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d10f      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1d8>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d10b      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_ADC_ConfigChannel+0x254>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d12b      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x23a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_ADC_ConfigChannel+0x258>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <HAL_ADC_ConfigChannel+0x1f4>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b11      	cmp	r3, #17
 800361a:	d122      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a11      	ldr	r2, [pc, #68]	; (8003680 <HAL_ADC_ConfigChannel+0x258>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d111      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_ADC_ConfigChannel+0x25c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <HAL_ADC_ConfigChannel+0x260>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	0c9a      	lsrs	r2, r3, #18
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003654:	e002      	b.n	800365c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40012300 	.word	0x40012300
 800367c:	40012000 	.word	0x40012000
 8003680:	10000012 	.word	0x10000012
 8003684:	20000010 	.word	0x20000010
 8003688:	431bde83 	.word	0x431bde83

0800368c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003694:	4b79      	ldr	r3, [pc, #484]	; (800387c <ADC_Init+0x1f0>)
 8003696:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	021a      	lsls	r2, r3, #8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	4a58      	ldr	r2, [pc, #352]	; (8003880 <ADC_Init+0x1f4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e00f      	b.n	800378a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003788:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0202 	bic.w	r2, r2, #2
 8003798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	005a      	lsls	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	3b01      	subs	r3, #1
 80037e4:	035a      	lsls	r2, r3, #13
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e007      	b.n	8003800 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	3b01      	subs	r3, #1
 800381c:	051a      	lsls	r2, r3, #20
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003842:	025a      	lsls	r2, r3, #9
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	029a      	lsls	r2, r3, #10
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012300 	.word	0x40012300
 8003880:	0f000001 	.word	0x0f000001

08003884 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff3e 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff8e 	bl	800398c <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5d 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff31 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa2 	bl	80039f4 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff f9e2 	bl	8002e90 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e099      	b.n	8003c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af8:	e00f      	b.n	8003b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afa:	f7ff f9c9 	bl	8002e90 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d908      	bls.n	8003b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e078      	b.n	8003c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e8      	bne.n	8003afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <HAL_DMA_Init+0x158>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d117      	bne.n	8003bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa91 	bl	80040e8 <DMA_CheckFifoParam>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e016      	b.n	8003c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fa48 	bl	800407c <DMA_CalcBaseAndBitshift>
 8003bec:	4603      	mov	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	223f      	movs	r2, #63	; 0x3f
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f010803f 	.word	0xf010803f

08003c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Start_IT+0x26>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e040      	b.n	8003cc0 <HAL_DMA_Start_IT+0xa8>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12f      	bne.n	8003cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9da 	bl	8004020 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	223f      	movs	r2, #63	; 0x3f
 8003c72:	409a      	lsls	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0216 	orr.w	r2, r2, #22
 8003c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e005      	b.n	8003cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00c      	b.n	8003d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d18:	4b92      	ldr	r3, [pc, #584]	; (8003f64 <HAL_DMA_IRQHandler+0x258>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a92      	ldr	r2, [pc, #584]	; (8003f68 <HAL_DMA_IRQHandler+0x25c>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d36:	2208      	movs	r2, #8
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2208      	movs	r2, #8
 8003d66:	409a      	lsls	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	2204      	movs	r2, #4
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2210      	movs	r2, #16
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d043      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2210      	movs	r2, #16
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d024      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	e01f      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
 8003e4c:	e016      	b.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0208 	bic.w	r2, r2, #8
 8003e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2220      	movs	r2, #32
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808e 	beq.w	8003faa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d136      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0216 	bic.w	r2, r2, #22
 8003ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x1da>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	223f      	movs	r2, #63	; 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07d      	beq.n	8004016 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
        }
        return;
 8003f22:	e078      	b.n	8004016 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01c      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d030      	beq.n	8003faa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e02b      	b.n	8003faa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d027      	beq.n	8003faa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
 8003f62:	e022      	b.n	8003faa <HAL_DMA_IRQHandler+0x29e>
 8003f64:	20000010 	.word	0x20000010
 8003f68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0210 	bic.w	r2, r2, #16
 8003f88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d032      	beq.n	8004018 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d022      	beq.n	8004004 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d307      	bcc.n	8003ff2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f2      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0x2ca>
 8003ff0:	e000      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ff2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
 8004014:	e000      	b.n	8004018 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004016:	bf00      	nop
    }
  }
}
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800403c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d108      	bne.n	8004060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405e:	e007      	b.n	8004070 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	60da      	str	r2, [r3, #12]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3b10      	subs	r3, #16
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <DMA_CalcBaseAndBitshift+0x64>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d909      	bls.n	80040be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58
 80040bc:	e007      	b.n	80040ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	aaaaaaab 	.word	0xaaaaaaab
 80040e4:	080097cc 	.word	0x080097cc

080040e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11f      	bne.n	8004142 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d855      	bhi.n	80041b4 <DMA_CheckFifoParam+0xcc>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <DMA_CheckFifoParam+0x28>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004121 	.word	0x08004121
 8004114:	08004133 	.word	0x08004133
 8004118:	08004121 	.word	0x08004121
 800411c:	080041b5 	.word	0x080041b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d045      	beq.n	80041b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004130:	e042      	b.n	80041b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413a:	d13f      	bne.n	80041bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004140:	e03c      	b.n	80041bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d121      	bne.n	8004190 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d836      	bhi.n	80041c0 <DMA_CheckFifoParam+0xd8>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <DMA_CheckFifoParam+0x70>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004169 	.word	0x08004169
 800415c:	0800416f 	.word	0x0800416f
 8004160:	08004169 	.word	0x08004169
 8004164:	08004181 	.word	0x08004181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e02f      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d024      	beq.n	80041c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417e:	e021      	b.n	80041c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004188:	d11e      	bne.n	80041c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800418e:	e01b      	b.n	80041c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d902      	bls.n	800419c <DMA_CheckFifoParam+0xb4>
 8004196:	2b03      	cmp	r3, #3
 8004198:	d003      	beq.n	80041a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800419a:	e018      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e015      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      break;
 80041b2:	e00b      	b.n	80041cc <DMA_CheckFifoParam+0xe4>
      break;
 80041b4:	bf00      	nop
 80041b6:	e00a      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041b8:	bf00      	nop
 80041ba:	e008      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041bc:	bf00      	nop
 80041be:	e006      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041c0:	bf00      	nop
 80041c2:	e004      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041c4:	bf00      	nop
 80041c6:	e002      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;   
 80041c8:	bf00      	nop
 80041ca:	e000      	b.n	80041ce <DMA_CheckFifoParam+0xe6>
      break;
 80041cc:	bf00      	nop
    }
  } 
  
  return status; 
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e159      	b.n	80044ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f8:	2201      	movs	r2, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	f040 8148 	bne.w	80044a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d00b      	beq.n	8004236 <HAL_GPIO_Init+0x5a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d007      	beq.n	8004236 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800422a:	2b11      	cmp	r3, #17
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b12      	cmp	r3, #18
 8004234:	d130      	bne.n	8004298 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	2203      	movs	r2, #3
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800426c:	2201      	movs	r2, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 0201 	and.w	r2, r3, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0xfc>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b12      	cmp	r3, #18
 80042d6:	d123      	bne.n	8004320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	08da      	lsrs	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3208      	adds	r2, #8
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a2 	beq.w	80044a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4a55      	ldr	r2, [pc, #340]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004370:	6453      	str	r3, [r2, #68]	; 0x44
 8004372:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HAL_GPIO_Init+0x2e4>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437e:	4a51      	ldr	r2, [pc, #324]	; (80044c4 <HAL_GPIO_Init+0x2e8>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a48      	ldr	r2, [pc, #288]	; (80044c8 <HAL_GPIO_Init+0x2ec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_Init+0x202>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a47      	ldr	r2, [pc, #284]	; (80044cc <HAL_GPIO_Init+0x2f0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_Init+0x1fe>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a46      	ldr	r2, [pc, #280]	; (80044d0 <HAL_GPIO_Init+0x2f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_Init+0x1fa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a45      	ldr	r2, [pc, #276]	; (80044d4 <HAL_GPIO_Init+0x2f8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x1f6>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a44      	ldr	r2, [pc, #272]	; (80044d8 <HAL_GPIO_Init+0x2fc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_Init+0x1f2>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e008      	b.n	80043e0 <HAL_GPIO_Init+0x204>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e006      	b.n	80043e0 <HAL_GPIO_Init+0x204>
 80043d2:	2303      	movs	r3, #3
 80043d4:	e004      	b.n	80043e0 <HAL_GPIO_Init+0x204>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e002      	b.n	80043e0 <HAL_GPIO_Init+0x204>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_GPIO_Init+0x204>
 80043de:	2300      	movs	r3, #0
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	f002 0203 	and.w	r2, r2, #3
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	4093      	lsls	r3, r2
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f0:	4934      	ldr	r1, [pc, #208]	; (80044c4 <HAL_GPIO_Init+0x2e8>)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	3302      	adds	r3, #2
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043fe:	4b37      	ldr	r3, [pc, #220]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004422:	4a2e      	ldr	r2, [pc, #184]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_GPIO_Init+0x300>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_GPIO_Init+0x300>)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004476:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_GPIO_Init+0x300>)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800447c:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_GPIO_Init+0x300>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044a0:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_GPIO_Init+0x300>)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	f67f aea2 	bls.w	80041f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3724      	adds	r7, #36	; 0x24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40013c00 	.word	0x40013c00

080044e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e001      	b.n	8004502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004502:	7bfb      	ldrb	r3, [r7, #15]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
 800451c:	4613      	mov	r3, r2
 800451e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004520:	787b      	ldrb	r3, [r7, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800452c:	e003      	b.n	8004536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	041a      	lsls	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	619a      	str	r2, [r3, #24]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e25b      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004562:	4ba3      	ldr	r3, [pc, #652]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4ba0      	ldr	r3, [pc, #640]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b9d      	ldr	r3, [pc, #628]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b99      	ldr	r3, [pc, #612]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e236      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b91      	ldr	r3, [pc, #580]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a90      	ldr	r2, [pc, #576]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b8b      	ldr	r3, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a8a      	ldr	r2, [pc, #552]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b88      	ldr	r3, [pc, #544]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a87      	ldr	r2, [pc, #540]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b84      	ldr	r3, [pc, #528]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a83      	ldr	r2, [pc, #524]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b81      	ldr	r3, [pc, #516]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a80      	ldr	r2, [pc, #512]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fe fc48 	bl	8002e90 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004604:	f7fe fc44 	bl	8002e90 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e1fb      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b76      	ldr	r3, [pc, #472]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe fc34 	bl	8002e90 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fe fc30 	bl	8002e90 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1e7      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800465a:	4b65      	ldr	r3, [pc, #404]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b62      	ldr	r3, [pc, #392]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b5f      	ldr	r3, [pc, #380]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b5c      	ldr	r3, [pc, #368]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1bb      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b56      	ldr	r3, [pc, #344]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4952      	ldr	r1, [pc, #328]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <HAL_RCC_OscConfig+0x2b0>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fe fbe9 	bl	8002e90 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fe fbe5 	bl	8002e90 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e19c      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4940      	ldr	r1, [pc, #256]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_OscConfig+0x2b0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fbc8 	bl	8002e90 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004704:	f7fe fbc4 	bl	8002e90 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e17b      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d030      	beq.n	8004790 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <HAL_RCC_OscConfig+0x2b4>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe fba8 	bl	8002e90 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004744:	f7fe fba4 	bl	8002e90 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e15b      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e015      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <HAL_RCC_OscConfig+0x2b4>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fe fb91 	bl	8002e90 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004772:	f7fe fb8d 	bl	8002e90 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e144      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a0 	beq.w	80048de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x2b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d121      	bne.n	800481e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <HAL_RCC_OscConfig+0x2b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a07      	ldr	r2, [pc, #28]	; (80047fc <HAL_RCC_OscConfig+0x2b8>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e6:	f7fe fb53 	bl	8002e90 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e011      	b.n	8004812 <HAL_RCC_OscConfig+0x2ce>
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	42470000 	.word	0x42470000
 80047f8:	42470e80 	.word	0x42470e80
 80047fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004800:	f7fe fb46 	bl	8002e90 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0fd      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b81      	ldr	r3, [pc, #516]	; (8004a18 <HAL_RCC_OscConfig+0x4d4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d106      	bne.n	8004834 <HAL_RCC_OscConfig+0x2f0>
 8004826:	4b7d      	ldr	r3, [pc, #500]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a7c      	ldr	r2, [pc, #496]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
 8004832:	e01c      	b.n	800486e <HAL_RCC_OscConfig+0x32a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d10c      	bne.n	8004856 <HAL_RCC_OscConfig+0x312>
 800483c:	4b77      	ldr	r3, [pc, #476]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a76      	ldr	r2, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004842:	f043 0304 	orr.w	r3, r3, #4
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	4b74      	ldr	r3, [pc, #464]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a73      	ldr	r2, [pc, #460]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
 8004854:	e00b      	b.n	800486e <HAL_RCC_OscConfig+0x32a>
 8004856:	4b71      	ldr	r3, [pc, #452]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a70      	ldr	r2, [pc, #448]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b6e      	ldr	r3, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a6d      	ldr	r2, [pc, #436]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d015      	beq.n	80048a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fe fb0b 	bl	8002e90 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fe fb07 	bl	8002e90 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0bc      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ee      	beq.n	800487e <HAL_RCC_OscConfig+0x33a>
 80048a0:	e014      	b.n	80048cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a2:	f7fe faf5 	bl	8002e90 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fe faf1 	bl	8002e90 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0a6      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c0:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ee      	bne.n	80048aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8092 	beq.w	8004a0c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e8:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d05c      	beq.n	80049ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d141      	bne.n	8004980 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fc:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_RCC_OscConfig+0x4dc>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fe fac5 	bl	8002e90 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490a:	f7fe fac1 	bl	8002e90 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e078      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491c:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	4933      	ldr	r1, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4dc>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fe fa9a 	bl	8002e90 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fe fa96 	bl	8002e90 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04d      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x41c>
 800497e:	e045      	b.n	8004a0c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCC_OscConfig+0x4dc>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004986:	f7fe fa83 	bl	8002e90 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498e:	f7fe fa7f 	bl	8002e90 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e036      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x44a>
 80049ac:	e02e      	b.n	8004a0c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e029      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ba:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <HAL_RCC_OscConfig+0x4d8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d115      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e2:	4013      	ands	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	42470060 	.word	0x42470060

08004a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0cc      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90c      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b65      	ldr	r3, [pc, #404]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b63      	ldr	r3, [pc, #396]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0b8      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a78:	4b59      	ldr	r3, [pc, #356]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a58      	ldr	r2, [pc, #352]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a90:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a52      	ldr	r2, [pc, #328]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b50      	ldr	r3, [pc, #320]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	494d      	ldr	r1, [pc, #308]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d044      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d119      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e07f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae2:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af2:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e067      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b02:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 0203 	bic.w	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4934      	ldr	r1, [pc, #208]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b14:	f7fe f9bc 	bl	8002e90 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fe f9b8 	bl	8002e90 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e04f      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 020c 	and.w	r2, r3, #12
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d1eb      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b44:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d20c      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e032      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4916      	ldr	r1, [pc, #88]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	490e      	ldr	r1, [pc, #56]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004baa:	f000 f821 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004bae:	4601      	mov	r1, r0
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe f91c 	bl	8002e08 <HAL_InitTick>

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023c00 	.word	0x40023c00
 8004be0:	40023800 	.word	0x40023800
 8004be4:	080097b4 	.word	0x080097b4
 8004be8:	20000010 	.word	0x20000010
 8004bec:	20000014 	.word	0x20000014

08004bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d007      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x32>
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d008      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x38>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 80b4 	bne.w	8004d84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b5e      	ldr	r3, [pc, #376]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c1e:	60bb      	str	r3, [r7, #8]
       break;
 8004c20:	e0b3      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c22:	4b5e      	ldr	r3, [pc, #376]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004c24:	60bb      	str	r3, [r7, #8]
      break;
 8004c26:	e0b0      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c28:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04a      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3e:	4b55      	ldr	r3, [pc, #340]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	f04f 0400 	mov.w	r4, #0
 8004c48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	ea03 0501 	and.w	r5, r3, r1
 8004c54:	ea04 0602 	and.w	r6, r4, r2
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	0154      	lsls	r4, r2, #5
 8004c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6a:	014b      	lsls	r3, r1, #5
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4622      	mov	r2, r4
 8004c70:	1b49      	subs	r1, r1, r5
 8004c72:	eb62 0206 	sbc.w	r2, r2, r6
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	f04f 0400 	mov.w	r4, #0
 8004c7e:	0194      	lsls	r4, r2, #6
 8004c80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c84:	018b      	lsls	r3, r1, #6
 8004c86:	1a5b      	subs	r3, r3, r1
 8004c88:	eb64 0402 	sbc.w	r4, r4, r2
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	00e2      	lsls	r2, r4, #3
 8004c96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9a:	00d9      	lsls	r1, r3, #3
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	195b      	adds	r3, r3, r5
 8004ca2:	eb44 0406 	adc.w	r4, r4, r6
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	0262      	lsls	r2, r4, #9
 8004cb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cb4:	0259      	lsls	r1, r3, #9
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	f7fc f8a4 	bl	8000e14 <__aeabi_uldivmod>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e049      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	f04f 0400 	mov.w	r4, #0
 8004cde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	ea03 0501 	and.w	r5, r3, r1
 8004cea:	ea04 0602 	and.w	r6, r4, r2
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4632      	mov	r2, r6
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	f04f 0400 	mov.w	r4, #0
 8004cfa:	0154      	lsls	r4, r2, #5
 8004cfc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d00:	014b      	lsls	r3, r1, #5
 8004d02:	4619      	mov	r1, r3
 8004d04:	4622      	mov	r2, r4
 8004d06:	1b49      	subs	r1, r1, r5
 8004d08:	eb62 0206 	sbc.w	r2, r2, r6
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	f04f 0400 	mov.w	r4, #0
 8004d14:	0194      	lsls	r4, r2, #6
 8004d16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1a:	018b      	lsls	r3, r1, #6
 8004d1c:	1a5b      	subs	r3, r3, r1
 8004d1e:	eb64 0402 	sbc.w	r4, r4, r2
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	00e2      	lsls	r2, r4, #3
 8004d2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d30:	00d9      	lsls	r1, r3, #3
 8004d32:	460b      	mov	r3, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	195b      	adds	r3, r3, r5
 8004d38:	eb44 0406 	adc.w	r4, r4, r6
 8004d3c:	f04f 0100 	mov.w	r1, #0
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	02a2      	lsls	r2, r4, #10
 8004d46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4a:	0299      	lsls	r1, r3, #10
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4614      	mov	r4, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	4621      	mov	r1, r4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	f7fc f859 	bl	8000e14 <__aeabi_uldivmod>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	60bb      	str	r3, [r7, #8]
      break;
 8004d82:	e002      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d86:	60bb      	str	r3, [r7, #8]
      break;
 8004d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200

08004da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da4:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000010 	.word	0x20000010

08004db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dbc:	f7ff fff0 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0a9b      	lsrs	r3, r3, #10
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4a03      	ldr	r2, [pc, #12]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dce:	5cd3      	ldrb	r3, [r2, r3]
 8004dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	080097c4 	.word	0x080097c4

08004de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de4:	f7ff ffdc 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 8004de8:	4601      	mov	r1, r0
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0b5b      	lsrs	r3, r3, #13
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4a03      	ldr	r2, [pc, #12]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df6:	5cd3      	ldrb	r3, [r2, r3]
 8004df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40023800 	.word	0x40023800
 8004e04:	080097c4 	.word	0x080097c4

08004e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e01d      	b.n	8004e56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fd fdf4 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fa1e 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d122      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d11b      	bne.n	8004f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0202 	mvn.w	r2, #2
 8004ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f9af 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004eee:	e005      	b.n	8004efc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9a1 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9b2 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d122      	bne.n	8004f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d11b      	bne.n	8004f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f06f 0204 	mvn.w	r2, #4
 8004f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f985 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004f42:	e005      	b.n	8004f50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f977 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f988 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d122      	bne.n	8004faa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d11b      	bne.n	8004faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0208 	mvn.w	r2, #8
 8004f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f95b 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004f96:	e005      	b.n	8004fa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f94d 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f95e 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d122      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d11b      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0210 	mvn.w	r2, #16
 8004fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f931 	bl	800524c <HAL_TIM_IC_CaptureCallback>
 8004fea:	e005      	b.n	8004ff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f923 	bl	8005238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f934 	bl	8005260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0201 	mvn.w	r2, #1
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8fd 	bl	8005224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 faab 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8f9 	bl	8005274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b20      	cmp	r3, #32
 800508e:	d10e      	bne.n	80050ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d107      	bne.n	80050ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0220 	mvn.w	r2, #32
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa75 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_ConfigClockSource+0x18>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0a6      	b.n	800521c <HAL_TIM_ConfigClockSource+0x166>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d067      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x120>
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d80b      	bhi.n	8005122 <HAL_TIM_ConfigClockSource+0x6c>
 800510a:	2b10      	cmp	r3, #16
 800510c:	d073      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x140>
 800510e:	2b10      	cmp	r3, #16
 8005110:	d802      	bhi.n	8005118 <HAL_TIM_ConfigClockSource+0x62>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06f      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005116:	e078      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005118:	2b20      	cmp	r3, #32
 800511a:	d06c      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x140>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d06a      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005120:	e073      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005122:	2b70      	cmp	r3, #112	; 0x70
 8005124:	d00d      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x8c>
 8005126:	2b70      	cmp	r3, #112	; 0x70
 8005128:	d804      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x7e>
 800512a:	2b50      	cmp	r3, #80	; 0x50
 800512c:	d033      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xe0>
 800512e:	2b60      	cmp	r3, #96	; 0x60
 8005130:	d041      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005132:	e06a      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d066      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0x152>
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	d017      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005140:	e063      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f000 f993 	bl	800547c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	609a      	str	r2, [r3, #8]
      break;
 800516e:	e04c      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f000 f97c 	bl	800547c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005192:	609a      	str	r2, [r3, #8]
      break;
 8005194:	e039      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f000 f8f0 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2150      	movs	r1, #80	; 0x50
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f949 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051b4:	e029      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f000 f90f 	bl	80053e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2160      	movs	r1, #96	; 0x60
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f939 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051d4:	e019      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 f8d0 	bl	8005388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f929 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051f4:	e009      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f000 f920 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8005206:	e000      	b.n	800520a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005208:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a34      	ldr	r2, [pc, #208]	; (800536c <TIM_Base_SetConfig+0xe4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x38>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x38>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a31      	ldr	r2, [pc, #196]	; (8005370 <TIM_Base_SetConfig+0xe8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x38>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a30      	ldr	r2, [pc, #192]	; (8005374 <TIM_Base_SetConfig+0xec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x38>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <TIM_Base_SetConfig+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a25      	ldr	r2, [pc, #148]	; (800536c <TIM_Base_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a22      	ldr	r2, [pc, #136]	; (8005370 <TIM_Base_SetConfig+0xe8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a21      	ldr	r2, [pc, #132]	; (8005374 <TIM_Base_SetConfig+0xec>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a20      	ldr	r2, [pc, #128]	; (8005378 <TIM_Base_SetConfig+0xf0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1f      	ldr	r2, [pc, #124]	; (800537c <TIM_Base_SetConfig+0xf4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <TIM_Base_SetConfig+0xf8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x8a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <TIM_Base_SetConfig+0xfc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <TIM_Base_SetConfig+0xe4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d103      	bne.n	8005358 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	615a      	str	r2, [r3, #20]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	f043 0307 	orr.w	r3, r3, #7
 8005468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e050      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005520:	d013      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a18      	ldr	r2, [pc, #96]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a16      	ldr	r2, [pc, #88]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10c      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40014000 	.word	0x40014000

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e03f      	b.n	8005652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fd fa5e 	bl	8002aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fc77 	bl	8005ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b088      	sub	sp, #32
 800565e:	af02      	add	r7, sp, #8
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	f040 8083 	bne.w	8005782 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_UART_Transmit+0x2e>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e07b      	b.n	8005784 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x40>
 8005696:	2302      	movs	r3, #2
 8005698:	e074      	b.n	8005784 <HAL_UART_Transmit+0x12a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2221      	movs	r2, #33	; 0x21
 80056ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80056b0:	f7fd fbee 	bl	8002e90 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056ca:	e042      	b.n	8005752 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d122      	bne.n	800572a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa80 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e042      	b.n	8005784 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005710:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3302      	adds	r3, #2
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	e017      	b.n	8005752 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3301      	adds	r3, #1
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	e013      	b.n	8005752 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fa5d 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e01f      	b.n	8005784 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	60ba      	str	r2, [r7, #8]
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1b7      	bne.n	80056cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2200      	movs	r2, #0
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa44 	bl	8005bf4 <UART_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e006      	b.n	8005784 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d166      	bne.n	8005874 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Receive_DMA+0x26>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e05f      	b.n	8005876 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Receive_DMA+0x38>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e058      	b.n	8005876 <HAL_UART_Receive_DMA+0xea>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2222      	movs	r2, #34	; 0x22
 80057e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4a25      	ldr	r2, [pc, #148]	; (8005880 <HAL_UART_Receive_DMA+0xf4>)
 80057ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_UART_Receive_DMA+0xf8>)
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	4a23      	ldr	r2, [pc, #140]	; (8005888 <HAL_UART_Receive_DMA+0xfc>)
 80057fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	2200      	movs	r2, #0
 8005804:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3304      	adds	r3, #4
 8005816:	4619      	mov	r1, r3
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	f7fe f9fb 	bl	8003c18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	08005add 	.word	0x08005add
 8005884:	08005b45 	.word	0x08005b45
 8005888:	08005b61 	.word	0x08005b61

0800588c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_UART_IRQHandler+0x52>
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa8c 	bl	8005df4 <UART_Receive_IT>
      return;
 80058dc:	e0d1      	b.n	8005a82 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80b0 	beq.w	8005a46 <HAL_UART_IRQHandler+0x1ba>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_UART_IRQHandler+0x70>
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a5 	beq.w	8005a46 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_UART_IRQHandler+0x90>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005914:	f043 0201 	orr.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_UART_IRQHandler+0xb0>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	f043 0202 	orr.w	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_UART_IRQHandler+0xd0>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00f      	beq.n	8005986 <HAL_UART_IRQHandler+0xfa>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_UART_IRQHandler+0xee>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	f043 0208 	orr.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d078      	beq.n	8005a80 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_UART_IRQHandler+0x11c>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa26 	bl	8005df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <HAL_UART_IRQHandler+0x144>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d031      	beq.n	8005a34 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f96f 	bl	8005cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d123      	bne.n	8005a2c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d013      	beq.n	8005a24 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <HAL_UART_IRQHandler+0x1fc>)
 8005a02:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe f95d 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d016      	beq.n	8005a42 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a22:	e00e      	b.n	8005a42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f84f 	bl	8005ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2a:	e00a      	b.n	8005a42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f84b 	bl	8005ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a32:	e006      	b.n	8005a42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f847 	bl	8005ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a40:	e01e      	b.n	8005a80 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	bf00      	nop
    return;
 8005a44:	e01c      	b.n	8005a80 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_UART_IRQHandler+0x1d6>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f95c 	bl	8005d18 <UART_Transmit_IT>
    return;
 8005a60:	e00f      	b.n	8005a82 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1f6>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9a4 	bl	8005dc4 <UART_EndTransmit_IT>
    return;
 8005a7c:	bf00      	nop
 8005a7e:	e000      	b.n	8005a82 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a80:	bf00      	nop
  }
}
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	08005cf1 	.word	0x08005cf1

08005a8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11e      	bne.n	8005b36 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b0c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f7ff ffb2 	bl	8005aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff ffae 	bl	8005ab4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	bf0c      	ite	eq
 8005b80:	2301      	moveq	r3, #1
 8005b82:	2300      	movne	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b21      	cmp	r3, #33	; 0x21
 8005b92:	d108      	bne.n	8005ba6 <UART_DMAError+0x46>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ba0:	68b8      	ldr	r0, [r7, #8]
 8005ba2:	f000 f871 	bl	8005c88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b22      	cmp	r3, #34	; 0x22
 8005bc6:	d108      	bne.n	8005bda <UART_DMAError+0x7a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f000 f86d 	bl	8005cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be6:	68b8      	ldr	r0, [r7, #8]
 8005be8:	f7ff ff6e 	bl	8005ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	4613      	mov	r3, r2
 8005c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c04:	e02c      	b.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c0c:	d028      	beq.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c14:	f7fd f93c 	bl	8002e90 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d21d      	bcs.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e00f      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d0c3      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c9e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff fedc 	bl	8005ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b21      	cmp	r3, #33	; 0x21
 8005d2a:	d144      	bne.n	8005db6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d11a      	bne.n	8005d6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	1c9a      	adds	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]
 8005d5e:	e00e      	b.n	8005d7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]
 8005d6a:	e008      	b.n	8005d7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6211      	str	r1, [r2, #32]
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fe51 	bl	8005a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	d171      	bne.n	8005eec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d123      	bne.n	8005e5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10e      	bne.n	8005e3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e3c:	e029      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
 8005e58:	e01b      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6858      	ldr	r0, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6291      	str	r1, [r2, #40]	; 0x28
 8005e72:	b2c2      	uxtb	r2, r0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e00c      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	1c58      	adds	r0, r3, #1
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	6288      	str	r0, [r1, #40]	; 0x28
 8005e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d120      	bne.n	8005ee8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0220 	bic.w	r2, r2, #32
 8005eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fdde 	bl	8005aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e002      	b.n	8005eee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f3a:	f023 030c 	bic.w	r3, r3, #12
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	430b      	orrs	r3, r1
 8005f46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f66:	f040 818b 	bne.w	8006280 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4ac1      	ldr	r2, [pc, #772]	; (8006274 <UART_SetConfig+0x37c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d005      	beq.n	8005f80 <UART_SetConfig+0x88>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4abf      	ldr	r2, [pc, #764]	; (8006278 <UART_SetConfig+0x380>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	f040 80bd 	bne.w	80060fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f80:	f7fe ff2e 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 8005f84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f04f 0600 	mov.w	r6, #0
 8005f8e:	46a8      	mov	r8, r5
 8005f90:	46b1      	mov	r9, r6
 8005f92:	eb18 0308 	adds.w	r3, r8, r8
 8005f96:	eb49 0409 	adc.w	r4, r9, r9
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	46a1      	mov	r9, r4
 8005f9e:	eb18 0805 	adds.w	r8, r8, r5
 8005fa2:	eb49 0906 	adc.w	r9, r9, r6
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fba:	4688      	mov	r8, r1
 8005fbc:	4691      	mov	r9, r2
 8005fbe:	eb18 0005 	adds.w	r0, r8, r5
 8005fc2:	eb49 0106 	adc.w	r1, r9, r6
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	461d      	mov	r5, r3
 8005fcc:	f04f 0600 	mov.w	r6, #0
 8005fd0:	196b      	adds	r3, r5, r5
 8005fd2:	eb46 0406 	adc.w	r4, r6, r6
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	f7fa ff1b 	bl	8000e14 <__aeabi_uldivmod>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4ba5      	ldr	r3, [pc, #660]	; (800627c <UART_SetConfig+0x384>)
 8005fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	f04f 0600 	mov.w	r6, #0
 8005ff8:	46a9      	mov	r9, r5
 8005ffa:	46b2      	mov	sl, r6
 8005ffc:	eb19 0309 	adds.w	r3, r9, r9
 8006000:	eb4a 040a 	adc.w	r4, sl, sl
 8006004:	4699      	mov	r9, r3
 8006006:	46a2      	mov	sl, r4
 8006008:	eb19 0905 	adds.w	r9, r9, r5
 800600c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006020:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006024:	4689      	mov	r9, r1
 8006026:	4692      	mov	sl, r2
 8006028:	eb19 0005 	adds.w	r0, r9, r5
 800602c:	eb4a 0106 	adc.w	r1, sl, r6
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	461d      	mov	r5, r3
 8006036:	f04f 0600 	mov.w	r6, #0
 800603a:	196b      	adds	r3, r5, r5
 800603c:	eb46 0406 	adc.w	r4, r6, r6
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	f7fa fee6 	bl	8000e14 <__aeabi_uldivmod>
 8006048:	4603      	mov	r3, r0
 800604a:	460c      	mov	r4, r1
 800604c:	461a      	mov	r2, r3
 800604e:	4b8b      	ldr	r3, [pc, #556]	; (800627c <UART_SetConfig+0x384>)
 8006050:	fba3 1302 	umull	r1, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	2164      	movs	r1, #100	; 0x64
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	3332      	adds	r3, #50	; 0x32
 8006062:	4a86      	ldr	r2, [pc, #536]	; (800627c <UART_SetConfig+0x384>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006070:	4498      	add	r8, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	461d      	mov	r5, r3
 8006076:	f04f 0600 	mov.w	r6, #0
 800607a:	46a9      	mov	r9, r5
 800607c:	46b2      	mov	sl, r6
 800607e:	eb19 0309 	adds.w	r3, r9, r9
 8006082:	eb4a 040a 	adc.w	r4, sl, sl
 8006086:	4699      	mov	r9, r3
 8006088:	46a2      	mov	sl, r4
 800608a:	eb19 0905 	adds.w	r9, r9, r5
 800608e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a6:	4689      	mov	r9, r1
 80060a8:	4692      	mov	sl, r2
 80060aa:	eb19 0005 	adds.w	r0, r9, r5
 80060ae:	eb4a 0106 	adc.w	r1, sl, r6
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	461d      	mov	r5, r3
 80060b8:	f04f 0600 	mov.w	r6, #0
 80060bc:	196b      	adds	r3, r5, r5
 80060be:	eb46 0406 	adc.w	r4, r6, r6
 80060c2:	461a      	mov	r2, r3
 80060c4:	4623      	mov	r3, r4
 80060c6:	f7fa fea5 	bl	8000e14 <__aeabi_uldivmod>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	461a      	mov	r2, r3
 80060d0:	4b6a      	ldr	r3, [pc, #424]	; (800627c <UART_SetConfig+0x384>)
 80060d2:	fba3 1302 	umull	r1, r3, r3, r2
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	2164      	movs	r1, #100	; 0x64
 80060da:	fb01 f303 	mul.w	r3, r1, r3
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	3332      	adds	r3, #50	; 0x32
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <UART_SetConfig+0x384>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	f003 0207 	and.w	r2, r3, #7
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4442      	add	r2, r8
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	e26f      	b.n	80065da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fe fe5d 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 80060fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	461d      	mov	r5, r3
 8006104:	f04f 0600 	mov.w	r6, #0
 8006108:	46a8      	mov	r8, r5
 800610a:	46b1      	mov	r9, r6
 800610c:	eb18 0308 	adds.w	r3, r8, r8
 8006110:	eb49 0409 	adc.w	r4, r9, r9
 8006114:	4698      	mov	r8, r3
 8006116:	46a1      	mov	r9, r4
 8006118:	eb18 0805 	adds.w	r8, r8, r5
 800611c:	eb49 0906 	adc.w	r9, r9, r6
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800612c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006130:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006134:	4688      	mov	r8, r1
 8006136:	4691      	mov	r9, r2
 8006138:	eb18 0005 	adds.w	r0, r8, r5
 800613c:	eb49 0106 	adc.w	r1, r9, r6
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	461d      	mov	r5, r3
 8006146:	f04f 0600 	mov.w	r6, #0
 800614a:	196b      	adds	r3, r5, r5
 800614c:	eb46 0406 	adc.w	r4, r6, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4623      	mov	r3, r4
 8006154:	f7fa fe5e 	bl	8000e14 <__aeabi_uldivmod>
 8006158:	4603      	mov	r3, r0
 800615a:	460c      	mov	r4, r1
 800615c:	461a      	mov	r2, r3
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <UART_SetConfig+0x384>)
 8006160:	fba3 2302 	umull	r2, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	461d      	mov	r5, r3
 800616e:	f04f 0600 	mov.w	r6, #0
 8006172:	46a9      	mov	r9, r5
 8006174:	46b2      	mov	sl, r6
 8006176:	eb19 0309 	adds.w	r3, r9, r9
 800617a:	eb4a 040a 	adc.w	r4, sl, sl
 800617e:	4699      	mov	r9, r3
 8006180:	46a2      	mov	sl, r4
 8006182:	eb19 0905 	adds.w	r9, r9, r5
 8006186:	eb4a 0a06 	adc.w	sl, sl, r6
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800619a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619e:	4689      	mov	r9, r1
 80061a0:	4692      	mov	sl, r2
 80061a2:	eb19 0005 	adds.w	r0, r9, r5
 80061a6:	eb4a 0106 	adc.w	r1, sl, r6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	461d      	mov	r5, r3
 80061b0:	f04f 0600 	mov.w	r6, #0
 80061b4:	196b      	adds	r3, r5, r5
 80061b6:	eb46 0406 	adc.w	r4, r6, r6
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	f7fa fe29 	bl	8000e14 <__aeabi_uldivmod>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b2c      	ldr	r3, [pc, #176]	; (800627c <UART_SetConfig+0x384>)
 80061ca:	fba3 1302 	umull	r1, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2164      	movs	r1, #100	; 0x64
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a27      	ldr	r2, [pc, #156]	; (800627c <UART_SetConfig+0x384>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ea:	4498      	add	r8, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	461d      	mov	r5, r3
 80061f0:	f04f 0600 	mov.w	r6, #0
 80061f4:	46a9      	mov	r9, r5
 80061f6:	46b2      	mov	sl, r6
 80061f8:	eb19 0309 	adds.w	r3, r9, r9
 80061fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006200:	4699      	mov	r9, r3
 8006202:	46a2      	mov	sl, r4
 8006204:	eb19 0905 	adds.w	r9, r9, r5
 8006208:	eb4a 0a06 	adc.w	sl, sl, r6
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800621c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006220:	4689      	mov	r9, r1
 8006222:	4692      	mov	sl, r2
 8006224:	eb19 0005 	adds.w	r0, r9, r5
 8006228:	eb4a 0106 	adc.w	r1, sl, r6
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	461d      	mov	r5, r3
 8006232:	f04f 0600 	mov.w	r6, #0
 8006236:	196b      	adds	r3, r5, r5
 8006238:	eb46 0406 	adc.w	r4, r6, r6
 800623c:	461a      	mov	r2, r3
 800623e:	4623      	mov	r3, r4
 8006240:	f7fa fde8 	bl	8000e14 <__aeabi_uldivmod>
 8006244:	4603      	mov	r3, r0
 8006246:	460c      	mov	r4, r1
 8006248:	461a      	mov	r2, r3
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <UART_SetConfig+0x384>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	; 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	3332      	adds	r3, #50	; 0x32
 800625e:	4a07      	ldr	r2, [pc, #28]	; (800627c <UART_SetConfig+0x384>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 0207 	and.w	r2, r3, #7
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4442      	add	r2, r8
 8006270:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006272:	e1b2      	b.n	80065da <UART_SetConfig+0x6e2>
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4ad7      	ldr	r2, [pc, #860]	; (80065e4 <UART_SetConfig+0x6ec>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d005      	beq.n	8006296 <UART_SetConfig+0x39e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4ad6      	ldr	r2, [pc, #856]	; (80065e8 <UART_SetConfig+0x6f0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	f040 80d1 	bne.w	8006438 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006296:	f7fe fda3 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 800629a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	469a      	mov	sl, r3
 80062a0:	f04f 0b00 	mov.w	fp, #0
 80062a4:	46d0      	mov	r8, sl
 80062a6:	46d9      	mov	r9, fp
 80062a8:	eb18 0308 	adds.w	r3, r8, r8
 80062ac:	eb49 0409 	adc.w	r4, r9, r9
 80062b0:	4698      	mov	r8, r3
 80062b2:	46a1      	mov	r9, r4
 80062b4:	eb18 080a 	adds.w	r8, r8, sl
 80062b8:	eb49 090b 	adc.w	r9, r9, fp
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062d0:	4688      	mov	r8, r1
 80062d2:	4691      	mov	r9, r2
 80062d4:	eb1a 0508 	adds.w	r5, sl, r8
 80062d8:	eb4b 0609 	adc.w	r6, fp, r9
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	0094      	lsls	r4, r2, #2
 80062f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f4:	008b      	lsls	r3, r1, #2
 80062f6:	461a      	mov	r2, r3
 80062f8:	4623      	mov	r3, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	4631      	mov	r1, r6
 80062fe:	f7fa fd89 	bl	8000e14 <__aeabi_uldivmod>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461a      	mov	r2, r3
 8006308:	4bb8      	ldr	r3, [pc, #736]	; (80065ec <UART_SetConfig+0x6f4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	469b      	mov	fp, r3
 8006318:	f04f 0c00 	mov.w	ip, #0
 800631c:	46d9      	mov	r9, fp
 800631e:	46e2      	mov	sl, ip
 8006320:	eb19 0309 	adds.w	r3, r9, r9
 8006324:	eb4a 040a 	adc.w	r4, sl, sl
 8006328:	4699      	mov	r9, r3
 800632a:	46a2      	mov	sl, r4
 800632c:	eb19 090b 	adds.w	r9, r9, fp
 8006330:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006348:	4689      	mov	r9, r1
 800634a:	4692      	mov	sl, r2
 800634c:	eb1b 0509 	adds.w	r5, fp, r9
 8006350:	eb4c 060a 	adc.w	r6, ip, sl
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4619      	mov	r1, r3
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	f04f 0400 	mov.w	r4, #0
 8006366:	0094      	lsls	r4, r2, #2
 8006368:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	461a      	mov	r2, r3
 8006370:	4623      	mov	r3, r4
 8006372:	4628      	mov	r0, r5
 8006374:	4631      	mov	r1, r6
 8006376:	f7fa fd4d 	bl	8000e14 <__aeabi_uldivmod>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	461a      	mov	r2, r3
 8006380:	4b9a      	ldr	r3, [pc, #616]	; (80065ec <UART_SetConfig+0x6f4>)
 8006382:	fba3 1302 	umull	r1, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2164      	movs	r1, #100	; 0x64
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a95      	ldr	r2, [pc, #596]	; (80065ec <UART_SetConfig+0x6f4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a0:	4498      	add	r8, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	469b      	mov	fp, r3
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	46d9      	mov	r9, fp
 80063ac:	46e2      	mov	sl, ip
 80063ae:	eb19 0309 	adds.w	r3, r9, r9
 80063b2:	eb4a 040a 	adc.w	r4, sl, sl
 80063b6:	4699      	mov	r9, r3
 80063b8:	46a2      	mov	sl, r4
 80063ba:	eb19 090b 	adds.w	r9, r9, fp
 80063be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063d6:	4689      	mov	r9, r1
 80063d8:	4692      	mov	sl, r2
 80063da:	eb1b 0509 	adds.w	r5, fp, r9
 80063de:	eb4c 060a 	adc.w	r6, ip, sl
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4619      	mov	r1, r3
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	0094      	lsls	r4, r2, #2
 80063f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063fa:	008b      	lsls	r3, r1, #2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	4628      	mov	r0, r5
 8006402:	4631      	mov	r1, r6
 8006404:	f7fa fd06 	bl	8000e14 <__aeabi_uldivmod>
 8006408:	4603      	mov	r3, r0
 800640a:	460c      	mov	r4, r1
 800640c:	461a      	mov	r2, r3
 800640e:	4b77      	ldr	r3, [pc, #476]	; (80065ec <UART_SetConfig+0x6f4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a72      	ldr	r2, [pc, #456]	; (80065ec <UART_SetConfig+0x6f4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4442      	add	r2, r8
 8006434:	609a      	str	r2, [r3, #8]
 8006436:	e0d0      	b.n	80065da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fe fcbe 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 800643c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	469a      	mov	sl, r3
 8006442:	f04f 0b00 	mov.w	fp, #0
 8006446:	46d0      	mov	r8, sl
 8006448:	46d9      	mov	r9, fp
 800644a:	eb18 0308 	adds.w	r3, r8, r8
 800644e:	eb49 0409 	adc.w	r4, r9, r9
 8006452:	4698      	mov	r8, r3
 8006454:	46a1      	mov	r9, r4
 8006456:	eb18 080a 	adds.w	r8, r8, sl
 800645a:	eb49 090b 	adc.w	r9, r9, fp
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800646a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800646e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006472:	4688      	mov	r8, r1
 8006474:	4691      	mov	r9, r2
 8006476:	eb1a 0508 	adds.w	r5, sl, r8
 800647a:	eb4b 0609 	adc.w	r6, fp, r9
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4619      	mov	r1, r3
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	f04f 0400 	mov.w	r4, #0
 8006490:	0094      	lsls	r4, r2, #2
 8006492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006496:	008b      	lsls	r3, r1, #2
 8006498:	461a      	mov	r2, r3
 800649a:	4623      	mov	r3, r4
 800649c:	4628      	mov	r0, r5
 800649e:	4631      	mov	r1, r6
 80064a0:	f7fa fcb8 	bl	8000e14 <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b50      	ldr	r3, [pc, #320]	; (80065ec <UART_SetConfig+0x6f4>)
 80064ac:	fba3 2302 	umull	r2, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	469b      	mov	fp, r3
 80064ba:	f04f 0c00 	mov.w	ip, #0
 80064be:	46d9      	mov	r9, fp
 80064c0:	46e2      	mov	sl, ip
 80064c2:	eb19 0309 	adds.w	r3, r9, r9
 80064c6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ca:	4699      	mov	r9, r3
 80064cc:	46a2      	mov	sl, r4
 80064ce:	eb19 090b 	adds.w	r9, r9, fp
 80064d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ea:	4689      	mov	r9, r1
 80064ec:	4692      	mov	sl, r2
 80064ee:	eb1b 0509 	adds.w	r5, fp, r9
 80064f2:	eb4c 060a 	adc.w	r6, ip, sl
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4619      	mov	r1, r3
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	0094      	lsls	r4, r2, #2
 800650a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800650e:	008b      	lsls	r3, r1, #2
 8006510:	461a      	mov	r2, r3
 8006512:	4623      	mov	r3, r4
 8006514:	4628      	mov	r0, r5
 8006516:	4631      	mov	r1, r6
 8006518:	f7fa fc7c 	bl	8000e14 <__aeabi_uldivmod>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461a      	mov	r2, r3
 8006522:	4b32      	ldr	r3, [pc, #200]	; (80065ec <UART_SetConfig+0x6f4>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <UART_SetConfig+0x6f4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006542:	4498      	add	r8, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	469b      	mov	fp, r3
 8006548:	f04f 0c00 	mov.w	ip, #0
 800654c:	46d9      	mov	r9, fp
 800654e:	46e2      	mov	sl, ip
 8006550:	eb19 0309 	adds.w	r3, r9, r9
 8006554:	eb4a 040a 	adc.w	r4, sl, sl
 8006558:	4699      	mov	r9, r3
 800655a:	46a2      	mov	sl, r4
 800655c:	eb19 090b 	adds.w	r9, r9, fp
 8006560:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006578:	4689      	mov	r9, r1
 800657a:	4692      	mov	sl, r2
 800657c:	eb1b 0509 	adds.w	r5, fp, r9
 8006580:	eb4c 060a 	adc.w	r6, ip, sl
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f04f 0400 	mov.w	r4, #0
 8006596:	0094      	lsls	r4, r2, #2
 8006598:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	461a      	mov	r2, r3
 80065a0:	4623      	mov	r3, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	4631      	mov	r1, r6
 80065a6:	f7fa fc35 	bl	8000e14 <__aeabi_uldivmod>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <UART_SetConfig+0x6f4>)
 80065b2:	fba3 1302 	umull	r1, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2164      	movs	r1, #100	; 0x64
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	4a09      	ldr	r2, [pc, #36]	; (80065ec <UART_SetConfig+0x6f4>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4442      	add	r2, r8
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	e7ff      	b.n	80065da <UART_SetConfig+0x6e2>
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	40011000 	.word	0x40011000
 80065e8:	40011400 	.word	0x40011400
 80065ec:	51eb851f 	.word	0x51eb851f

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2000001c 	.word	0x2000001c

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4e0d      	ldr	r6, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1ba4      	subs	r4, r4, r6
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2500      	movs	r5, #0
 8006608:	42a5      	cmp	r5, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4e0b      	ldr	r6, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f003 f8b4 	bl	800977c <_init>
 8006614:	1ba4      	subs	r4, r4, r6
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2500      	movs	r5, #0
 800661a:	42a5      	cmp	r5, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006624:	4798      	blx	r3
 8006626:	3501      	adds	r5, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800662e:	4798      	blx	r3
 8006630:	3501      	adds	r5, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08009a80 	.word	0x08009a80
 8006638:	08009a80 	.word	0x08009a80
 800663c:	08009a80 	.word	0x08009a80
 8006640:	08009a84 	.word	0x08009a84

08006644 <memset>:
 8006644:	4402      	add	r2, r0
 8006646:	4603      	mov	r3, r0
 8006648:	4293      	cmp	r3, r2
 800664a:	d100      	bne.n	800664e <memset+0xa>
 800664c:	4770      	bx	lr
 800664e:	f803 1b01 	strb.w	r1, [r3], #1
 8006652:	e7f9      	b.n	8006648 <memset+0x4>

08006654 <__cvt>:
 8006654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	ec55 4b10 	vmov	r4, r5, d0
 800665c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800665e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006662:	2d00      	cmp	r5, #0
 8006664:	460e      	mov	r6, r1
 8006666:	4691      	mov	r9, r2
 8006668:	4619      	mov	r1, r3
 800666a:	bfb8      	it	lt
 800666c:	4622      	movlt	r2, r4
 800666e:	462b      	mov	r3, r5
 8006670:	f027 0720 	bic.w	r7, r7, #32
 8006674:	bfbb      	ittet	lt
 8006676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800667a:	461d      	movlt	r5, r3
 800667c:	2300      	movge	r3, #0
 800667e:	232d      	movlt	r3, #45	; 0x2d
 8006680:	bfb8      	it	lt
 8006682:	4614      	movlt	r4, r2
 8006684:	2f46      	cmp	r7, #70	; 0x46
 8006686:	700b      	strb	r3, [r1, #0]
 8006688:	d004      	beq.n	8006694 <__cvt+0x40>
 800668a:	2f45      	cmp	r7, #69	; 0x45
 800668c:	d100      	bne.n	8006690 <__cvt+0x3c>
 800668e:	3601      	adds	r6, #1
 8006690:	2102      	movs	r1, #2
 8006692:	e000      	b.n	8006696 <__cvt+0x42>
 8006694:	2103      	movs	r1, #3
 8006696:	ab03      	add	r3, sp, #12
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	ab02      	add	r3, sp, #8
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4632      	mov	r2, r6
 80066a0:	4653      	mov	r3, sl
 80066a2:	ec45 4b10 	vmov	d0, r4, r5
 80066a6:	f000 fcdf 	bl	8007068 <_dtoa_r>
 80066aa:	2f47      	cmp	r7, #71	; 0x47
 80066ac:	4680      	mov	r8, r0
 80066ae:	d102      	bne.n	80066b6 <__cvt+0x62>
 80066b0:	f019 0f01 	tst.w	r9, #1
 80066b4:	d026      	beq.n	8006704 <__cvt+0xb0>
 80066b6:	2f46      	cmp	r7, #70	; 0x46
 80066b8:	eb08 0906 	add.w	r9, r8, r6
 80066bc:	d111      	bne.n	80066e2 <__cvt+0x8e>
 80066be:	f898 3000 	ldrb.w	r3, [r8]
 80066c2:	2b30      	cmp	r3, #48	; 0x30
 80066c4:	d10a      	bne.n	80066dc <__cvt+0x88>
 80066c6:	2200      	movs	r2, #0
 80066c8:	2300      	movs	r3, #0
 80066ca:	4620      	mov	r0, r4
 80066cc:	4629      	mov	r1, r5
 80066ce:	f7fa fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80066d2:	b918      	cbnz	r0, 80066dc <__cvt+0x88>
 80066d4:	f1c6 0601 	rsb	r6, r6, #1
 80066d8:	f8ca 6000 	str.w	r6, [sl]
 80066dc:	f8da 3000 	ldr.w	r3, [sl]
 80066e0:	4499      	add	r9, r3
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7fa f9f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ee:	b938      	cbnz	r0, 8006700 <__cvt+0xac>
 80066f0:	2230      	movs	r2, #48	; 0x30
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	454b      	cmp	r3, r9
 80066f6:	d205      	bcs.n	8006704 <__cvt+0xb0>
 80066f8:	1c59      	adds	r1, r3, #1
 80066fa:	9103      	str	r1, [sp, #12]
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	e7f8      	b.n	80066f2 <__cvt+0x9e>
 8006700:	f8cd 900c 	str.w	r9, [sp, #12]
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006708:	eba3 0308 	sub.w	r3, r3, r8
 800670c:	4640      	mov	r0, r8
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	b004      	add	sp, #16
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006716 <__exponent>:
 8006716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006718:	2900      	cmp	r1, #0
 800671a:	4604      	mov	r4, r0
 800671c:	bfba      	itte	lt
 800671e:	4249      	neglt	r1, r1
 8006720:	232d      	movlt	r3, #45	; 0x2d
 8006722:	232b      	movge	r3, #43	; 0x2b
 8006724:	2909      	cmp	r1, #9
 8006726:	f804 2b02 	strb.w	r2, [r4], #2
 800672a:	7043      	strb	r3, [r0, #1]
 800672c:	dd20      	ble.n	8006770 <__exponent+0x5a>
 800672e:	f10d 0307 	add.w	r3, sp, #7
 8006732:	461f      	mov	r7, r3
 8006734:	260a      	movs	r6, #10
 8006736:	fb91 f5f6 	sdiv	r5, r1, r6
 800673a:	fb06 1115 	mls	r1, r6, r5, r1
 800673e:	3130      	adds	r1, #48	; 0x30
 8006740:	2d09      	cmp	r5, #9
 8006742:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006746:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800674a:	4629      	mov	r1, r5
 800674c:	dc09      	bgt.n	8006762 <__exponent+0x4c>
 800674e:	3130      	adds	r1, #48	; 0x30
 8006750:	3b02      	subs	r3, #2
 8006752:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006756:	42bb      	cmp	r3, r7
 8006758:	4622      	mov	r2, r4
 800675a:	d304      	bcc.n	8006766 <__exponent+0x50>
 800675c:	1a10      	subs	r0, r2, r0
 800675e:	b003      	add	sp, #12
 8006760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006762:	4613      	mov	r3, r2
 8006764:	e7e7      	b.n	8006736 <__exponent+0x20>
 8006766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800676a:	f804 2b01 	strb.w	r2, [r4], #1
 800676e:	e7f2      	b.n	8006756 <__exponent+0x40>
 8006770:	2330      	movs	r3, #48	; 0x30
 8006772:	4419      	add	r1, r3
 8006774:	7083      	strb	r3, [r0, #2]
 8006776:	1d02      	adds	r2, r0, #4
 8006778:	70c1      	strb	r1, [r0, #3]
 800677a:	e7ef      	b.n	800675c <__exponent+0x46>

0800677c <_printf_float>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	b08d      	sub	sp, #52	; 0x34
 8006782:	460c      	mov	r4, r1
 8006784:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006788:	4616      	mov	r6, r2
 800678a:	461f      	mov	r7, r3
 800678c:	4605      	mov	r5, r0
 800678e:	f001 fa23 	bl	8007bd8 <_localeconv_r>
 8006792:	6803      	ldr	r3, [r0, #0]
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4618      	mov	r0, r3
 8006798:	f7f9 fd22 	bl	80001e0 <strlen>
 800679c:	2300      	movs	r3, #0
 800679e:	930a      	str	r3, [sp, #40]	; 0x28
 80067a0:	f8d8 3000 	ldr.w	r3, [r8]
 80067a4:	9005      	str	r0, [sp, #20]
 80067a6:	3307      	adds	r3, #7
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	f103 0208 	add.w	r2, r3, #8
 80067b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80067b4:	f8d4 b000 	ldr.w	fp, [r4]
 80067b8:	f8c8 2000 	str.w	r2, [r8]
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80067c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80067c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80067d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067d6:	4ba7      	ldr	r3, [pc, #668]	; (8006a74 <_printf_float+0x2f8>)
 80067d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067dc:	f7fa f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80067e0:	bb70      	cbnz	r0, 8006840 <_printf_float+0xc4>
 80067e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e6:	4ba3      	ldr	r3, [pc, #652]	; (8006a74 <_printf_float+0x2f8>)
 80067e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ec:	f7fa f988 	bl	8000b00 <__aeabi_dcmple>
 80067f0:	bb30      	cbnz	r0, 8006840 <_printf_float+0xc4>
 80067f2:	2200      	movs	r2, #0
 80067f4:	2300      	movs	r3, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7fa f977 	bl	8000aec <__aeabi_dcmplt>
 80067fe:	b110      	cbz	r0, 8006806 <_printf_float+0x8a>
 8006800:	232d      	movs	r3, #45	; 0x2d
 8006802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006806:	4a9c      	ldr	r2, [pc, #624]	; (8006a78 <_printf_float+0x2fc>)
 8006808:	4b9c      	ldr	r3, [pc, #624]	; (8006a7c <_printf_float+0x300>)
 800680a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800680e:	bf8c      	ite	hi
 8006810:	4690      	movhi	r8, r2
 8006812:	4698      	movls	r8, r3
 8006814:	2303      	movs	r3, #3
 8006816:	f02b 0204 	bic.w	r2, fp, #4
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	f04f 0900 	mov.w	r9, #0
 8006822:	9700      	str	r7, [sp, #0]
 8006824:	4633      	mov	r3, r6
 8006826:	aa0b      	add	r2, sp, #44	; 0x2c
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f9e6 	bl	8006bfc <_printf_common>
 8006830:	3001      	adds	r0, #1
 8006832:	f040 808d 	bne.w	8006950 <_printf_float+0x1d4>
 8006836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800683a:	b00d      	add	sp, #52	; 0x34
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	4640      	mov	r0, r8
 8006846:	4649      	mov	r1, r9
 8006848:	f7fa f978 	bl	8000b3c <__aeabi_dcmpun>
 800684c:	b110      	cbz	r0, 8006854 <_printf_float+0xd8>
 800684e:	4a8c      	ldr	r2, [pc, #560]	; (8006a80 <_printf_float+0x304>)
 8006850:	4b8c      	ldr	r3, [pc, #560]	; (8006a84 <_printf_float+0x308>)
 8006852:	e7da      	b.n	800680a <_printf_float+0x8e>
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	1c4b      	adds	r3, r1, #1
 8006858:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800685c:	a80a      	add	r0, sp, #40	; 0x28
 800685e:	d13e      	bne.n	80068de <_printf_float+0x162>
 8006860:	2306      	movs	r3, #6
 8006862:	6063      	str	r3, [r4, #4]
 8006864:	2300      	movs	r3, #0
 8006866:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800686a:	ab09      	add	r3, sp, #36	; 0x24
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	ec49 8b10 	vmov	d0, r8, r9
 8006872:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	f8cd a004 	str.w	sl, [sp, #4]
 800687c:	6861      	ldr	r1, [r4, #4]
 800687e:	4628      	mov	r0, r5
 8006880:	f7ff fee8 	bl	8006654 <__cvt>
 8006884:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006888:	2b47      	cmp	r3, #71	; 0x47
 800688a:	4680      	mov	r8, r0
 800688c:	d109      	bne.n	80068a2 <_printf_float+0x126>
 800688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006890:	1cd8      	adds	r0, r3, #3
 8006892:	db02      	blt.n	800689a <_printf_float+0x11e>
 8006894:	6862      	ldr	r2, [r4, #4]
 8006896:	4293      	cmp	r3, r2
 8006898:	dd47      	ble.n	800692a <_printf_float+0x1ae>
 800689a:	f1aa 0a02 	sub.w	sl, sl, #2
 800689e:	fa5f fa8a 	uxtb.w	sl, sl
 80068a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a8:	d824      	bhi.n	80068f4 <_printf_float+0x178>
 80068aa:	3901      	subs	r1, #1
 80068ac:	4652      	mov	r2, sl
 80068ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068b2:	9109      	str	r1, [sp, #36]	; 0x24
 80068b4:	f7ff ff2f 	bl	8006716 <__exponent>
 80068b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ba:	1813      	adds	r3, r2, r0
 80068bc:	2a01      	cmp	r2, #1
 80068be:	4681      	mov	r9, r0
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	dc02      	bgt.n	80068ca <_printf_float+0x14e>
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	07d1      	lsls	r1, r2, #31
 80068c8:	d501      	bpl.n	80068ce <_printf_float+0x152>
 80068ca:	3301      	adds	r3, #1
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0a5      	beq.n	8006822 <_printf_float+0xa6>
 80068d6:	232d      	movs	r3, #45	; 0x2d
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068dc:	e7a1      	b.n	8006822 <_printf_float+0xa6>
 80068de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80068e2:	f000 8177 	beq.w	8006bd4 <_printf_float+0x458>
 80068e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80068ea:	d1bb      	bne.n	8006864 <_printf_float+0xe8>
 80068ec:	2900      	cmp	r1, #0
 80068ee:	d1b9      	bne.n	8006864 <_printf_float+0xe8>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e7b6      	b.n	8006862 <_printf_float+0xe6>
 80068f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80068f8:	d119      	bne.n	800692e <_printf_float+0x1b2>
 80068fa:	2900      	cmp	r1, #0
 80068fc:	6863      	ldr	r3, [r4, #4]
 80068fe:	dd0c      	ble.n	800691a <_printf_float+0x19e>
 8006900:	6121      	str	r1, [r4, #16]
 8006902:	b913      	cbnz	r3, 800690a <_printf_float+0x18e>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	07d2      	lsls	r2, r2, #31
 8006908:	d502      	bpl.n	8006910 <_printf_float+0x194>
 800690a:	3301      	adds	r3, #1
 800690c:	440b      	add	r3, r1
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	65a3      	str	r3, [r4, #88]	; 0x58
 8006914:	f04f 0900 	mov.w	r9, #0
 8006918:	e7d9      	b.n	80068ce <_printf_float+0x152>
 800691a:	b913      	cbnz	r3, 8006922 <_printf_float+0x1a6>
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	07d0      	lsls	r0, r2, #31
 8006920:	d501      	bpl.n	8006926 <_printf_float+0x1aa>
 8006922:	3302      	adds	r3, #2
 8006924:	e7f3      	b.n	800690e <_printf_float+0x192>
 8006926:	2301      	movs	r3, #1
 8006928:	e7f1      	b.n	800690e <_printf_float+0x192>
 800692a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800692e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006932:	4293      	cmp	r3, r2
 8006934:	db05      	blt.n	8006942 <_printf_float+0x1c6>
 8006936:	6822      	ldr	r2, [r4, #0]
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	07d1      	lsls	r1, r2, #31
 800693c:	d5e8      	bpl.n	8006910 <_printf_float+0x194>
 800693e:	3301      	adds	r3, #1
 8006940:	e7e5      	b.n	800690e <_printf_float+0x192>
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfd4      	ite	le
 8006946:	f1c3 0302 	rsble	r3, r3, #2
 800694a:	2301      	movgt	r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	e7de      	b.n	800690e <_printf_float+0x192>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	055a      	lsls	r2, r3, #21
 8006954:	d407      	bmi.n	8006966 <_printf_float+0x1ea>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	4642      	mov	r2, r8
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d12b      	bne.n	80069bc <_printf_float+0x240>
 8006964:	e767      	b.n	8006836 <_printf_float+0xba>
 8006966:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800696a:	f240 80dc 	bls.w	8006b26 <_printf_float+0x3aa>
 800696e:	2200      	movs	r2, #0
 8006970:	2300      	movs	r3, #0
 8006972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006976:	f7fa f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800697a:	2800      	cmp	r0, #0
 800697c:	d033      	beq.n	80069e6 <_printf_float+0x26a>
 800697e:	2301      	movs	r3, #1
 8006980:	4a41      	ldr	r2, [pc, #260]	; (8006a88 <_printf_float+0x30c>)
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	f43f af54 	beq.w	8006836 <_printf_float+0xba>
 800698e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006992:	429a      	cmp	r2, r3
 8006994:	db02      	blt.n	800699c <_printf_float+0x220>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	07d8      	lsls	r0, r3, #31
 800699a:	d50f      	bpl.n	80069bc <_printf_float+0x240>
 800699c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af45 	beq.w	8006836 <_printf_float+0xba>
 80069ac:	f04f 0800 	mov.w	r8, #0
 80069b0:	f104 091a 	add.w	r9, r4, #26
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4543      	cmp	r3, r8
 80069ba:	dc09      	bgt.n	80069d0 <_printf_float+0x254>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	f100 8103 	bmi.w	8006bca <_printf_float+0x44e>
 80069c4:	68e0      	ldr	r0, [r4, #12]
 80069c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c8:	4298      	cmp	r0, r3
 80069ca:	bfb8      	it	lt
 80069cc:	4618      	movlt	r0, r3
 80069ce:	e734      	b.n	800683a <_printf_float+0xbe>
 80069d0:	2301      	movs	r3, #1
 80069d2:	464a      	mov	r2, r9
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af2b 	beq.w	8006836 <_printf_float+0xba>
 80069e0:	f108 0801 	add.w	r8, r8, #1
 80069e4:	e7e6      	b.n	80069b4 <_printf_float+0x238>
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc2b      	bgt.n	8006a44 <_printf_float+0x2c8>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4a26      	ldr	r2, [pc, #152]	; (8006a88 <_printf_float+0x30c>)
 80069f0:	4631      	mov	r1, r6
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	f43f af1d 	beq.w	8006836 <_printf_float+0xba>
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	b923      	cbnz	r3, 8006a0a <_printf_float+0x28e>
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	b913      	cbnz	r3, 8006a0a <_printf_float+0x28e>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d5d8      	bpl.n	80069bc <_printf_float+0x240>
 8006a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f af0e 	beq.w	8006836 <_printf_float+0xba>
 8006a1a:	f04f 0900 	mov.w	r9, #0
 8006a1e:	f104 0a1a 	add.w	sl, r4, #26
 8006a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a24:	425b      	negs	r3, r3
 8006a26:	454b      	cmp	r3, r9
 8006a28:	dc01      	bgt.n	8006a2e <_printf_float+0x2b2>
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2c:	e794      	b.n	8006958 <_printf_float+0x1dc>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f aefc 	beq.w	8006836 <_printf_float+0xba>
 8006a3e:	f109 0901 	add.w	r9, r9, #1
 8006a42:	e7ee      	b.n	8006a22 <_printf_float+0x2a6>
 8006a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfa8      	it	ge
 8006a4c:	461a      	movge	r2, r3
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	4691      	mov	r9, r2
 8006a52:	dd07      	ble.n	8006a64 <_printf_float+0x2e8>
 8006a54:	4613      	mov	r3, r2
 8006a56:	4631      	mov	r1, r6
 8006a58:	4642      	mov	r2, r8
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f43f aee9 	beq.w	8006836 <_printf_float+0xba>
 8006a64:	f104 031a 	add.w	r3, r4, #26
 8006a68:	f04f 0b00 	mov.w	fp, #0
 8006a6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	e015      	b.n	8006aa0 <_printf_float+0x324>
 8006a74:	7fefffff 	.word	0x7fefffff
 8006a78:	080097d8 	.word	0x080097d8
 8006a7c:	080097d4 	.word	0x080097d4
 8006a80:	080097e0 	.word	0x080097e0
 8006a84:	080097dc 	.word	0x080097dc
 8006a88:	080097e4 	.word	0x080097e4
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	9a06      	ldr	r2, [sp, #24]
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f aecd 	beq.w	8006836 <_printf_float+0xba>
 8006a9c:	f10b 0b01 	add.w	fp, fp, #1
 8006aa0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006aa4:	ebaa 0309 	sub.w	r3, sl, r9
 8006aa8:	455b      	cmp	r3, fp
 8006aaa:	dcef      	bgt.n	8006a8c <_printf_float+0x310>
 8006aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	44d0      	add	r8, sl
 8006ab4:	db15      	blt.n	8006ae2 <_printf_float+0x366>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	07da      	lsls	r2, r3, #31
 8006aba:	d412      	bmi.n	8006ae2 <_printf_float+0x366>
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac0:	eba3 020a 	sub.w	r2, r3, sl
 8006ac4:	eba3 0a01 	sub.w	sl, r3, r1
 8006ac8:	4592      	cmp	sl, r2
 8006aca:	bfa8      	it	ge
 8006acc:	4692      	movge	sl, r2
 8006ace:	f1ba 0f00 	cmp.w	sl, #0
 8006ad2:	dc0e      	bgt.n	8006af2 <_printf_float+0x376>
 8006ad4:	f04f 0800 	mov.w	r8, #0
 8006ad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006adc:	f104 091a 	add.w	r9, r4, #26
 8006ae0:	e019      	b.n	8006b16 <_printf_float+0x39a>
 8006ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1e5      	bne.n	8006abc <_printf_float+0x340>
 8006af0:	e6a1      	b.n	8006836 <_printf_float+0xba>
 8006af2:	4653      	mov	r3, sl
 8006af4:	4642      	mov	r2, r8
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	d1e9      	bne.n	8006ad4 <_printf_float+0x358>
 8006b00:	e699      	b.n	8006836 <_printf_float+0xba>
 8006b02:	2301      	movs	r3, #1
 8006b04:	464a      	mov	r2, r9
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae92 	beq.w	8006836 <_printf_float+0xba>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	eba3 030a 	sub.w	r3, r3, sl
 8006b20:	4543      	cmp	r3, r8
 8006b22:	dcee      	bgt.n	8006b02 <_printf_float+0x386>
 8006b24:	e74a      	b.n	80069bc <_printf_float+0x240>
 8006b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b28:	2a01      	cmp	r2, #1
 8006b2a:	dc01      	bgt.n	8006b30 <_printf_float+0x3b4>
 8006b2c:	07db      	lsls	r3, r3, #31
 8006b2e:	d53a      	bpl.n	8006ba6 <_printf_float+0x42a>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4642      	mov	r2, r8
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f ae7b 	beq.w	8006836 <_printf_float+0xba>
 8006b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b44:	4631      	mov	r1, r6
 8006b46:	4628      	mov	r0, r5
 8006b48:	47b8      	blx	r7
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f108 0801 	add.w	r8, r8, #1
 8006b50:	f43f ae71 	beq.w	8006836 <_printf_float+0xba>
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	2200      	movs	r2, #0
 8006b58:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b60:	2300      	movs	r3, #0
 8006b62:	f7f9 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b66:	b9c8      	cbnz	r0, 8006b9c <_printf_float+0x420>
 8006b68:	4653      	mov	r3, sl
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	47b8      	blx	r7
 8006b72:	3001      	adds	r0, #1
 8006b74:	d10e      	bne.n	8006b94 <_printf_float+0x418>
 8006b76:	e65e      	b.n	8006836 <_printf_float+0xba>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	47b8      	blx	r7
 8006b82:	3001      	adds	r0, #1
 8006b84:	f43f ae57 	beq.w	8006836 <_printf_float+0xba>
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4543      	cmp	r3, r8
 8006b92:	dcf1      	bgt.n	8006b78 <_printf_float+0x3fc>
 8006b94:	464b      	mov	r3, r9
 8006b96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b9a:	e6de      	b.n	800695a <_printf_float+0x1de>
 8006b9c:	f04f 0800 	mov.w	r8, #0
 8006ba0:	f104 0a1a 	add.w	sl, r4, #26
 8006ba4:	e7f2      	b.n	8006b8c <_printf_float+0x410>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e7df      	b.n	8006b6a <_printf_float+0x3ee>
 8006baa:	2301      	movs	r3, #1
 8006bac:	464a      	mov	r2, r9
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	f43f ae3e 	beq.w	8006836 <_printf_float+0xba>
 8006bba:	f108 0801 	add.w	r8, r8, #1
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	dcf0      	bgt.n	8006baa <_printf_float+0x42e>
 8006bc8:	e6fc      	b.n	80069c4 <_printf_float+0x248>
 8006bca:	f04f 0800 	mov.w	r8, #0
 8006bce:	f104 0919 	add.w	r9, r4, #25
 8006bd2:	e7f4      	b.n	8006bbe <_printf_float+0x442>
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	f43f ae8b 	beq.w	80068f0 <_printf_float+0x174>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006be0:	ab09      	add	r3, sp, #36	; 0x24
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	ec49 8b10 	vmov	d0, r8, r9
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	f8cd a004 	str.w	sl, [sp, #4]
 8006bee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7ff fd2e 	bl	8006654 <__cvt>
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	e648      	b.n	800688e <_printf_float+0x112>

08006bfc <_printf_common>:
 8006bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	4691      	mov	r9, r2
 8006c02:	461f      	mov	r7, r3
 8006c04:	688a      	ldr	r2, [r1, #8]
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bfb8      	it	lt
 8006c10:	4613      	movlt	r3, r2
 8006c12:	f8c9 3000 	str.w	r3, [r9]
 8006c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	b112      	cbz	r2, 8006c26 <_printf_common+0x2a>
 8006c20:	3301      	adds	r3, #1
 8006c22:	f8c9 3000 	str.w	r3, [r9]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	0699      	lsls	r1, r3, #26
 8006c2a:	bf42      	ittt	mi
 8006c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c30:	3302      	addmi	r3, #2
 8006c32:	f8c9 3000 	strmi.w	r3, [r9]
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	f015 0506 	ands.w	r5, r5, #6
 8006c3c:	d107      	bne.n	8006c4e <_printf_common+0x52>
 8006c3e:	f104 0a19 	add.w	sl, r4, #25
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	f8d9 2000 	ldr.w	r2, [r9]
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	42ab      	cmp	r3, r5
 8006c4c:	dc28      	bgt.n	8006ca0 <_printf_common+0xa4>
 8006c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	3300      	adds	r3, #0
 8006c56:	bf18      	it	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	0692      	lsls	r2, r2, #26
 8006c5c:	d42d      	bmi.n	8006cba <_printf_common+0xbe>
 8006c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c62:	4639      	mov	r1, r7
 8006c64:	4630      	mov	r0, r6
 8006c66:	47c0      	blx	r8
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d020      	beq.n	8006cae <_printf_common+0xb2>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	68e5      	ldr	r5, [r4, #12]
 8006c70:	f8d9 2000 	ldr.w	r2, [r9]
 8006c74:	f003 0306 	and.w	r3, r3, #6
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	bf08      	it	eq
 8006c7c:	1aad      	subeq	r5, r5, r2
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	bf0c      	ite	eq
 8006c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c88:	2500      	movne	r5, #0
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	bfc4      	itt	gt
 8006c8e:	1a9b      	subgt	r3, r3, r2
 8006c90:	18ed      	addgt	r5, r5, r3
 8006c92:	f04f 0900 	mov.w	r9, #0
 8006c96:	341a      	adds	r4, #26
 8006c98:	454d      	cmp	r5, r9
 8006c9a:	d11a      	bne.n	8006cd2 <_printf_common+0xd6>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e008      	b.n	8006cb2 <_printf_common+0xb6>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	47c0      	blx	r8
 8006caa:	3001      	adds	r0, #1
 8006cac:	d103      	bne.n	8006cb6 <_printf_common+0xba>
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	3501      	adds	r5, #1
 8006cb8:	e7c3      	b.n	8006c42 <_printf_common+0x46>
 8006cba:	18e1      	adds	r1, r4, r3
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	2030      	movs	r0, #48	; 0x30
 8006cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cc4:	4422      	add	r2, r4
 8006cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cce:	3302      	adds	r3, #2
 8006cd0:	e7c5      	b.n	8006c5e <_printf_common+0x62>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	4630      	mov	r0, r6
 8006cda:	47c0      	blx	r8
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d0e6      	beq.n	8006cae <_printf_common+0xb2>
 8006ce0:	f109 0901 	add.w	r9, r9, #1
 8006ce4:	e7d8      	b.n	8006c98 <_printf_common+0x9c>
	...

08006ce8 <_printf_i>:
 8006ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	7e09      	ldrb	r1, [r1, #24]
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	296e      	cmp	r1, #110	; 0x6e
 8006cf8:	4617      	mov	r7, r2
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	4698      	mov	r8, r3
 8006cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d00:	f000 80b3 	beq.w	8006e6a <_printf_i+0x182>
 8006d04:	d822      	bhi.n	8006d4c <_printf_i+0x64>
 8006d06:	2963      	cmp	r1, #99	; 0x63
 8006d08:	d036      	beq.n	8006d78 <_printf_i+0x90>
 8006d0a:	d80a      	bhi.n	8006d22 <_printf_i+0x3a>
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	f000 80b9 	beq.w	8006e84 <_printf_i+0x19c>
 8006d12:	2958      	cmp	r1, #88	; 0x58
 8006d14:	f000 8083 	beq.w	8006e1e <_printf_i+0x136>
 8006d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d20:	e032      	b.n	8006d88 <_printf_i+0xa0>
 8006d22:	2964      	cmp	r1, #100	; 0x64
 8006d24:	d001      	beq.n	8006d2a <_printf_i+0x42>
 8006d26:	2969      	cmp	r1, #105	; 0x69
 8006d28:	d1f6      	bne.n	8006d18 <_printf_i+0x30>
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	0605      	lsls	r5, r0, #24
 8006d30:	f103 0104 	add.w	r1, r3, #4
 8006d34:	d52a      	bpl.n	8006d8c <_printf_i+0xa4>
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da03      	bge.n	8006d46 <_printf_i+0x5e>
 8006d3e:	222d      	movs	r2, #45	; 0x2d
 8006d40:	425b      	negs	r3, r3
 8006d42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d46:	486f      	ldr	r0, [pc, #444]	; (8006f04 <_printf_i+0x21c>)
 8006d48:	220a      	movs	r2, #10
 8006d4a:	e039      	b.n	8006dc0 <_printf_i+0xd8>
 8006d4c:	2973      	cmp	r1, #115	; 0x73
 8006d4e:	f000 809d 	beq.w	8006e8c <_printf_i+0x1a4>
 8006d52:	d808      	bhi.n	8006d66 <_printf_i+0x7e>
 8006d54:	296f      	cmp	r1, #111	; 0x6f
 8006d56:	d020      	beq.n	8006d9a <_printf_i+0xb2>
 8006d58:	2970      	cmp	r1, #112	; 0x70
 8006d5a:	d1dd      	bne.n	8006d18 <_printf_i+0x30>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	e003      	b.n	8006d6e <_printf_i+0x86>
 8006d66:	2975      	cmp	r1, #117	; 0x75
 8006d68:	d017      	beq.n	8006d9a <_printf_i+0xb2>
 8006d6a:	2978      	cmp	r1, #120	; 0x78
 8006d6c:	d1d4      	bne.n	8006d18 <_printf_i+0x30>
 8006d6e:	2378      	movs	r3, #120	; 0x78
 8006d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d74:	4864      	ldr	r0, [pc, #400]	; (8006f08 <_printf_i+0x220>)
 8006d76:	e055      	b.n	8006e24 <_printf_i+0x13c>
 8006d78:	6813      	ldr	r3, [r2, #0]
 8006d7a:	1d19      	adds	r1, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6011      	str	r1, [r2, #0]
 8006d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e08c      	b.n	8006ea6 <_printf_i+0x1be>
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6011      	str	r1, [r2, #0]
 8006d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d94:	bf18      	it	ne
 8006d96:	b21b      	sxthne	r3, r3
 8006d98:	e7cf      	b.n	8006d3a <_printf_i+0x52>
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	6825      	ldr	r5, [r4, #0]
 8006d9e:	1d18      	adds	r0, r3, #4
 8006da0:	6010      	str	r0, [r2, #0]
 8006da2:	0628      	lsls	r0, r5, #24
 8006da4:	d501      	bpl.n	8006daa <_printf_i+0xc2>
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <_printf_i+0xc8>
 8006daa:	0668      	lsls	r0, r5, #25
 8006dac:	d5fb      	bpl.n	8006da6 <_printf_i+0xbe>
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	4854      	ldr	r0, [pc, #336]	; (8006f04 <_printf_i+0x21c>)
 8006db2:	296f      	cmp	r1, #111	; 0x6f
 8006db4:	bf14      	ite	ne
 8006db6:	220a      	movne	r2, #10
 8006db8:	2208      	moveq	r2, #8
 8006dba:	2100      	movs	r1, #0
 8006dbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dc0:	6865      	ldr	r5, [r4, #4]
 8006dc2:	60a5      	str	r5, [r4, #8]
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	f2c0 8095 	blt.w	8006ef4 <_printf_i+0x20c>
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	f021 0104 	bic.w	r1, r1, #4
 8006dd0:	6021      	str	r1, [r4, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d13d      	bne.n	8006e52 <_printf_i+0x16a>
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	f040 808e 	bne.w	8006ef8 <_printf_i+0x210>
 8006ddc:	4665      	mov	r5, ip
 8006dde:	2a08      	cmp	r2, #8
 8006de0:	d10b      	bne.n	8006dfa <_printf_i+0x112>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07db      	lsls	r3, r3, #31
 8006de6:	d508      	bpl.n	8006dfa <_printf_i+0x112>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bfde      	ittt	le
 8006df0:	2330      	movle	r3, #48	; 0x30
 8006df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006df6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006dfa:	ebac 0305 	sub.w	r3, ip, r5
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	f8cd 8000 	str.w	r8, [sp]
 8006e04:	463b      	mov	r3, r7
 8006e06:	aa03      	add	r2, sp, #12
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff fef6 	bl	8006bfc <_printf_common>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d14d      	bne.n	8006eb0 <_printf_i+0x1c8>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e18:	b005      	add	sp, #20
 8006e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	4839      	ldr	r0, [pc, #228]	; (8006f04 <_printf_i+0x21c>)
 8006e20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e24:	6813      	ldr	r3, [r2, #0]
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	1d1d      	adds	r5, r3, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6015      	str	r5, [r2, #0]
 8006e2e:	060a      	lsls	r2, r1, #24
 8006e30:	d50b      	bpl.n	8006e4a <_printf_i+0x162>
 8006e32:	07ca      	lsls	r2, r1, #31
 8006e34:	bf44      	itt	mi
 8006e36:	f041 0120 	orrmi.w	r1, r1, #32
 8006e3a:	6021      	strmi	r1, [r4, #0]
 8006e3c:	b91b      	cbnz	r3, 8006e46 <_printf_i+0x15e>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	f022 0220 	bic.w	r2, r2, #32
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	2210      	movs	r2, #16
 8006e48:	e7b7      	b.n	8006dba <_printf_i+0xd2>
 8006e4a:	064d      	lsls	r5, r1, #25
 8006e4c:	bf48      	it	mi
 8006e4e:	b29b      	uxthmi	r3, r3
 8006e50:	e7ef      	b.n	8006e32 <_printf_i+0x14a>
 8006e52:	4665      	mov	r5, ip
 8006e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e58:	fb02 3311 	mls	r3, r2, r1, r3
 8006e5c:	5cc3      	ldrb	r3, [r0, r3]
 8006e5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e62:	460b      	mov	r3, r1
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d1f5      	bne.n	8006e54 <_printf_i+0x16c>
 8006e68:	e7b9      	b.n	8006dde <_printf_i+0xf6>
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	6961      	ldr	r1, [r4, #20]
 8006e70:	1d18      	adds	r0, r3, #4
 8006e72:	6010      	str	r0, [r2, #0]
 8006e74:	0628      	lsls	r0, r5, #24
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	d501      	bpl.n	8006e7e <_printf_i+0x196>
 8006e7a:	6019      	str	r1, [r3, #0]
 8006e7c:	e002      	b.n	8006e84 <_printf_i+0x19c>
 8006e7e:	066a      	lsls	r2, r5, #25
 8006e80:	d5fb      	bpl.n	8006e7a <_printf_i+0x192>
 8006e82:	8019      	strh	r1, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	4665      	mov	r5, ip
 8006e8a:	e7b9      	b.n	8006e00 <_printf_i+0x118>
 8006e8c:	6813      	ldr	r3, [r2, #0]
 8006e8e:	1d19      	adds	r1, r3, #4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	681d      	ldr	r5, [r3, #0]
 8006e94:	6862      	ldr	r2, [r4, #4]
 8006e96:	2100      	movs	r1, #0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f7f9 f9a9 	bl	80001f0 <memchr>
 8006e9e:	b108      	cbz	r0, 8006ea4 <_printf_i+0x1bc>
 8006ea0:	1b40      	subs	r0, r0, r5
 8006ea2:	6060      	str	r0, [r4, #4]
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	6123      	str	r3, [r4, #16]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eae:	e7a7      	b.n	8006e00 <_printf_i+0x118>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d0aa      	beq.n	8006e14 <_printf_i+0x12c>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	079b      	lsls	r3, r3, #30
 8006ec2:	d413      	bmi.n	8006eec <_printf_i+0x204>
 8006ec4:	68e0      	ldr	r0, [r4, #12]
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	4298      	cmp	r0, r3
 8006eca:	bfb8      	it	lt
 8006ecc:	4618      	movlt	r0, r3
 8006ece:	e7a3      	b.n	8006e18 <_printf_i+0x130>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	464a      	mov	r2, r9
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	47c0      	blx	r8
 8006eda:	3001      	adds	r0, #1
 8006edc:	d09a      	beq.n	8006e14 <_printf_i+0x12c>
 8006ede:	3501      	adds	r5, #1
 8006ee0:	68e3      	ldr	r3, [r4, #12]
 8006ee2:	9a03      	ldr	r2, [sp, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	42ab      	cmp	r3, r5
 8006ee8:	dcf2      	bgt.n	8006ed0 <_printf_i+0x1e8>
 8006eea:	e7eb      	b.n	8006ec4 <_printf_i+0x1dc>
 8006eec:	2500      	movs	r5, #0
 8006eee:	f104 0919 	add.w	r9, r4, #25
 8006ef2:	e7f5      	b.n	8006ee0 <_printf_i+0x1f8>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1ac      	bne.n	8006e52 <_printf_i+0x16a>
 8006ef8:	7803      	ldrb	r3, [r0, #0]
 8006efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f02:	e76c      	b.n	8006dde <_printf_i+0xf6>
 8006f04:	080097e6 	.word	0x080097e6
 8006f08:	080097f7 	.word	0x080097f7

08006f0c <siprintf>:
 8006f0c:	b40e      	push	{r1, r2, r3}
 8006f0e:	b500      	push	{lr}
 8006f10:	b09c      	sub	sp, #112	; 0x70
 8006f12:	ab1d      	add	r3, sp, #116	; 0x74
 8006f14:	9002      	str	r0, [sp, #8]
 8006f16:	9006      	str	r0, [sp, #24]
 8006f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f1c:	4809      	ldr	r0, [pc, #36]	; (8006f44 <siprintf+0x38>)
 8006f1e:	9107      	str	r1, [sp, #28]
 8006f20:	9104      	str	r1, [sp, #16]
 8006f22:	4909      	ldr	r1, [pc, #36]	; (8006f48 <siprintf+0x3c>)
 8006f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	a902      	add	r1, sp, #8
 8006f30:	f001 fa5e 	bl	80083f0 <_svfiprintf_r>
 8006f34:	9b02      	ldr	r3, [sp, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	b01c      	add	sp, #112	; 0x70
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	2000001c 	.word	0x2000001c
 8006f48:	ffff0208 	.word	0xffff0208

08006f4c <quorem>:
 8006f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	6903      	ldr	r3, [r0, #16]
 8006f52:	690c      	ldr	r4, [r1, #16]
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	4680      	mov	r8, r0
 8006f58:	f2c0 8082 	blt.w	8007060 <quorem+0x114>
 8006f5c:	3c01      	subs	r4, #1
 8006f5e:	f101 0714 	add.w	r7, r1, #20
 8006f62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006f66:	f100 0614 	add.w	r6, r0, #20
 8006f6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006f72:	eb06 030c 	add.w	r3, r6, ip
 8006f76:	3501      	adds	r5, #1
 8006f78:	eb07 090c 	add.w	r9, r7, ip
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f82:	b395      	cbz	r5, 8006fea <quorem+0x9e>
 8006f84:	f04f 0a00 	mov.w	sl, #0
 8006f88:	4638      	mov	r0, r7
 8006f8a:	46b6      	mov	lr, r6
 8006f8c:	46d3      	mov	fp, sl
 8006f8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f92:	b293      	uxth	r3, r2
 8006f94:	fb05 a303 	mla	r3, r5, r3, sl
 8006f98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ebab 0303 	sub.w	r3, fp, r3
 8006fa2:	0c12      	lsrs	r2, r2, #16
 8006fa4:	f8de b000 	ldr.w	fp, [lr]
 8006fa8:	fb05 a202 	mla	r2, r5, r2, sl
 8006fac:	fa13 f38b 	uxtah	r3, r3, fp
 8006fb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006fb4:	fa1f fb82 	uxth.w	fp, r2
 8006fb8:	f8de 2000 	ldr.w	r2, [lr]
 8006fbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fca:	4581      	cmp	r9, r0
 8006fcc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006fd0:	f84e 3b04 	str.w	r3, [lr], #4
 8006fd4:	d2db      	bcs.n	8006f8e <quorem+0x42>
 8006fd6:	f856 300c 	ldr.w	r3, [r6, ip]
 8006fda:	b933      	cbnz	r3, 8006fea <quorem+0x9e>
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	3b04      	subs	r3, #4
 8006fe0:	429e      	cmp	r6, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	d330      	bcc.n	8007048 <quorem+0xfc>
 8006fe6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006fea:	4640      	mov	r0, r8
 8006fec:	f001 f82a 	bl	8008044 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	db25      	blt.n	8007040 <quorem+0xf4>
 8006ff4:	3501      	adds	r5, #1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f04f 0c00 	mov.w	ip, #0
 8006ffc:	f857 2b04 	ldr.w	r2, [r7], #4
 8007000:	f8d0 e000 	ldr.w	lr, [r0]
 8007004:	b293      	uxth	r3, r2
 8007006:	ebac 0303 	sub.w	r3, ip, r3
 800700a:	0c12      	lsrs	r2, r2, #16
 800700c:	fa13 f38e 	uxtah	r3, r3, lr
 8007010:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701e:	45b9      	cmp	r9, r7
 8007020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007024:	f840 3b04 	str.w	r3, [r0], #4
 8007028:	d2e8      	bcs.n	8006ffc <quorem+0xb0>
 800702a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800702e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007032:	b92a      	cbnz	r2, 8007040 <quorem+0xf4>
 8007034:	3b04      	subs	r3, #4
 8007036:	429e      	cmp	r6, r3
 8007038:	461a      	mov	r2, r3
 800703a:	d30b      	bcc.n	8007054 <quorem+0x108>
 800703c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007040:	4628      	mov	r0, r5
 8007042:	b003      	add	sp, #12
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	3b04      	subs	r3, #4
 800704c:	2a00      	cmp	r2, #0
 800704e:	d1ca      	bne.n	8006fe6 <quorem+0x9a>
 8007050:	3c01      	subs	r4, #1
 8007052:	e7c5      	b.n	8006fe0 <quorem+0x94>
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	3b04      	subs	r3, #4
 8007058:	2a00      	cmp	r2, #0
 800705a:	d1ef      	bne.n	800703c <quorem+0xf0>
 800705c:	3c01      	subs	r4, #1
 800705e:	e7ea      	b.n	8007036 <quorem+0xea>
 8007060:	2000      	movs	r0, #0
 8007062:	e7ee      	b.n	8007042 <quorem+0xf6>
 8007064:	0000      	movs	r0, r0
	...

08007068 <_dtoa_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	ec57 6b10 	vmov	r6, r7, d0
 8007070:	b097      	sub	sp, #92	; 0x5c
 8007072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007074:	9106      	str	r1, [sp, #24]
 8007076:	4604      	mov	r4, r0
 8007078:	920b      	str	r2, [sp, #44]	; 0x2c
 800707a:	9312      	str	r3, [sp, #72]	; 0x48
 800707c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007080:	e9cd 6700 	strd	r6, r7, [sp]
 8007084:	b93d      	cbnz	r5, 8007096 <_dtoa_r+0x2e>
 8007086:	2010      	movs	r0, #16
 8007088:	f000 fdb4 	bl	8007bf4 <malloc>
 800708c:	6260      	str	r0, [r4, #36]	; 0x24
 800708e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007092:	6005      	str	r5, [r0, #0]
 8007094:	60c5      	str	r5, [r0, #12]
 8007096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007098:	6819      	ldr	r1, [r3, #0]
 800709a:	b151      	cbz	r1, 80070b2 <_dtoa_r+0x4a>
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	604a      	str	r2, [r1, #4]
 80070a0:	2301      	movs	r3, #1
 80070a2:	4093      	lsls	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fdeb 	bl	8007c82 <_Bfree>
 80070ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	1e3b      	subs	r3, r7, #0
 80070b4:	bfbb      	ittet	lt
 80070b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070ba:	9301      	strlt	r3, [sp, #4]
 80070bc:	2300      	movge	r3, #0
 80070be:	2201      	movlt	r2, #1
 80070c0:	bfac      	ite	ge
 80070c2:	f8c8 3000 	strge.w	r3, [r8]
 80070c6:	f8c8 2000 	strlt.w	r2, [r8]
 80070ca:	4baf      	ldr	r3, [pc, #700]	; (8007388 <_dtoa_r+0x320>)
 80070cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80070d0:	ea33 0308 	bics.w	r3, r3, r8
 80070d4:	d114      	bne.n	8007100 <_dtoa_r+0x98>
 80070d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	b923      	cbnz	r3, 80070ec <_dtoa_r+0x84>
 80070e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f000 8542 	beq.w	8007b70 <_dtoa_r+0xb08>
 80070ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800739c <_dtoa_r+0x334>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8544 	beq.w	8007b80 <_dtoa_r+0xb18>
 80070f8:	f10b 0303 	add.w	r3, fp, #3
 80070fc:	f000 bd3e 	b.w	8007b7c <_dtoa_r+0xb14>
 8007100:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007110:	4681      	mov	r9, r0
 8007112:	b168      	cbz	r0, 8007130 <_dtoa_r+0xc8>
 8007114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007116:	2301      	movs	r3, #1
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8524 	beq.w	8007b6a <_dtoa_r+0xb02>
 8007122:	4b9a      	ldr	r3, [pc, #616]	; (800738c <_dtoa_r+0x324>)
 8007124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007126:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	f000 bd28 	b.w	8007b80 <_dtoa_r+0xb18>
 8007130:	aa14      	add	r2, sp, #80	; 0x50
 8007132:	a915      	add	r1, sp, #84	; 0x54
 8007134:	ec47 6b10 	vmov	d0, r6, r7
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fffa 	bl	8008132 <__d2b>
 800713e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007142:	9004      	str	r0, [sp, #16]
 8007144:	2d00      	cmp	r5, #0
 8007146:	d07c      	beq.n	8007242 <_dtoa_r+0x1da>
 8007148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800714c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007150:	46b2      	mov	sl, r6
 8007152:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800715a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800715e:	2200      	movs	r2, #0
 8007160:	4b8b      	ldr	r3, [pc, #556]	; (8007390 <_dtoa_r+0x328>)
 8007162:	4650      	mov	r0, sl
 8007164:	4659      	mov	r1, fp
 8007166:	f7f9 f897 	bl	8000298 <__aeabi_dsub>
 800716a:	a381      	add	r3, pc, #516	; (adr r3, 8007370 <_dtoa_r+0x308>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 fa4a 	bl	8000608 <__aeabi_dmul>
 8007174:	a380      	add	r3, pc, #512	; (adr r3, 8007378 <_dtoa_r+0x310>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f88f 	bl	800029c <__adddf3>
 800717e:	4606      	mov	r6, r0
 8007180:	4628      	mov	r0, r5
 8007182:	460f      	mov	r7, r1
 8007184:	f7f9 f9d6 	bl	8000534 <__aeabi_i2d>
 8007188:	a37d      	add	r3, pc, #500	; (adr r3, 8007380 <_dtoa_r+0x318>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 fa3b 	bl	8000608 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	f7f9 f87f 	bl	800029c <__adddf3>
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	f7f9 fce1 	bl	8000b68 <__aeabi_d2iz>
 80071a6:	2200      	movs	r2, #0
 80071a8:	4682      	mov	sl, r0
 80071aa:	2300      	movs	r3, #0
 80071ac:	4630      	mov	r0, r6
 80071ae:	4639      	mov	r1, r7
 80071b0:	f7f9 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80071b4:	b148      	cbz	r0, 80071ca <_dtoa_r+0x162>
 80071b6:	4650      	mov	r0, sl
 80071b8:	f7f9 f9bc 	bl	8000534 <__aeabi_i2d>
 80071bc:	4632      	mov	r2, r6
 80071be:	463b      	mov	r3, r7
 80071c0:	f7f9 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80071c4:	b908      	cbnz	r0, 80071ca <_dtoa_r+0x162>
 80071c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071ca:	f1ba 0f16 	cmp.w	sl, #22
 80071ce:	d859      	bhi.n	8007284 <_dtoa_r+0x21c>
 80071d0:	4970      	ldr	r1, [pc, #448]	; (8007394 <_dtoa_r+0x32c>)
 80071d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80071d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071de:	f7f9 fca3 	bl	8000b28 <__aeabi_dcmpgt>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d050      	beq.n	8007288 <_dtoa_r+0x220>
 80071e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071ea:	2300      	movs	r3, #0
 80071ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071f0:	1b5d      	subs	r5, r3, r5
 80071f2:	f1b5 0801 	subs.w	r8, r5, #1
 80071f6:	bf49      	itett	mi
 80071f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80071fc:	2300      	movpl	r3, #0
 80071fe:	9305      	strmi	r3, [sp, #20]
 8007200:	f04f 0800 	movmi.w	r8, #0
 8007204:	bf58      	it	pl
 8007206:	9305      	strpl	r3, [sp, #20]
 8007208:	f1ba 0f00 	cmp.w	sl, #0
 800720c:	db3e      	blt.n	800728c <_dtoa_r+0x224>
 800720e:	2300      	movs	r3, #0
 8007210:	44d0      	add	r8, sl
 8007212:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007216:	9307      	str	r3, [sp, #28]
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	2b09      	cmp	r3, #9
 800721c:	f200 8090 	bhi.w	8007340 <_dtoa_r+0x2d8>
 8007220:	2b05      	cmp	r3, #5
 8007222:	bfc4      	itt	gt
 8007224:	3b04      	subgt	r3, #4
 8007226:	9306      	strgt	r3, [sp, #24]
 8007228:	9b06      	ldr	r3, [sp, #24]
 800722a:	f1a3 0302 	sub.w	r3, r3, #2
 800722e:	bfcc      	ite	gt
 8007230:	2500      	movgt	r5, #0
 8007232:	2501      	movle	r5, #1
 8007234:	2b03      	cmp	r3, #3
 8007236:	f200 808f 	bhi.w	8007358 <_dtoa_r+0x2f0>
 800723a:	e8df f003 	tbb	[pc, r3]
 800723e:	7f7d      	.short	0x7f7d
 8007240:	7131      	.short	0x7131
 8007242:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007246:	441d      	add	r5, r3
 8007248:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800724c:	2820      	cmp	r0, #32
 800724e:	dd13      	ble.n	8007278 <_dtoa_r+0x210>
 8007250:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007254:	9b00      	ldr	r3, [sp, #0]
 8007256:	fa08 f800 	lsl.w	r8, r8, r0
 800725a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800725e:	fa23 f000 	lsr.w	r0, r3, r0
 8007262:	ea48 0000 	orr.w	r0, r8, r0
 8007266:	f7f9 f955 	bl	8000514 <__aeabi_ui2d>
 800726a:	2301      	movs	r3, #1
 800726c:	4682      	mov	sl, r0
 800726e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007272:	3d01      	subs	r5, #1
 8007274:	9313      	str	r3, [sp, #76]	; 0x4c
 8007276:	e772      	b.n	800715e <_dtoa_r+0xf6>
 8007278:	9b00      	ldr	r3, [sp, #0]
 800727a:	f1c0 0020 	rsb	r0, r0, #32
 800727e:	fa03 f000 	lsl.w	r0, r3, r0
 8007282:	e7f0      	b.n	8007266 <_dtoa_r+0x1fe>
 8007284:	2301      	movs	r3, #1
 8007286:	e7b1      	b.n	80071ec <_dtoa_r+0x184>
 8007288:	900f      	str	r0, [sp, #60]	; 0x3c
 800728a:	e7b0      	b.n	80071ee <_dtoa_r+0x186>
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	eba3 030a 	sub.w	r3, r3, sl
 8007292:	9305      	str	r3, [sp, #20]
 8007294:	f1ca 0300 	rsb	r3, sl, #0
 8007298:	9307      	str	r3, [sp, #28]
 800729a:	2300      	movs	r3, #0
 800729c:	930e      	str	r3, [sp, #56]	; 0x38
 800729e:	e7bb      	b.n	8007218 <_dtoa_r+0x1b0>
 80072a0:	2301      	movs	r3, #1
 80072a2:	930a      	str	r3, [sp, #40]	; 0x28
 80072a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd59      	ble.n	800735e <_dtoa_r+0x2f6>
 80072aa:	9302      	str	r3, [sp, #8]
 80072ac:	4699      	mov	r9, r3
 80072ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072b0:	2200      	movs	r2, #0
 80072b2:	6072      	str	r2, [r6, #4]
 80072b4:	2204      	movs	r2, #4
 80072b6:	f102 0014 	add.w	r0, r2, #20
 80072ba:	4298      	cmp	r0, r3
 80072bc:	6871      	ldr	r1, [r6, #4]
 80072be:	d953      	bls.n	8007368 <_dtoa_r+0x300>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fcaa 	bl	8007c1a <_Balloc>
 80072c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c8:	6030      	str	r0, [r6, #0]
 80072ca:	f1b9 0f0e 	cmp.w	r9, #14
 80072ce:	f8d3 b000 	ldr.w	fp, [r3]
 80072d2:	f200 80e6 	bhi.w	80074a2 <_dtoa_r+0x43a>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	f000 80e3 	beq.w	80074a2 <_dtoa_r+0x43a>
 80072dc:	ed9d 7b00 	vldr	d7, [sp]
 80072e0:	f1ba 0f00 	cmp.w	sl, #0
 80072e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80072e8:	dd74      	ble.n	80073d4 <_dtoa_r+0x36c>
 80072ea:	4a2a      	ldr	r2, [pc, #168]	; (8007394 <_dtoa_r+0x32c>)
 80072ec:	f00a 030f 	and.w	r3, sl, #15
 80072f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072f4:	ed93 7b00 	vldr	d7, [r3]
 80072f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80072fc:	06f0      	lsls	r0, r6, #27
 80072fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007302:	d565      	bpl.n	80073d0 <_dtoa_r+0x368>
 8007304:	4b24      	ldr	r3, [pc, #144]	; (8007398 <_dtoa_r+0x330>)
 8007306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800730a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800730e:	f7f9 faa5 	bl	800085c <__aeabi_ddiv>
 8007312:	e9cd 0100 	strd	r0, r1, [sp]
 8007316:	f006 060f 	and.w	r6, r6, #15
 800731a:	2503      	movs	r5, #3
 800731c:	4f1e      	ldr	r7, [pc, #120]	; (8007398 <_dtoa_r+0x330>)
 800731e:	e04c      	b.n	80073ba <_dtoa_r+0x352>
 8007320:	2301      	movs	r3, #1
 8007322:	930a      	str	r3, [sp, #40]	; 0x28
 8007324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007326:	4453      	add	r3, sl
 8007328:	f103 0901 	add.w	r9, r3, #1
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	464b      	mov	r3, r9
 8007330:	2b01      	cmp	r3, #1
 8007332:	bfb8      	it	lt
 8007334:	2301      	movlt	r3, #1
 8007336:	e7ba      	b.n	80072ae <_dtoa_r+0x246>
 8007338:	2300      	movs	r3, #0
 800733a:	e7b2      	b.n	80072a2 <_dtoa_r+0x23a>
 800733c:	2300      	movs	r3, #0
 800733e:	e7f0      	b.n	8007322 <_dtoa_r+0x2ba>
 8007340:	2501      	movs	r5, #1
 8007342:	2300      	movs	r3, #0
 8007344:	9306      	str	r3, [sp, #24]
 8007346:	950a      	str	r5, [sp, #40]	; 0x28
 8007348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	4699      	mov	r9, r3
 8007350:	2200      	movs	r2, #0
 8007352:	2312      	movs	r3, #18
 8007354:	920b      	str	r2, [sp, #44]	; 0x2c
 8007356:	e7aa      	b.n	80072ae <_dtoa_r+0x246>
 8007358:	2301      	movs	r3, #1
 800735a:	930a      	str	r3, [sp, #40]	; 0x28
 800735c:	e7f4      	b.n	8007348 <_dtoa_r+0x2e0>
 800735e:	2301      	movs	r3, #1
 8007360:	9302      	str	r3, [sp, #8]
 8007362:	4699      	mov	r9, r3
 8007364:	461a      	mov	r2, r3
 8007366:	e7f5      	b.n	8007354 <_dtoa_r+0x2ec>
 8007368:	3101      	adds	r1, #1
 800736a:	6071      	str	r1, [r6, #4]
 800736c:	0052      	lsls	r2, r2, #1
 800736e:	e7a2      	b.n	80072b6 <_dtoa_r+0x24e>
 8007370:	636f4361 	.word	0x636f4361
 8007374:	3fd287a7 	.word	0x3fd287a7
 8007378:	8b60c8b3 	.word	0x8b60c8b3
 800737c:	3fc68a28 	.word	0x3fc68a28
 8007380:	509f79fb 	.word	0x509f79fb
 8007384:	3fd34413 	.word	0x3fd34413
 8007388:	7ff00000 	.word	0x7ff00000
 800738c:	080097e5 	.word	0x080097e5
 8007390:	3ff80000 	.word	0x3ff80000
 8007394:	08009840 	.word	0x08009840
 8007398:	08009818 	.word	0x08009818
 800739c:	08009811 	.word	0x08009811
 80073a0:	07f1      	lsls	r1, r6, #31
 80073a2:	d508      	bpl.n	80073b6 <_dtoa_r+0x34e>
 80073a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ac:	f7f9 f92c 	bl	8000608 <__aeabi_dmul>
 80073b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073b4:	3501      	adds	r5, #1
 80073b6:	1076      	asrs	r6, r6, #1
 80073b8:	3708      	adds	r7, #8
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d1f0      	bne.n	80073a0 <_dtoa_r+0x338>
 80073be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c6:	f7f9 fa49 	bl	800085c <__aeabi_ddiv>
 80073ca:	e9cd 0100 	strd	r0, r1, [sp]
 80073ce:	e01a      	b.n	8007406 <_dtoa_r+0x39e>
 80073d0:	2502      	movs	r5, #2
 80073d2:	e7a3      	b.n	800731c <_dtoa_r+0x2b4>
 80073d4:	f000 80a0 	beq.w	8007518 <_dtoa_r+0x4b0>
 80073d8:	f1ca 0600 	rsb	r6, sl, #0
 80073dc:	4b9f      	ldr	r3, [pc, #636]	; (800765c <_dtoa_r+0x5f4>)
 80073de:	4fa0      	ldr	r7, [pc, #640]	; (8007660 <_dtoa_r+0x5f8>)
 80073e0:	f006 020f 	and.w	r2, r6, #15
 80073e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073f0:	f7f9 f90a 	bl	8000608 <__aeabi_dmul>
 80073f4:	e9cd 0100 	strd	r0, r1, [sp]
 80073f8:	1136      	asrs	r6, r6, #4
 80073fa:	2300      	movs	r3, #0
 80073fc:	2502      	movs	r5, #2
 80073fe:	2e00      	cmp	r6, #0
 8007400:	d17f      	bne.n	8007502 <_dtoa_r+0x49a>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e1      	bne.n	80073ca <_dtoa_r+0x362>
 8007406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8087 	beq.w	800751c <_dtoa_r+0x4b4>
 800740e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007412:	2200      	movs	r2, #0
 8007414:	4b93      	ldr	r3, [pc, #588]	; (8007664 <_dtoa_r+0x5fc>)
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fb67 	bl	8000aec <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d07c      	beq.n	800751c <_dtoa_r+0x4b4>
 8007422:	f1b9 0f00 	cmp.w	r9, #0
 8007426:	d079      	beq.n	800751c <_dtoa_r+0x4b4>
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd35      	ble.n	800749a <_dtoa_r+0x432>
 800742e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007432:	9308      	str	r3, [sp, #32]
 8007434:	4639      	mov	r1, r7
 8007436:	2200      	movs	r2, #0
 8007438:	4b8b      	ldr	r3, [pc, #556]	; (8007668 <_dtoa_r+0x600>)
 800743a:	4630      	mov	r0, r6
 800743c:	f7f9 f8e4 	bl	8000608 <__aeabi_dmul>
 8007440:	e9cd 0100 	strd	r0, r1, [sp]
 8007444:	9f02      	ldr	r7, [sp, #8]
 8007446:	3501      	adds	r5, #1
 8007448:	4628      	mov	r0, r5
 800744a:	f7f9 f873 	bl	8000534 <__aeabi_i2d>
 800744e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007452:	f7f9 f8d9 	bl	8000608 <__aeabi_dmul>
 8007456:	2200      	movs	r2, #0
 8007458:	4b84      	ldr	r3, [pc, #528]	; (800766c <_dtoa_r+0x604>)
 800745a:	f7f8 ff1f 	bl	800029c <__adddf3>
 800745e:	4605      	mov	r5, r0
 8007460:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007464:	2f00      	cmp	r7, #0
 8007466:	d15d      	bne.n	8007524 <_dtoa_r+0x4bc>
 8007468:	2200      	movs	r2, #0
 800746a:	4b81      	ldr	r3, [pc, #516]	; (8007670 <_dtoa_r+0x608>)
 800746c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007470:	f7f8 ff12 	bl	8000298 <__aeabi_dsub>
 8007474:	462a      	mov	r2, r5
 8007476:	4633      	mov	r3, r6
 8007478:	e9cd 0100 	strd	r0, r1, [sp]
 800747c:	f7f9 fb54 	bl	8000b28 <__aeabi_dcmpgt>
 8007480:	2800      	cmp	r0, #0
 8007482:	f040 8288 	bne.w	8007996 <_dtoa_r+0x92e>
 8007486:	462a      	mov	r2, r5
 8007488:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800748c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007490:	f7f9 fb2c 	bl	8000aec <__aeabi_dcmplt>
 8007494:	2800      	cmp	r0, #0
 8007496:	f040 827c 	bne.w	8007992 <_dtoa_r+0x92a>
 800749a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800749e:	e9cd 2300 	strd	r2, r3, [sp]
 80074a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f2c0 8150 	blt.w	800774a <_dtoa_r+0x6e2>
 80074aa:	f1ba 0f0e 	cmp.w	sl, #14
 80074ae:	f300 814c 	bgt.w	800774a <_dtoa_r+0x6e2>
 80074b2:	4b6a      	ldr	r3, [pc, #424]	; (800765c <_dtoa_r+0x5f4>)
 80074b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074b8:	ed93 7b00 	vldr	d7, [r3]
 80074bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074c4:	f280 80d8 	bge.w	8007678 <_dtoa_r+0x610>
 80074c8:	f1b9 0f00 	cmp.w	r9, #0
 80074cc:	f300 80d4 	bgt.w	8007678 <_dtoa_r+0x610>
 80074d0:	f040 825e 	bne.w	8007990 <_dtoa_r+0x928>
 80074d4:	2200      	movs	r2, #0
 80074d6:	4b66      	ldr	r3, [pc, #408]	; (8007670 <_dtoa_r+0x608>)
 80074d8:	ec51 0b17 	vmov	r0, r1, d7
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074e4:	f7f9 fb16 	bl	8000b14 <__aeabi_dcmpge>
 80074e8:	464f      	mov	r7, r9
 80074ea:	464e      	mov	r6, r9
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 8234 	bne.w	800795a <_dtoa_r+0x8f2>
 80074f2:	2331      	movs	r3, #49	; 0x31
 80074f4:	f10b 0501 	add.w	r5, fp, #1
 80074f8:	f88b 3000 	strb.w	r3, [fp]
 80074fc:	f10a 0a01 	add.w	sl, sl, #1
 8007500:	e22f      	b.n	8007962 <_dtoa_r+0x8fa>
 8007502:	07f2      	lsls	r2, r6, #31
 8007504:	d505      	bpl.n	8007512 <_dtoa_r+0x4aa>
 8007506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750a:	f7f9 f87d 	bl	8000608 <__aeabi_dmul>
 800750e:	3501      	adds	r5, #1
 8007510:	2301      	movs	r3, #1
 8007512:	1076      	asrs	r6, r6, #1
 8007514:	3708      	adds	r7, #8
 8007516:	e772      	b.n	80073fe <_dtoa_r+0x396>
 8007518:	2502      	movs	r5, #2
 800751a:	e774      	b.n	8007406 <_dtoa_r+0x39e>
 800751c:	f8cd a020 	str.w	sl, [sp, #32]
 8007520:	464f      	mov	r7, r9
 8007522:	e791      	b.n	8007448 <_dtoa_r+0x3e0>
 8007524:	4b4d      	ldr	r3, [pc, #308]	; (800765c <_dtoa_r+0x5f4>)
 8007526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800752a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	d047      	beq.n	80075c4 <_dtoa_r+0x55c>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	2000      	movs	r0, #0
 800753a:	494e      	ldr	r1, [pc, #312]	; (8007674 <_dtoa_r+0x60c>)
 800753c:	f7f9 f98e 	bl	800085c <__aeabi_ddiv>
 8007540:	462a      	mov	r2, r5
 8007542:	4633      	mov	r3, r6
 8007544:	f7f8 fea8 	bl	8000298 <__aeabi_dsub>
 8007548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800754c:	465d      	mov	r5, fp
 800754e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007552:	f7f9 fb09 	bl	8000b68 <__aeabi_d2iz>
 8007556:	4606      	mov	r6, r0
 8007558:	f7f8 ffec 	bl	8000534 <__aeabi_i2d>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007564:	f7f8 fe98 	bl	8000298 <__aeabi_dsub>
 8007568:	3630      	adds	r6, #48	; 0x30
 800756a:	f805 6b01 	strb.w	r6, [r5], #1
 800756e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007572:	e9cd 0100 	strd	r0, r1, [sp]
 8007576:	f7f9 fab9 	bl	8000aec <__aeabi_dcmplt>
 800757a:	2800      	cmp	r0, #0
 800757c:	d163      	bne.n	8007646 <_dtoa_r+0x5de>
 800757e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007582:	2000      	movs	r0, #0
 8007584:	4937      	ldr	r1, [pc, #220]	; (8007664 <_dtoa_r+0x5fc>)
 8007586:	f7f8 fe87 	bl	8000298 <__aeabi_dsub>
 800758a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800758e:	f7f9 faad 	bl	8000aec <__aeabi_dcmplt>
 8007592:	2800      	cmp	r0, #0
 8007594:	f040 80b7 	bne.w	8007706 <_dtoa_r+0x69e>
 8007598:	eba5 030b 	sub.w	r3, r5, fp
 800759c:	429f      	cmp	r7, r3
 800759e:	f77f af7c 	ble.w	800749a <_dtoa_r+0x432>
 80075a2:	2200      	movs	r2, #0
 80075a4:	4b30      	ldr	r3, [pc, #192]	; (8007668 <_dtoa_r+0x600>)
 80075a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075aa:	f7f9 f82d 	bl	8000608 <__aeabi_dmul>
 80075ae:	2200      	movs	r2, #0
 80075b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075b4:	4b2c      	ldr	r3, [pc, #176]	; (8007668 <_dtoa_r+0x600>)
 80075b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ba:	f7f9 f825 	bl	8000608 <__aeabi_dmul>
 80075be:	e9cd 0100 	strd	r0, r1, [sp]
 80075c2:	e7c4      	b.n	800754e <_dtoa_r+0x4e6>
 80075c4:	462a      	mov	r2, r5
 80075c6:	4633      	mov	r3, r6
 80075c8:	f7f9 f81e 	bl	8000608 <__aeabi_dmul>
 80075cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075d0:	eb0b 0507 	add.w	r5, fp, r7
 80075d4:	465e      	mov	r6, fp
 80075d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075da:	f7f9 fac5 	bl	8000b68 <__aeabi_d2iz>
 80075de:	4607      	mov	r7, r0
 80075e0:	f7f8 ffa8 	bl	8000534 <__aeabi_i2d>
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ee:	f7f8 fe53 	bl	8000298 <__aeabi_dsub>
 80075f2:	f806 7b01 	strb.w	r7, [r6], #1
 80075f6:	42ae      	cmp	r6, r5
 80075f8:	e9cd 0100 	strd	r0, r1, [sp]
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	d126      	bne.n	8007650 <_dtoa_r+0x5e8>
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <_dtoa_r+0x60c>)
 8007604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007608:	f7f8 fe48 	bl	800029c <__adddf3>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007614:	f7f9 fa88 	bl	8000b28 <__aeabi_dcmpgt>
 8007618:	2800      	cmp	r0, #0
 800761a:	d174      	bne.n	8007706 <_dtoa_r+0x69e>
 800761c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007620:	2000      	movs	r0, #0
 8007622:	4914      	ldr	r1, [pc, #80]	; (8007674 <_dtoa_r+0x60c>)
 8007624:	f7f8 fe38 	bl	8000298 <__aeabi_dsub>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007630:	f7f9 fa5c 	bl	8000aec <__aeabi_dcmplt>
 8007634:	2800      	cmp	r0, #0
 8007636:	f43f af30 	beq.w	800749a <_dtoa_r+0x432>
 800763a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800763e:	2b30      	cmp	r3, #48	; 0x30
 8007640:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007644:	d002      	beq.n	800764c <_dtoa_r+0x5e4>
 8007646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800764a:	e04a      	b.n	80076e2 <_dtoa_r+0x67a>
 800764c:	4615      	mov	r5, r2
 800764e:	e7f4      	b.n	800763a <_dtoa_r+0x5d2>
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <_dtoa_r+0x600>)
 8007652:	f7f8 ffd9 	bl	8000608 <__aeabi_dmul>
 8007656:	e9cd 0100 	strd	r0, r1, [sp]
 800765a:	e7bc      	b.n	80075d6 <_dtoa_r+0x56e>
 800765c:	08009840 	.word	0x08009840
 8007660:	08009818 	.word	0x08009818
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	40240000 	.word	0x40240000
 800766c:	401c0000 	.word	0x401c0000
 8007670:	40140000 	.word	0x40140000
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	e9dd 6700 	ldrd	r6, r7, [sp]
 800767c:	465d      	mov	r5, fp
 800767e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f9 f8e9 	bl	800085c <__aeabi_ddiv>
 800768a:	f7f9 fa6d 	bl	8000b68 <__aeabi_d2iz>
 800768e:	4680      	mov	r8, r0
 8007690:	f7f8 ff50 	bl	8000534 <__aeabi_i2d>
 8007694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007698:	f7f8 ffb6 	bl	8000608 <__aeabi_dmul>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80076a8:	f7f8 fdf6 	bl	8000298 <__aeabi_dsub>
 80076ac:	f805 6b01 	strb.w	r6, [r5], #1
 80076b0:	eba5 060b 	sub.w	r6, r5, fp
 80076b4:	45b1      	cmp	r9, r6
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	d139      	bne.n	8007730 <_dtoa_r+0x6c8>
 80076bc:	f7f8 fdee 	bl	800029c <__adddf3>
 80076c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	f7f9 fa2e 	bl	8000b28 <__aeabi_dcmpgt>
 80076cc:	b9c8      	cbnz	r0, 8007702 <_dtoa_r+0x69a>
 80076ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	f7f9 f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80076da:	b110      	cbz	r0, 80076e2 <_dtoa_r+0x67a>
 80076dc:	f018 0f01 	tst.w	r8, #1
 80076e0:	d10f      	bne.n	8007702 <_dtoa_r+0x69a>
 80076e2:	9904      	ldr	r1, [sp, #16]
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 facc 	bl	8007c82 <_Bfree>
 80076ea:	2300      	movs	r3, #0
 80076ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ee:	702b      	strb	r3, [r5, #0]
 80076f0:	f10a 0301 	add.w	r3, sl, #1
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8241 	beq.w	8007b80 <_dtoa_r+0xb18>
 80076fe:	601d      	str	r5, [r3, #0]
 8007700:	e23e      	b.n	8007b80 <_dtoa_r+0xb18>
 8007702:	f8cd a020 	str.w	sl, [sp, #32]
 8007706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800770a:	2a39      	cmp	r2, #57	; 0x39
 800770c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007710:	d108      	bne.n	8007724 <_dtoa_r+0x6bc>
 8007712:	459b      	cmp	fp, r3
 8007714:	d10a      	bne.n	800772c <_dtoa_r+0x6c4>
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	3301      	adds	r3, #1
 800771a:	9308      	str	r3, [sp, #32]
 800771c:	2330      	movs	r3, #48	; 0x30
 800771e:	f88b 3000 	strb.w	r3, [fp]
 8007722:	465b      	mov	r3, fp
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	3201      	adds	r2, #1
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e78c      	b.n	8007646 <_dtoa_r+0x5de>
 800772c:	461d      	mov	r5, r3
 800772e:	e7ea      	b.n	8007706 <_dtoa_r+0x69e>
 8007730:	2200      	movs	r2, #0
 8007732:	4b9b      	ldr	r3, [pc, #620]	; (80079a0 <_dtoa_r+0x938>)
 8007734:	f7f8 ff68 	bl	8000608 <__aeabi_dmul>
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	f7f9 f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007744:	2800      	cmp	r0, #0
 8007746:	d09a      	beq.n	800767e <_dtoa_r+0x616>
 8007748:	e7cb      	b.n	80076e2 <_dtoa_r+0x67a>
 800774a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800774c:	2a00      	cmp	r2, #0
 800774e:	f000 808b 	beq.w	8007868 <_dtoa_r+0x800>
 8007752:	9a06      	ldr	r2, [sp, #24]
 8007754:	2a01      	cmp	r2, #1
 8007756:	dc6e      	bgt.n	8007836 <_dtoa_r+0x7ce>
 8007758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800775a:	2a00      	cmp	r2, #0
 800775c:	d067      	beq.n	800782e <_dtoa_r+0x7c6>
 800775e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007762:	9f07      	ldr	r7, [sp, #28]
 8007764:	9d05      	ldr	r5, [sp, #20]
 8007766:	9a05      	ldr	r2, [sp, #20]
 8007768:	2101      	movs	r1, #1
 800776a:	441a      	add	r2, r3
 800776c:	4620      	mov	r0, r4
 800776e:	9205      	str	r2, [sp, #20]
 8007770:	4498      	add	r8, r3
 8007772:	f000 fb26 	bl	8007dc2 <__i2b>
 8007776:	4606      	mov	r6, r0
 8007778:	2d00      	cmp	r5, #0
 800777a:	dd0c      	ble.n	8007796 <_dtoa_r+0x72e>
 800777c:	f1b8 0f00 	cmp.w	r8, #0
 8007780:	dd09      	ble.n	8007796 <_dtoa_r+0x72e>
 8007782:	4545      	cmp	r5, r8
 8007784:	9a05      	ldr	r2, [sp, #20]
 8007786:	462b      	mov	r3, r5
 8007788:	bfa8      	it	ge
 800778a:	4643      	movge	r3, r8
 800778c:	1ad2      	subs	r2, r2, r3
 800778e:	9205      	str	r2, [sp, #20]
 8007790:	1aed      	subs	r5, r5, r3
 8007792:	eba8 0803 	sub.w	r8, r8, r3
 8007796:	9b07      	ldr	r3, [sp, #28]
 8007798:	b1eb      	cbz	r3, 80077d6 <_dtoa_r+0x76e>
 800779a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779c:	2b00      	cmp	r3, #0
 800779e:	d067      	beq.n	8007870 <_dtoa_r+0x808>
 80077a0:	b18f      	cbz	r7, 80077c6 <_dtoa_r+0x75e>
 80077a2:	4631      	mov	r1, r6
 80077a4:	463a      	mov	r2, r7
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fbaa 	bl	8007f00 <__pow5mult>
 80077ac:	9a04      	ldr	r2, [sp, #16]
 80077ae:	4601      	mov	r1, r0
 80077b0:	4606      	mov	r6, r0
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fb0e 	bl	8007dd4 <__multiply>
 80077b8:	9904      	ldr	r1, [sp, #16]
 80077ba:	9008      	str	r0, [sp, #32]
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fa60 	bl	8007c82 <_Bfree>
 80077c2:	9b08      	ldr	r3, [sp, #32]
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	9b07      	ldr	r3, [sp, #28]
 80077c8:	1bda      	subs	r2, r3, r7
 80077ca:	d004      	beq.n	80077d6 <_dtoa_r+0x76e>
 80077cc:	9904      	ldr	r1, [sp, #16]
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 fb96 	bl	8007f00 <__pow5mult>
 80077d4:	9004      	str	r0, [sp, #16]
 80077d6:	2101      	movs	r1, #1
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 faf2 	bl	8007dc2 <__i2b>
 80077de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e0:	4607      	mov	r7, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 81d0 	beq.w	8007b88 <_dtoa_r+0xb20>
 80077e8:	461a      	mov	r2, r3
 80077ea:	4601      	mov	r1, r0
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fb87 	bl	8007f00 <__pow5mult>
 80077f2:	9b06      	ldr	r3, [sp, #24]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	4607      	mov	r7, r0
 80077f8:	dc40      	bgt.n	800787c <_dtoa_r+0x814>
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d139      	bne.n	8007874 <_dtoa_r+0x80c>
 8007800:	9b01      	ldr	r3, [sp, #4]
 8007802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007806:	2b00      	cmp	r3, #0
 8007808:	d136      	bne.n	8007878 <_dtoa_r+0x810>
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007810:	0d1b      	lsrs	r3, r3, #20
 8007812:	051b      	lsls	r3, r3, #20
 8007814:	b12b      	cbz	r3, 8007822 <_dtoa_r+0x7ba>
 8007816:	9b05      	ldr	r3, [sp, #20]
 8007818:	3301      	adds	r3, #1
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	f108 0801 	add.w	r8, r8, #1
 8007820:	2301      	movs	r3, #1
 8007822:	9307      	str	r3, [sp, #28]
 8007824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007826:	2b00      	cmp	r3, #0
 8007828:	d12a      	bne.n	8007880 <_dtoa_r+0x818>
 800782a:	2001      	movs	r0, #1
 800782c:	e030      	b.n	8007890 <_dtoa_r+0x828>
 800782e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007830:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007834:	e795      	b.n	8007762 <_dtoa_r+0x6fa>
 8007836:	9b07      	ldr	r3, [sp, #28]
 8007838:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800783c:	42bb      	cmp	r3, r7
 800783e:	bfbf      	itttt	lt
 8007840:	9b07      	ldrlt	r3, [sp, #28]
 8007842:	9707      	strlt	r7, [sp, #28]
 8007844:	1afa      	sublt	r2, r7, r3
 8007846:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007848:	bfbb      	ittet	lt
 800784a:	189b      	addlt	r3, r3, r2
 800784c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800784e:	1bdf      	subge	r7, r3, r7
 8007850:	2700      	movlt	r7, #0
 8007852:	f1b9 0f00 	cmp.w	r9, #0
 8007856:	bfb5      	itete	lt
 8007858:	9b05      	ldrlt	r3, [sp, #20]
 800785a:	9d05      	ldrge	r5, [sp, #20]
 800785c:	eba3 0509 	sublt.w	r5, r3, r9
 8007860:	464b      	movge	r3, r9
 8007862:	bfb8      	it	lt
 8007864:	2300      	movlt	r3, #0
 8007866:	e77e      	b.n	8007766 <_dtoa_r+0x6fe>
 8007868:	9f07      	ldr	r7, [sp, #28]
 800786a:	9d05      	ldr	r5, [sp, #20]
 800786c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800786e:	e783      	b.n	8007778 <_dtoa_r+0x710>
 8007870:	9a07      	ldr	r2, [sp, #28]
 8007872:	e7ab      	b.n	80077cc <_dtoa_r+0x764>
 8007874:	2300      	movs	r3, #0
 8007876:	e7d4      	b.n	8007822 <_dtoa_r+0x7ba>
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	e7d2      	b.n	8007822 <_dtoa_r+0x7ba>
 800787c:	2300      	movs	r3, #0
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007886:	6918      	ldr	r0, [r3, #16]
 8007888:	f000 fa4d 	bl	8007d26 <__hi0bits>
 800788c:	f1c0 0020 	rsb	r0, r0, #32
 8007890:	4440      	add	r0, r8
 8007892:	f010 001f 	ands.w	r0, r0, #31
 8007896:	d047      	beq.n	8007928 <_dtoa_r+0x8c0>
 8007898:	f1c0 0320 	rsb	r3, r0, #32
 800789c:	2b04      	cmp	r3, #4
 800789e:	dd3b      	ble.n	8007918 <_dtoa_r+0x8b0>
 80078a0:	9b05      	ldr	r3, [sp, #20]
 80078a2:	f1c0 001c 	rsb	r0, r0, #28
 80078a6:	4403      	add	r3, r0
 80078a8:	9305      	str	r3, [sp, #20]
 80078aa:	4405      	add	r5, r0
 80078ac:	4480      	add	r8, r0
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd05      	ble.n	80078c0 <_dtoa_r+0x858>
 80078b4:	461a      	mov	r2, r3
 80078b6:	9904      	ldr	r1, [sp, #16]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fb6f 	bl	8007f9c <__lshift>
 80078be:	9004      	str	r0, [sp, #16]
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	dd05      	ble.n	80078d2 <_dtoa_r+0x86a>
 80078c6:	4639      	mov	r1, r7
 80078c8:	4642      	mov	r2, r8
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fb66 	bl	8007f9c <__lshift>
 80078d0:	4607      	mov	r7, r0
 80078d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d4:	b353      	cbz	r3, 800792c <_dtoa_r+0x8c4>
 80078d6:	4639      	mov	r1, r7
 80078d8:	9804      	ldr	r0, [sp, #16]
 80078da:	f000 fbb3 	bl	8008044 <__mcmp>
 80078de:	2800      	cmp	r0, #0
 80078e0:	da24      	bge.n	800792c <_dtoa_r+0x8c4>
 80078e2:	2300      	movs	r3, #0
 80078e4:	220a      	movs	r2, #10
 80078e6:	9904      	ldr	r1, [sp, #16]
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 f9e1 	bl	8007cb0 <__multadd>
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	9004      	str	r0, [sp, #16]
 80078f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 814d 	beq.w	8007b96 <_dtoa_r+0xb2e>
 80078fc:	2300      	movs	r3, #0
 80078fe:	4631      	mov	r1, r6
 8007900:	220a      	movs	r2, #10
 8007902:	4620      	mov	r0, r4
 8007904:	f000 f9d4 	bl	8007cb0 <__multadd>
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	4606      	mov	r6, r0
 800790e:	dc4f      	bgt.n	80079b0 <_dtoa_r+0x948>
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	2b02      	cmp	r3, #2
 8007914:	dd4c      	ble.n	80079b0 <_dtoa_r+0x948>
 8007916:	e011      	b.n	800793c <_dtoa_r+0x8d4>
 8007918:	d0c9      	beq.n	80078ae <_dtoa_r+0x846>
 800791a:	9a05      	ldr	r2, [sp, #20]
 800791c:	331c      	adds	r3, #28
 800791e:	441a      	add	r2, r3
 8007920:	9205      	str	r2, [sp, #20]
 8007922:	441d      	add	r5, r3
 8007924:	4498      	add	r8, r3
 8007926:	e7c2      	b.n	80078ae <_dtoa_r+0x846>
 8007928:	4603      	mov	r3, r0
 800792a:	e7f6      	b.n	800791a <_dtoa_r+0x8b2>
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	dc38      	bgt.n	80079a4 <_dtoa_r+0x93c>
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	2b02      	cmp	r3, #2
 8007936:	dd35      	ble.n	80079a4 <_dtoa_r+0x93c>
 8007938:	f8cd 9008 	str.w	r9, [sp, #8]
 800793c:	9b02      	ldr	r3, [sp, #8]
 800793e:	b963      	cbnz	r3, 800795a <_dtoa_r+0x8f2>
 8007940:	4639      	mov	r1, r7
 8007942:	2205      	movs	r2, #5
 8007944:	4620      	mov	r0, r4
 8007946:	f000 f9b3 	bl	8007cb0 <__multadd>
 800794a:	4601      	mov	r1, r0
 800794c:	4607      	mov	r7, r0
 800794e:	9804      	ldr	r0, [sp, #16]
 8007950:	f000 fb78 	bl	8008044 <__mcmp>
 8007954:	2800      	cmp	r0, #0
 8007956:	f73f adcc 	bgt.w	80074f2 <_dtoa_r+0x48a>
 800795a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795c:	465d      	mov	r5, fp
 800795e:	ea6f 0a03 	mvn.w	sl, r3
 8007962:	f04f 0900 	mov.w	r9, #0
 8007966:	4639      	mov	r1, r7
 8007968:	4620      	mov	r0, r4
 800796a:	f000 f98a 	bl	8007c82 <_Bfree>
 800796e:	2e00      	cmp	r6, #0
 8007970:	f43f aeb7 	beq.w	80076e2 <_dtoa_r+0x67a>
 8007974:	f1b9 0f00 	cmp.w	r9, #0
 8007978:	d005      	beq.n	8007986 <_dtoa_r+0x91e>
 800797a:	45b1      	cmp	r9, r6
 800797c:	d003      	beq.n	8007986 <_dtoa_r+0x91e>
 800797e:	4649      	mov	r1, r9
 8007980:	4620      	mov	r0, r4
 8007982:	f000 f97e 	bl	8007c82 <_Bfree>
 8007986:	4631      	mov	r1, r6
 8007988:	4620      	mov	r0, r4
 800798a:	f000 f97a 	bl	8007c82 <_Bfree>
 800798e:	e6a8      	b.n	80076e2 <_dtoa_r+0x67a>
 8007990:	2700      	movs	r7, #0
 8007992:	463e      	mov	r6, r7
 8007994:	e7e1      	b.n	800795a <_dtoa_r+0x8f2>
 8007996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800799a:	463e      	mov	r6, r7
 800799c:	e5a9      	b.n	80074f2 <_dtoa_r+0x48a>
 800799e:	bf00      	nop
 80079a0:	40240000 	.word	0x40240000
 80079a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 80fa 	beq.w	8007ba4 <_dtoa_r+0xb3c>
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	dd05      	ble.n	80079c0 <_dtoa_r+0x958>
 80079b4:	4631      	mov	r1, r6
 80079b6:	462a      	mov	r2, r5
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 faef 	bl	8007f9c <__lshift>
 80079be:	4606      	mov	r6, r0
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d04c      	beq.n	8007a60 <_dtoa_r+0x9f8>
 80079c6:	6871      	ldr	r1, [r6, #4]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 f926 	bl	8007c1a <_Balloc>
 80079ce:	6932      	ldr	r2, [r6, #16]
 80079d0:	3202      	adds	r2, #2
 80079d2:	4605      	mov	r5, r0
 80079d4:	0092      	lsls	r2, r2, #2
 80079d6:	f106 010c 	add.w	r1, r6, #12
 80079da:	300c      	adds	r0, #12
 80079dc:	f000 f912 	bl	8007c04 <memcpy>
 80079e0:	2201      	movs	r2, #1
 80079e2:	4629      	mov	r1, r5
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fad9 	bl	8007f9c <__lshift>
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	f8cd b014 	str.w	fp, [sp, #20]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	46b1      	mov	r9, r6
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	4606      	mov	r6, r0
 80079fa:	4639      	mov	r1, r7
 80079fc:	9804      	ldr	r0, [sp, #16]
 80079fe:	f7ff faa5 	bl	8006f4c <quorem>
 8007a02:	4649      	mov	r1, r9
 8007a04:	4605      	mov	r5, r0
 8007a06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a0a:	9804      	ldr	r0, [sp, #16]
 8007a0c:	f000 fb1a 	bl	8008044 <__mcmp>
 8007a10:	4632      	mov	r2, r6
 8007a12:	9000      	str	r0, [sp, #0]
 8007a14:	4639      	mov	r1, r7
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fb2e 	bl	8008078 <__mdiff>
 8007a1c:	68c3      	ldr	r3, [r0, #12]
 8007a1e:	4602      	mov	r2, r0
 8007a20:	bb03      	cbnz	r3, 8007a64 <_dtoa_r+0x9fc>
 8007a22:	4601      	mov	r1, r0
 8007a24:	9008      	str	r0, [sp, #32]
 8007a26:	9804      	ldr	r0, [sp, #16]
 8007a28:	f000 fb0c 	bl	8008044 <__mcmp>
 8007a2c:	9a08      	ldr	r2, [sp, #32]
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4611      	mov	r1, r2
 8007a32:	4620      	mov	r0, r4
 8007a34:	9308      	str	r3, [sp, #32]
 8007a36:	f000 f924 	bl	8007c82 <_Bfree>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	b9a3      	cbnz	r3, 8007a68 <_dtoa_r+0xa00>
 8007a3e:	9a06      	ldr	r2, [sp, #24]
 8007a40:	b992      	cbnz	r2, 8007a68 <_dtoa_r+0xa00>
 8007a42:	9a07      	ldr	r2, [sp, #28]
 8007a44:	b982      	cbnz	r2, 8007a68 <_dtoa_r+0xa00>
 8007a46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a4a:	d029      	beq.n	8007aa0 <_dtoa_r+0xa38>
 8007a4c:	9b00      	ldr	r3, [sp, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd01      	ble.n	8007a56 <_dtoa_r+0x9ee>
 8007a52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007a56:	9b05      	ldr	r3, [sp, #20]
 8007a58:	1c5d      	adds	r5, r3, #1
 8007a5a:	f883 8000 	strb.w	r8, [r3]
 8007a5e:	e782      	b.n	8007966 <_dtoa_r+0x8fe>
 8007a60:	4630      	mov	r0, r6
 8007a62:	e7c2      	b.n	80079ea <_dtoa_r+0x982>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e7e3      	b.n	8007a30 <_dtoa_r+0x9c8>
 8007a68:	9a00      	ldr	r2, [sp, #0]
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	db04      	blt.n	8007a78 <_dtoa_r+0xa10>
 8007a6e:	d125      	bne.n	8007abc <_dtoa_r+0xa54>
 8007a70:	9a06      	ldr	r2, [sp, #24]
 8007a72:	bb1a      	cbnz	r2, 8007abc <_dtoa_r+0xa54>
 8007a74:	9a07      	ldr	r2, [sp, #28]
 8007a76:	bb0a      	cbnz	r2, 8007abc <_dtoa_r+0xa54>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	ddec      	ble.n	8007a56 <_dtoa_r+0x9ee>
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	9904      	ldr	r1, [sp, #16]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fa8b 	bl	8007f9c <__lshift>
 8007a86:	4639      	mov	r1, r7
 8007a88:	9004      	str	r0, [sp, #16]
 8007a8a:	f000 fadb 	bl	8008044 <__mcmp>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	dc03      	bgt.n	8007a9a <_dtoa_r+0xa32>
 8007a92:	d1e0      	bne.n	8007a56 <_dtoa_r+0x9ee>
 8007a94:	f018 0f01 	tst.w	r8, #1
 8007a98:	d0dd      	beq.n	8007a56 <_dtoa_r+0x9ee>
 8007a9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a9e:	d1d8      	bne.n	8007a52 <_dtoa_r+0x9ea>
 8007aa0:	9b05      	ldr	r3, [sp, #20]
 8007aa2:	9a05      	ldr	r2, [sp, #20]
 8007aa4:	1c5d      	adds	r5, r3, #1
 8007aa6:	2339      	movs	r3, #57	; 0x39
 8007aa8:	7013      	strb	r3, [r2, #0]
 8007aaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aae:	2b39      	cmp	r3, #57	; 0x39
 8007ab0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007ab4:	d04f      	beq.n	8007b56 <_dtoa_r+0xaee>
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	7013      	strb	r3, [r2, #0]
 8007aba:	e754      	b.n	8007966 <_dtoa_r+0x8fe>
 8007abc:	9a05      	ldr	r2, [sp, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f102 0501 	add.w	r5, r2, #1
 8007ac4:	dd06      	ble.n	8007ad4 <_dtoa_r+0xa6c>
 8007ac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007aca:	d0e9      	beq.n	8007aa0 <_dtoa_r+0xa38>
 8007acc:	f108 0801 	add.w	r8, r8, #1
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	e7c2      	b.n	8007a5a <_dtoa_r+0x9f2>
 8007ad4:	9a02      	ldr	r2, [sp, #8]
 8007ad6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007ada:	eba5 030b 	sub.w	r3, r5, fp
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d021      	beq.n	8007b26 <_dtoa_r+0xabe>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	220a      	movs	r2, #10
 8007ae6:	9904      	ldr	r1, [sp, #16]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 f8e1 	bl	8007cb0 <__multadd>
 8007aee:	45b1      	cmp	r9, r6
 8007af0:	9004      	str	r0, [sp, #16]
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	f04f 020a 	mov.w	r2, #10
 8007afa:	4649      	mov	r1, r9
 8007afc:	4620      	mov	r0, r4
 8007afe:	d105      	bne.n	8007b0c <_dtoa_r+0xaa4>
 8007b00:	f000 f8d6 	bl	8007cb0 <__multadd>
 8007b04:	4681      	mov	r9, r0
 8007b06:	4606      	mov	r6, r0
 8007b08:	9505      	str	r5, [sp, #20]
 8007b0a:	e776      	b.n	80079fa <_dtoa_r+0x992>
 8007b0c:	f000 f8d0 	bl	8007cb0 <__multadd>
 8007b10:	4631      	mov	r1, r6
 8007b12:	4681      	mov	r9, r0
 8007b14:	2300      	movs	r3, #0
 8007b16:	220a      	movs	r2, #10
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 f8c9 	bl	8007cb0 <__multadd>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	e7f2      	b.n	8007b08 <_dtoa_r+0xaa0>
 8007b22:	f04f 0900 	mov.w	r9, #0
 8007b26:	2201      	movs	r2, #1
 8007b28:	9904      	ldr	r1, [sp, #16]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fa36 	bl	8007f9c <__lshift>
 8007b30:	4639      	mov	r1, r7
 8007b32:	9004      	str	r0, [sp, #16]
 8007b34:	f000 fa86 	bl	8008044 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dcb6      	bgt.n	8007aaa <_dtoa_r+0xa42>
 8007b3c:	d102      	bne.n	8007b44 <_dtoa_r+0xadc>
 8007b3e:	f018 0f01 	tst.w	r8, #1
 8007b42:	d1b2      	bne.n	8007aaa <_dtoa_r+0xa42>
 8007b44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007b4e:	f47f af0a 	bne.w	8007966 <_dtoa_r+0x8fe>
 8007b52:	4615      	mov	r5, r2
 8007b54:	e7f6      	b.n	8007b44 <_dtoa_r+0xadc>
 8007b56:	4593      	cmp	fp, r2
 8007b58:	d105      	bne.n	8007b66 <_dtoa_r+0xafe>
 8007b5a:	2331      	movs	r3, #49	; 0x31
 8007b5c:	f10a 0a01 	add.w	sl, sl, #1
 8007b60:	f88b 3000 	strb.w	r3, [fp]
 8007b64:	e6ff      	b.n	8007966 <_dtoa_r+0x8fe>
 8007b66:	4615      	mov	r5, r2
 8007b68:	e79f      	b.n	8007aaa <_dtoa_r+0xa42>
 8007b6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007bd0 <_dtoa_r+0xb68>
 8007b6e:	e007      	b.n	8007b80 <_dtoa_r+0xb18>
 8007b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007bd4 <_dtoa_r+0xb6c>
 8007b76:	b11b      	cbz	r3, 8007b80 <_dtoa_r+0xb18>
 8007b78:	f10b 0308 	add.w	r3, fp, #8
 8007b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	4658      	mov	r0, fp
 8007b82:	b017      	add	sp, #92	; 0x5c
 8007b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	f77f ae35 	ble.w	80077fa <_dtoa_r+0x792>
 8007b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	e649      	b.n	800782a <_dtoa_r+0x7c2>
 8007b96:	9b02      	ldr	r3, [sp, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc03      	bgt.n	8007ba4 <_dtoa_r+0xb3c>
 8007b9c:	9b06      	ldr	r3, [sp, #24]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	f73f aecc 	bgt.w	800793c <_dtoa_r+0x8d4>
 8007ba4:	465d      	mov	r5, fp
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	9804      	ldr	r0, [sp, #16]
 8007baa:	f7ff f9cf 	bl	8006f4c <quorem>
 8007bae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007bb2:	f805 8b01 	strb.w	r8, [r5], #1
 8007bb6:	9a02      	ldr	r2, [sp, #8]
 8007bb8:	eba5 030b 	sub.w	r3, r5, fp
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	ddb0      	ble.n	8007b22 <_dtoa_r+0xaba>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	220a      	movs	r2, #10
 8007bc4:	9904      	ldr	r1, [sp, #16]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 f872 	bl	8007cb0 <__multadd>
 8007bcc:	9004      	str	r0, [sp, #16]
 8007bce:	e7ea      	b.n	8007ba6 <_dtoa_r+0xb3e>
 8007bd0:	080097e4 	.word	0x080097e4
 8007bd4:	08009808 	.word	0x08009808

08007bd8 <_localeconv_r>:
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <_localeconv_r+0x14>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a18      	ldr	r0, [r3, #32]
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <_localeconv_r+0x18>)
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bf08      	it	eq
 8007be4:	4618      	moveq	r0, r3
 8007be6:	30f0      	adds	r0, #240	; 0xf0
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000001c 	.word	0x2000001c
 8007bf0:	20000080 	.word	0x20000080

08007bf4 <malloc>:
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <malloc+0xc>)
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	f000 bb45 	b.w	8008288 <_malloc_r>
 8007bfe:	bf00      	nop
 8007c00:	2000001c 	.word	0x2000001c

08007c04 <memcpy>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	1e43      	subs	r3, r0, #1
 8007c08:	440a      	add	r2, r1
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	d100      	bne.n	8007c10 <memcpy+0xc>
 8007c0e:	bd10      	pop	{r4, pc}
 8007c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c18:	e7f7      	b.n	8007c0a <memcpy+0x6>

08007c1a <_Balloc>:
 8007c1a:	b570      	push	{r4, r5, r6, lr}
 8007c1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460e      	mov	r6, r1
 8007c22:	b93d      	cbnz	r5, 8007c34 <_Balloc+0x1a>
 8007c24:	2010      	movs	r0, #16
 8007c26:	f7ff ffe5 	bl	8007bf4 <malloc>
 8007c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007c2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c30:	6005      	str	r5, [r0, #0]
 8007c32:	60c5      	str	r5, [r0, #12]
 8007c34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c36:	68eb      	ldr	r3, [r5, #12]
 8007c38:	b183      	cbz	r3, 8007c5c <_Balloc+0x42>
 8007c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007c42:	b9b8      	cbnz	r0, 8007c74 <_Balloc+0x5a>
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f506 	lsl.w	r5, r1, r6
 8007c4a:	1d6a      	adds	r2, r5, #5
 8007c4c:	0092      	lsls	r2, r2, #2
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 fabe 	bl	80081d0 <_calloc_r>
 8007c54:	b160      	cbz	r0, 8007c70 <_Balloc+0x56>
 8007c56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007c5a:	e00e      	b.n	8007c7a <_Balloc+0x60>
 8007c5c:	2221      	movs	r2, #33	; 0x21
 8007c5e:	2104      	movs	r1, #4
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 fab5 	bl	80081d0 <_calloc_r>
 8007c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c68:	60e8      	str	r0, [r5, #12]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e4      	bne.n	8007c3a <_Balloc+0x20>
 8007c70:	2000      	movs	r0, #0
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	6802      	ldr	r2, [r0, #0]
 8007c76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c80:	e7f7      	b.n	8007c72 <_Balloc+0x58>

08007c82 <_Bfree>:
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c86:	4606      	mov	r6, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	b93c      	cbnz	r4, 8007c9c <_Bfree+0x1a>
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f7ff ffb1 	bl	8007bf4 <malloc>
 8007c92:	6270      	str	r0, [r6, #36]	; 0x24
 8007c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c98:	6004      	str	r4, [r0, #0]
 8007c9a:	60c4      	str	r4, [r0, #12]
 8007c9c:	b13d      	cbz	r5, 8007cae <_Bfree+0x2c>
 8007c9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ca0:	686a      	ldr	r2, [r5, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ca8:	6029      	str	r1, [r5, #0]
 8007caa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007cae:	bd70      	pop	{r4, r5, r6, pc}

08007cb0 <__multadd>:
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	690d      	ldr	r5, [r1, #16]
 8007cb6:	461f      	mov	r7, r3
 8007cb8:	4606      	mov	r6, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f101 0c14 	add.w	ip, r1, #20
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8dc 0000 	ldr.w	r0, [ip]
 8007cc6:	b281      	uxth	r1, r0
 8007cc8:	fb02 7101 	mla	r1, r2, r1, r7
 8007ccc:	0c0f      	lsrs	r7, r1, #16
 8007cce:	0c00      	lsrs	r0, r0, #16
 8007cd0:	fb02 7000 	mla	r0, r2, r0, r7
 8007cd4:	b289      	uxth	r1, r1
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ce6:	dcec      	bgt.n	8007cc2 <__multadd+0x12>
 8007ce8:	b1d7      	cbz	r7, 8007d20 <__multadd+0x70>
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	42ab      	cmp	r3, r5
 8007cee:	dc12      	bgt.n	8007d16 <__multadd+0x66>
 8007cf0:	6861      	ldr	r1, [r4, #4]
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	f7ff ff90 	bl	8007c1a <_Balloc>
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	3202      	adds	r2, #2
 8007cfe:	f104 010c 	add.w	r1, r4, #12
 8007d02:	4680      	mov	r8, r0
 8007d04:	0092      	lsls	r2, r2, #2
 8007d06:	300c      	adds	r0, #12
 8007d08:	f7ff ff7c 	bl	8007c04 <memcpy>
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ffb7 	bl	8007c82 <_Bfree>
 8007d14:	4644      	mov	r4, r8
 8007d16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d1a:	3501      	adds	r5, #1
 8007d1c:	615f      	str	r7, [r3, #20]
 8007d1e:	6125      	str	r5, [r4, #16]
 8007d20:	4620      	mov	r0, r4
 8007d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d26 <__hi0bits>:
 8007d26:	0c02      	lsrs	r2, r0, #16
 8007d28:	0412      	lsls	r2, r2, #16
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	b9b2      	cbnz	r2, 8007d5c <__hi0bits+0x36>
 8007d2e:	0403      	lsls	r3, r0, #16
 8007d30:	2010      	movs	r0, #16
 8007d32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d36:	bf04      	itt	eq
 8007d38:	021b      	lsleq	r3, r3, #8
 8007d3a:	3008      	addeq	r0, #8
 8007d3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d40:	bf04      	itt	eq
 8007d42:	011b      	lsleq	r3, r3, #4
 8007d44:	3004      	addeq	r0, #4
 8007d46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d4a:	bf04      	itt	eq
 8007d4c:	009b      	lsleq	r3, r3, #2
 8007d4e:	3002      	addeq	r0, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db06      	blt.n	8007d62 <__hi0bits+0x3c>
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	d503      	bpl.n	8007d60 <__hi0bits+0x3a>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	4770      	bx	lr
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e7e8      	b.n	8007d32 <__hi0bits+0xc>
 8007d60:	2020      	movs	r0, #32
 8007d62:	4770      	bx	lr

08007d64 <__lo0bits>:
 8007d64:	6803      	ldr	r3, [r0, #0]
 8007d66:	f013 0207 	ands.w	r2, r3, #7
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	d00b      	beq.n	8007d86 <__lo0bits+0x22>
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d423      	bmi.n	8007dba <__lo0bits+0x56>
 8007d72:	0798      	lsls	r0, r3, #30
 8007d74:	bf49      	itett	mi
 8007d76:	085b      	lsrmi	r3, r3, #1
 8007d78:	089b      	lsrpl	r3, r3, #2
 8007d7a:	2001      	movmi	r0, #1
 8007d7c:	600b      	strmi	r3, [r1, #0]
 8007d7e:	bf5c      	itt	pl
 8007d80:	600b      	strpl	r3, [r1, #0]
 8007d82:	2002      	movpl	r0, #2
 8007d84:	4770      	bx	lr
 8007d86:	b298      	uxth	r0, r3
 8007d88:	b9a8      	cbnz	r0, 8007db6 <__lo0bits+0x52>
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	2010      	movs	r0, #16
 8007d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d92:	bf04      	itt	eq
 8007d94:	0a1b      	lsreq	r3, r3, #8
 8007d96:	3008      	addeq	r0, #8
 8007d98:	071a      	lsls	r2, r3, #28
 8007d9a:	bf04      	itt	eq
 8007d9c:	091b      	lsreq	r3, r3, #4
 8007d9e:	3004      	addeq	r0, #4
 8007da0:	079a      	lsls	r2, r3, #30
 8007da2:	bf04      	itt	eq
 8007da4:	089b      	lsreq	r3, r3, #2
 8007da6:	3002      	addeq	r0, #2
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	d402      	bmi.n	8007db2 <__lo0bits+0x4e>
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	d006      	beq.n	8007dbe <__lo0bits+0x5a>
 8007db0:	3001      	adds	r0, #1
 8007db2:	600b      	str	r3, [r1, #0]
 8007db4:	4770      	bx	lr
 8007db6:	4610      	mov	r0, r2
 8007db8:	e7e9      	b.n	8007d8e <__lo0bits+0x2a>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	4770      	bx	lr
 8007dbe:	2020      	movs	r0, #32
 8007dc0:	4770      	bx	lr

08007dc2 <__i2b>:
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	f7ff ff27 	bl	8007c1a <_Balloc>
 8007dcc:	2201      	movs	r2, #1
 8007dce:	6144      	str	r4, [r0, #20]
 8007dd0:	6102      	str	r2, [r0, #16]
 8007dd2:	bd10      	pop	{r4, pc}

08007dd4 <__multiply>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	4614      	mov	r4, r2
 8007dda:	690a      	ldr	r2, [r1, #16]
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	bfb8      	it	lt
 8007de2:	460b      	movlt	r3, r1
 8007de4:	4688      	mov	r8, r1
 8007de6:	bfbc      	itt	lt
 8007de8:	46a0      	movlt	r8, r4
 8007dea:	461c      	movlt	r4, r3
 8007dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007df0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007df4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dfc:	eb07 0609 	add.w	r6, r7, r9
 8007e00:	42b3      	cmp	r3, r6
 8007e02:	bfb8      	it	lt
 8007e04:	3101      	addlt	r1, #1
 8007e06:	f7ff ff08 	bl	8007c1a <_Balloc>
 8007e0a:	f100 0514 	add.w	r5, r0, #20
 8007e0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e12:	462b      	mov	r3, r5
 8007e14:	2200      	movs	r2, #0
 8007e16:	4573      	cmp	r3, lr
 8007e18:	d316      	bcc.n	8007e48 <__multiply+0x74>
 8007e1a:	f104 0214 	add.w	r2, r4, #20
 8007e1e:	f108 0114 	add.w	r1, r8, #20
 8007e22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007e26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	9201      	str	r2, [sp, #4]
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d80c      	bhi.n	8007e4e <__multiply+0x7a>
 8007e34:	2e00      	cmp	r6, #0
 8007e36:	dd03      	ble.n	8007e40 <__multiply+0x6c>
 8007e38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05d      	beq.n	8007efc <__multiply+0x128>
 8007e40:	6106      	str	r6, [r0, #16]
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	f843 2b04 	str.w	r2, [r3], #4
 8007e4c:	e7e3      	b.n	8007e16 <__multiply+0x42>
 8007e4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e52:	f1bb 0f00 	cmp.w	fp, #0
 8007e56:	d023      	beq.n	8007ea0 <__multiply+0xcc>
 8007e58:	4689      	mov	r9, r1
 8007e5a:	46ac      	mov	ip, r5
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	f859 4b04 	ldr.w	r4, [r9], #4
 8007e64:	f8dc a000 	ldr.w	sl, [ip]
 8007e68:	b2a3      	uxth	r3, r4
 8007e6a:	fa1f fa8a 	uxth.w	sl, sl
 8007e6e:	fb0b a303 	mla	r3, fp, r3, sl
 8007e72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e76:	f8dc 4000 	ldr.w	r4, [ip]
 8007e7a:	4443      	add	r3, r8
 8007e7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e80:	fb0b 840a 	mla	r4, fp, sl, r8
 8007e84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e88:	46e2      	mov	sl, ip
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e90:	454f      	cmp	r7, r9
 8007e92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007e96:	f84a 3b04 	str.w	r3, [sl], #4
 8007e9a:	d82b      	bhi.n	8007ef4 <__multiply+0x120>
 8007e9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007ea6:	3204      	adds	r2, #4
 8007ea8:	f1ba 0f00 	cmp.w	sl, #0
 8007eac:	d020      	beq.n	8007ef0 <__multiply+0x11c>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	46a8      	mov	r8, r5
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ebc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007ec0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ec4:	445c      	add	r4, fp
 8007ec6:	46c4      	mov	ip, r8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ece:	f84c 3b04 	str.w	r3, [ip], #4
 8007ed2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ed6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	fb0a b303 	mla	r3, sl, r3, fp
 8007ee0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ee4:	454f      	cmp	r7, r9
 8007ee6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007eea:	d805      	bhi.n	8007ef8 <__multiply+0x124>
 8007eec:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ef0:	3504      	adds	r5, #4
 8007ef2:	e79b      	b.n	8007e2c <__multiply+0x58>
 8007ef4:	46d4      	mov	ip, sl
 8007ef6:	e7b3      	b.n	8007e60 <__multiply+0x8c>
 8007ef8:	46e0      	mov	r8, ip
 8007efa:	e7dd      	b.n	8007eb8 <__multiply+0xe4>
 8007efc:	3e01      	subs	r6, #1
 8007efe:	e799      	b.n	8007e34 <__multiply+0x60>

08007f00 <__pow5mult>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4615      	mov	r5, r2
 8007f06:	f012 0203 	ands.w	r2, r2, #3
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	d007      	beq.n	8007f20 <__pow5mult+0x20>
 8007f10:	3a01      	subs	r2, #1
 8007f12:	4c21      	ldr	r4, [pc, #132]	; (8007f98 <__pow5mult+0x98>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f1a:	f7ff fec9 	bl	8007cb0 <__multadd>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	10ad      	asrs	r5, r5, #2
 8007f22:	d035      	beq.n	8007f90 <__pow5mult+0x90>
 8007f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f26:	b93c      	cbnz	r4, 8007f38 <__pow5mult+0x38>
 8007f28:	2010      	movs	r0, #16
 8007f2a:	f7ff fe63 	bl	8007bf4 <malloc>
 8007f2e:	6270      	str	r0, [r6, #36]	; 0x24
 8007f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f34:	6004      	str	r4, [r0, #0]
 8007f36:	60c4      	str	r4, [r0, #12]
 8007f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f40:	b94c      	cbnz	r4, 8007f56 <__pow5mult+0x56>
 8007f42:	f240 2171 	movw	r1, #625	; 0x271
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ff3b 	bl	8007dc2 <__i2b>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f52:	4604      	mov	r4, r0
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	07eb      	lsls	r3, r5, #31
 8007f5c:	d50a      	bpl.n	8007f74 <__pow5mult+0x74>
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4622      	mov	r2, r4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ff36 	bl	8007dd4 <__multiply>
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4681      	mov	r9, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fe88 	bl	8007c82 <_Bfree>
 8007f72:	464f      	mov	r7, r9
 8007f74:	106d      	asrs	r5, r5, #1
 8007f76:	d00b      	beq.n	8007f90 <__pow5mult+0x90>
 8007f78:	6820      	ldr	r0, [r4, #0]
 8007f7a:	b938      	cbnz	r0, 8007f8c <__pow5mult+0x8c>
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ff27 	bl	8007dd4 <__multiply>
 8007f86:	6020      	str	r0, [r4, #0]
 8007f88:	f8c0 8000 	str.w	r8, [r0]
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	e7e4      	b.n	8007f5a <__pow5mult+0x5a>
 8007f90:	4638      	mov	r0, r7
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	bf00      	nop
 8007f98:	08009908 	.word	0x08009908

08007f9c <__lshift>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	6849      	ldr	r1, [r1, #4]
 8007faa:	eb0a 0903 	add.w	r9, sl, r3
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	4616      	mov	r6, r2
 8007fb4:	f109 0501 	add.w	r5, r9, #1
 8007fb8:	42ab      	cmp	r3, r5
 8007fba:	db32      	blt.n	8008022 <__lshift+0x86>
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f7ff fe2c 	bl	8007c1a <_Balloc>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	f100 0114 	add.w	r1, r0, #20
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4553      	cmp	r3, sl
 8007fce:	db2b      	blt.n	8008028 <__lshift+0x8c>
 8007fd0:	6920      	ldr	r0, [r4, #16]
 8007fd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd6:	f104 0314 	add.w	r3, r4, #20
 8007fda:	f016 021f 	ands.w	r2, r6, #31
 8007fde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe6:	d025      	beq.n	8008034 <__lshift+0x98>
 8007fe8:	f1c2 0e20 	rsb	lr, r2, #32
 8007fec:	2000      	movs	r0, #0
 8007fee:	681e      	ldr	r6, [r3, #0]
 8007ff0:	468a      	mov	sl, r1
 8007ff2:	4096      	lsls	r6, r2
 8007ff4:	4330      	orrs	r0, r6
 8007ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8007ffa:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ffe:	459c      	cmp	ip, r3
 8008000:	fa20 f00e 	lsr.w	r0, r0, lr
 8008004:	d814      	bhi.n	8008030 <__lshift+0x94>
 8008006:	6048      	str	r0, [r1, #4]
 8008008:	b108      	cbz	r0, 800800e <__lshift+0x72>
 800800a:	f109 0502 	add.w	r5, r9, #2
 800800e:	3d01      	subs	r5, #1
 8008010:	4638      	mov	r0, r7
 8008012:	f8c8 5010 	str.w	r5, [r8, #16]
 8008016:	4621      	mov	r1, r4
 8008018:	f7ff fe33 	bl	8007c82 <_Bfree>
 800801c:	4640      	mov	r0, r8
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	3101      	adds	r1, #1
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	e7c7      	b.n	8007fb8 <__lshift+0x1c>
 8008028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800802c:	3301      	adds	r3, #1
 800802e:	e7cd      	b.n	8007fcc <__lshift+0x30>
 8008030:	4651      	mov	r1, sl
 8008032:	e7dc      	b.n	8007fee <__lshift+0x52>
 8008034:	3904      	subs	r1, #4
 8008036:	f853 2b04 	ldr.w	r2, [r3], #4
 800803a:	f841 2f04 	str.w	r2, [r1, #4]!
 800803e:	459c      	cmp	ip, r3
 8008040:	d8f9      	bhi.n	8008036 <__lshift+0x9a>
 8008042:	e7e4      	b.n	800800e <__lshift+0x72>

08008044 <__mcmp>:
 8008044:	6903      	ldr	r3, [r0, #16]
 8008046:	690a      	ldr	r2, [r1, #16]
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	b530      	push	{r4, r5, lr}
 800804c:	d10c      	bne.n	8008068 <__mcmp+0x24>
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	3014      	adds	r0, #20
 8008052:	3114      	adds	r1, #20
 8008054:	1884      	adds	r4, r0, r2
 8008056:	4411      	add	r1, r2
 8008058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800805c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008060:	4295      	cmp	r5, r2
 8008062:	d003      	beq.n	800806c <__mcmp+0x28>
 8008064:	d305      	bcc.n	8008072 <__mcmp+0x2e>
 8008066:	2301      	movs	r3, #1
 8008068:	4618      	mov	r0, r3
 800806a:	bd30      	pop	{r4, r5, pc}
 800806c:	42a0      	cmp	r0, r4
 800806e:	d3f3      	bcc.n	8008058 <__mcmp+0x14>
 8008070:	e7fa      	b.n	8008068 <__mcmp+0x24>
 8008072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008076:	e7f7      	b.n	8008068 <__mcmp+0x24>

08008078 <__mdiff>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	460d      	mov	r5, r1
 800807e:	4607      	mov	r7, r0
 8008080:	4611      	mov	r1, r2
 8008082:	4628      	mov	r0, r5
 8008084:	4614      	mov	r4, r2
 8008086:	f7ff ffdd 	bl	8008044 <__mcmp>
 800808a:	1e06      	subs	r6, r0, #0
 800808c:	d108      	bne.n	80080a0 <__mdiff+0x28>
 800808e:	4631      	mov	r1, r6
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff fdc2 	bl	8007c1a <_Balloc>
 8008096:	2301      	movs	r3, #1
 8008098:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	bfa4      	itt	ge
 80080a2:	4623      	movge	r3, r4
 80080a4:	462c      	movge	r4, r5
 80080a6:	4638      	mov	r0, r7
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	bfa6      	itte	ge
 80080ac:	461d      	movge	r5, r3
 80080ae:	2600      	movge	r6, #0
 80080b0:	2601      	movlt	r6, #1
 80080b2:	f7ff fdb2 	bl	8007c1a <_Balloc>
 80080b6:	692b      	ldr	r3, [r5, #16]
 80080b8:	60c6      	str	r6, [r0, #12]
 80080ba:	6926      	ldr	r6, [r4, #16]
 80080bc:	f105 0914 	add.w	r9, r5, #20
 80080c0:	f104 0214 	add.w	r2, r4, #20
 80080c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80080c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80080cc:	f100 0514 	add.w	r5, r0, #20
 80080d0:	f04f 0e00 	mov.w	lr, #0
 80080d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80080d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80080dc:	fa1e f18a 	uxtah	r1, lr, sl
 80080e0:	b2a3      	uxth	r3, r4
 80080e2:	1ac9      	subs	r1, r1, r3
 80080e4:	0c23      	lsrs	r3, r4, #16
 80080e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80080ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080ee:	b289      	uxth	r1, r1
 80080f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80080f4:	45c8      	cmp	r8, r9
 80080f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80080fa:	4694      	mov	ip, r2
 80080fc:	f845 3b04 	str.w	r3, [r5], #4
 8008100:	d8e8      	bhi.n	80080d4 <__mdiff+0x5c>
 8008102:	45bc      	cmp	ip, r7
 8008104:	d304      	bcc.n	8008110 <__mdiff+0x98>
 8008106:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800810a:	b183      	cbz	r3, 800812e <__mdiff+0xb6>
 800810c:	6106      	str	r6, [r0, #16]
 800810e:	e7c5      	b.n	800809c <__mdiff+0x24>
 8008110:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008114:	fa1e f381 	uxtah	r3, lr, r1
 8008118:	141a      	asrs	r2, r3, #16
 800811a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800811e:	b29b      	uxth	r3, r3
 8008120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008124:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008128:	f845 3b04 	str.w	r3, [r5], #4
 800812c:	e7e9      	b.n	8008102 <__mdiff+0x8a>
 800812e:	3e01      	subs	r6, #1
 8008130:	e7e9      	b.n	8008106 <__mdiff+0x8e>

08008132 <__d2b>:
 8008132:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008136:	460e      	mov	r6, r1
 8008138:	2101      	movs	r1, #1
 800813a:	ec59 8b10 	vmov	r8, r9, d0
 800813e:	4615      	mov	r5, r2
 8008140:	f7ff fd6b 	bl	8007c1a <_Balloc>
 8008144:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008148:	4607      	mov	r7, r0
 800814a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800814e:	bb34      	cbnz	r4, 800819e <__d2b+0x6c>
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f1b8 0300 	subs.w	r3, r8, #0
 8008156:	d027      	beq.n	80081a8 <__d2b+0x76>
 8008158:	a802      	add	r0, sp, #8
 800815a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800815e:	f7ff fe01 	bl	8007d64 <__lo0bits>
 8008162:	9900      	ldr	r1, [sp, #0]
 8008164:	b1f0      	cbz	r0, 80081a4 <__d2b+0x72>
 8008166:	9a01      	ldr	r2, [sp, #4]
 8008168:	f1c0 0320 	rsb	r3, r0, #32
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	430b      	orrs	r3, r1
 8008172:	40c2      	lsrs	r2, r0
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	9201      	str	r2, [sp, #4]
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	bf14      	ite	ne
 8008180:	2102      	movne	r1, #2
 8008182:	2101      	moveq	r1, #1
 8008184:	6139      	str	r1, [r7, #16]
 8008186:	b1c4      	cbz	r4, 80081ba <__d2b+0x88>
 8008188:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800818c:	4404      	add	r4, r0
 800818e:	6034      	str	r4, [r6, #0]
 8008190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008194:	6028      	str	r0, [r5, #0]
 8008196:	4638      	mov	r0, r7
 8008198:	b003      	add	sp, #12
 800819a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a2:	e7d5      	b.n	8008150 <__d2b+0x1e>
 80081a4:	6179      	str	r1, [r7, #20]
 80081a6:	e7e7      	b.n	8008178 <__d2b+0x46>
 80081a8:	a801      	add	r0, sp, #4
 80081aa:	f7ff fddb 	bl	8007d64 <__lo0bits>
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	2101      	movs	r1, #1
 80081b4:	6139      	str	r1, [r7, #16]
 80081b6:	3020      	adds	r0, #32
 80081b8:	e7e5      	b.n	8008186 <__d2b+0x54>
 80081ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80081be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081c2:	6030      	str	r0, [r6, #0]
 80081c4:	6918      	ldr	r0, [r3, #16]
 80081c6:	f7ff fdae 	bl	8007d26 <__hi0bits>
 80081ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80081ce:	e7e1      	b.n	8008194 <__d2b+0x62>

080081d0 <_calloc_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	fb02 f401 	mul.w	r4, r2, r1
 80081d6:	4621      	mov	r1, r4
 80081d8:	f000 f856 	bl	8008288 <_malloc_r>
 80081dc:	4605      	mov	r5, r0
 80081de:	b118      	cbz	r0, 80081e8 <_calloc_r+0x18>
 80081e0:	4622      	mov	r2, r4
 80081e2:	2100      	movs	r1, #0
 80081e4:	f7fe fa2e 	bl	8006644 <memset>
 80081e8:	4628      	mov	r0, r5
 80081ea:	bd38      	pop	{r3, r4, r5, pc}

080081ec <_free_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	d045      	beq.n	8008280 <_free_r+0x94>
 80081f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f8:	1f0c      	subs	r4, r1, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f000 fa29 	bl	8008656 <__malloc_lock>
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <_free_r+0x98>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	4610      	mov	r0, r2
 800820a:	b933      	cbnz	r3, 800821a <_free_r+0x2e>
 800820c:	6063      	str	r3, [r4, #4]
 800820e:	6014      	str	r4, [r2, #0]
 8008210:	4628      	mov	r0, r5
 8008212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008216:	f000 ba1f 	b.w	8008658 <__malloc_unlock>
 800821a:	42a3      	cmp	r3, r4
 800821c:	d90c      	bls.n	8008238 <_free_r+0x4c>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	1862      	adds	r2, r4, r1
 8008222:	4293      	cmp	r3, r2
 8008224:	bf04      	itt	eq
 8008226:	681a      	ldreq	r2, [r3, #0]
 8008228:	685b      	ldreq	r3, [r3, #4]
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	bf04      	itt	eq
 800822e:	1852      	addeq	r2, r2, r1
 8008230:	6022      	streq	r2, [r4, #0]
 8008232:	6004      	str	r4, [r0, #0]
 8008234:	e7ec      	b.n	8008210 <_free_r+0x24>
 8008236:	4613      	mov	r3, r2
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	b10a      	cbz	r2, 8008240 <_free_r+0x54>
 800823c:	42a2      	cmp	r2, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x4a>
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	1858      	adds	r0, r3, r1
 8008244:	42a0      	cmp	r0, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x74>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4401      	add	r1, r0
 800824c:	1858      	adds	r0, r3, r1
 800824e:	4282      	cmp	r2, r0
 8008250:	6019      	str	r1, [r3, #0]
 8008252:	d1dd      	bne.n	8008210 <_free_r+0x24>
 8008254:	6810      	ldr	r0, [r2, #0]
 8008256:	6852      	ldr	r2, [r2, #4]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	4401      	add	r1, r0
 800825c:	6019      	str	r1, [r3, #0]
 800825e:	e7d7      	b.n	8008210 <_free_r+0x24>
 8008260:	d902      	bls.n	8008268 <_free_r+0x7c>
 8008262:	230c      	movs	r3, #12
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	e7d3      	b.n	8008210 <_free_r+0x24>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	1821      	adds	r1, r4, r0
 800826c:	428a      	cmp	r2, r1
 800826e:	bf04      	itt	eq
 8008270:	6811      	ldreq	r1, [r2, #0]
 8008272:	6852      	ldreq	r2, [r2, #4]
 8008274:	6062      	str	r2, [r4, #4]
 8008276:	bf04      	itt	eq
 8008278:	1809      	addeq	r1, r1, r0
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	605c      	str	r4, [r3, #4]
 800827e:	e7c7      	b.n	8008210 <_free_r+0x24>
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	20000250 	.word	0x20000250

08008288 <_malloc_r>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	1ccd      	adds	r5, r1, #3
 800828c:	f025 0503 	bic.w	r5, r5, #3
 8008290:	3508      	adds	r5, #8
 8008292:	2d0c      	cmp	r5, #12
 8008294:	bf38      	it	cc
 8008296:	250c      	movcc	r5, #12
 8008298:	2d00      	cmp	r5, #0
 800829a:	4606      	mov	r6, r0
 800829c:	db01      	blt.n	80082a2 <_malloc_r+0x1a>
 800829e:	42a9      	cmp	r1, r5
 80082a0:	d903      	bls.n	80082aa <_malloc_r+0x22>
 80082a2:	230c      	movs	r3, #12
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	2000      	movs	r0, #0
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	f000 f9d4 	bl	8008656 <__malloc_lock>
 80082ae:	4a21      	ldr	r2, [pc, #132]	; (8008334 <_malloc_r+0xac>)
 80082b0:	6814      	ldr	r4, [r2, #0]
 80082b2:	4621      	mov	r1, r4
 80082b4:	b991      	cbnz	r1, 80082dc <_malloc_r+0x54>
 80082b6:	4c20      	ldr	r4, [pc, #128]	; (8008338 <_malloc_r+0xb0>)
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	b91b      	cbnz	r3, 80082c4 <_malloc_r+0x3c>
 80082bc:	4630      	mov	r0, r6
 80082be:	f000 f98f 	bl	80085e0 <_sbrk_r>
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f98a 	bl	80085e0 <_sbrk_r>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d124      	bne.n	800831a <_malloc_r+0x92>
 80082d0:	230c      	movs	r3, #12
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	4630      	mov	r0, r6
 80082d6:	f000 f9bf 	bl	8008658 <__malloc_unlock>
 80082da:	e7e4      	b.n	80082a6 <_malloc_r+0x1e>
 80082dc:	680b      	ldr	r3, [r1, #0]
 80082de:	1b5b      	subs	r3, r3, r5
 80082e0:	d418      	bmi.n	8008314 <_malloc_r+0x8c>
 80082e2:	2b0b      	cmp	r3, #11
 80082e4:	d90f      	bls.n	8008306 <_malloc_r+0x7e>
 80082e6:	600b      	str	r3, [r1, #0]
 80082e8:	50cd      	str	r5, [r1, r3]
 80082ea:	18cc      	adds	r4, r1, r3
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 f9b3 	bl	8008658 <__malloc_unlock>
 80082f2:	f104 000b 	add.w	r0, r4, #11
 80082f6:	1d23      	adds	r3, r4, #4
 80082f8:	f020 0007 	bic.w	r0, r0, #7
 80082fc:	1ac3      	subs	r3, r0, r3
 80082fe:	d0d3      	beq.n	80082a8 <_malloc_r+0x20>
 8008300:	425a      	negs	r2, r3
 8008302:	50e2      	str	r2, [r4, r3]
 8008304:	e7d0      	b.n	80082a8 <_malloc_r+0x20>
 8008306:	428c      	cmp	r4, r1
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	bf16      	itet	ne
 800830c:	6063      	strne	r3, [r4, #4]
 800830e:	6013      	streq	r3, [r2, #0]
 8008310:	460c      	movne	r4, r1
 8008312:	e7eb      	b.n	80082ec <_malloc_r+0x64>
 8008314:	460c      	mov	r4, r1
 8008316:	6849      	ldr	r1, [r1, #4]
 8008318:	e7cc      	b.n	80082b4 <_malloc_r+0x2c>
 800831a:	1cc4      	adds	r4, r0, #3
 800831c:	f024 0403 	bic.w	r4, r4, #3
 8008320:	42a0      	cmp	r0, r4
 8008322:	d005      	beq.n	8008330 <_malloc_r+0xa8>
 8008324:	1a21      	subs	r1, r4, r0
 8008326:	4630      	mov	r0, r6
 8008328:	f000 f95a 	bl	80085e0 <_sbrk_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d0cf      	beq.n	80082d0 <_malloc_r+0x48>
 8008330:	6025      	str	r5, [r4, #0]
 8008332:	e7db      	b.n	80082ec <_malloc_r+0x64>
 8008334:	20000250 	.word	0x20000250
 8008338:	20000254 	.word	0x20000254

0800833c <__ssputs_r>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	688e      	ldr	r6, [r1, #8]
 8008342:	429e      	cmp	r6, r3
 8008344:	4682      	mov	sl, r0
 8008346:	460c      	mov	r4, r1
 8008348:	4690      	mov	r8, r2
 800834a:	4699      	mov	r9, r3
 800834c:	d837      	bhi.n	80083be <__ssputs_r+0x82>
 800834e:	898a      	ldrh	r2, [r1, #12]
 8008350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008354:	d031      	beq.n	80083ba <__ssputs_r+0x7e>
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	6909      	ldr	r1, [r1, #16]
 800835a:	1a6f      	subs	r7, r5, r1
 800835c:	6965      	ldr	r5, [r4, #20]
 800835e:	2302      	movs	r3, #2
 8008360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008364:	fb95 f5f3 	sdiv	r5, r5, r3
 8008368:	f109 0301 	add.w	r3, r9, #1
 800836c:	443b      	add	r3, r7
 800836e:	429d      	cmp	r5, r3
 8008370:	bf38      	it	cc
 8008372:	461d      	movcc	r5, r3
 8008374:	0553      	lsls	r3, r2, #21
 8008376:	d530      	bpl.n	80083da <__ssputs_r+0x9e>
 8008378:	4629      	mov	r1, r5
 800837a:	f7ff ff85 	bl	8008288 <_malloc_r>
 800837e:	4606      	mov	r6, r0
 8008380:	b950      	cbnz	r0, 8008398 <__ssputs_r+0x5c>
 8008382:	230c      	movs	r3, #12
 8008384:	f8ca 3000 	str.w	r3, [sl]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	463a      	mov	r2, r7
 800839a:	6921      	ldr	r1, [r4, #16]
 800839c:	f7ff fc32 	bl	8007c04 <memcpy>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	6126      	str	r6, [r4, #16]
 80083ae:	6165      	str	r5, [r4, #20]
 80083b0:	443e      	add	r6, r7
 80083b2:	1bed      	subs	r5, r5, r7
 80083b4:	6026      	str	r6, [r4, #0]
 80083b6:	60a5      	str	r5, [r4, #8]
 80083b8:	464e      	mov	r6, r9
 80083ba:	454e      	cmp	r6, r9
 80083bc:	d900      	bls.n	80083c0 <__ssputs_r+0x84>
 80083be:	464e      	mov	r6, r9
 80083c0:	4632      	mov	r2, r6
 80083c2:	4641      	mov	r1, r8
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	f000 f92d 	bl	8008624 <memmove>
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	1b9b      	subs	r3, r3, r6
 80083ce:	60a3      	str	r3, [r4, #8]
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	441e      	add	r6, r3
 80083d4:	6026      	str	r6, [r4, #0]
 80083d6:	2000      	movs	r0, #0
 80083d8:	e7dc      	b.n	8008394 <__ssputs_r+0x58>
 80083da:	462a      	mov	r2, r5
 80083dc:	f000 f93d 	bl	800865a <_realloc_r>
 80083e0:	4606      	mov	r6, r0
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d1e2      	bne.n	80083ac <__ssputs_r+0x70>
 80083e6:	6921      	ldr	r1, [r4, #16]
 80083e8:	4650      	mov	r0, sl
 80083ea:	f7ff feff 	bl	80081ec <_free_r>
 80083ee:	e7c8      	b.n	8008382 <__ssputs_r+0x46>

080083f0 <_svfiprintf_r>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	461d      	mov	r5, r3
 80083f6:	898b      	ldrh	r3, [r1, #12]
 80083f8:	061f      	lsls	r7, r3, #24
 80083fa:	b09d      	sub	sp, #116	; 0x74
 80083fc:	4680      	mov	r8, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	4616      	mov	r6, r2
 8008402:	d50f      	bpl.n	8008424 <_svfiprintf_r+0x34>
 8008404:	690b      	ldr	r3, [r1, #16]
 8008406:	b96b      	cbnz	r3, 8008424 <_svfiprintf_r+0x34>
 8008408:	2140      	movs	r1, #64	; 0x40
 800840a:	f7ff ff3d 	bl	8008288 <_malloc_r>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	6120      	str	r0, [r4, #16]
 8008412:	b928      	cbnz	r0, 8008420 <_svfiprintf_r+0x30>
 8008414:	230c      	movs	r3, #12
 8008416:	f8c8 3000 	str.w	r3, [r8]
 800841a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841e:	e0c8      	b.n	80085b2 <_svfiprintf_r+0x1c2>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	6163      	str	r3, [r4, #20]
 8008424:	2300      	movs	r3, #0
 8008426:	9309      	str	r3, [sp, #36]	; 0x24
 8008428:	2320      	movs	r3, #32
 800842a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800842e:	2330      	movs	r3, #48	; 0x30
 8008430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008434:	9503      	str	r5, [sp, #12]
 8008436:	f04f 0b01 	mov.w	fp, #1
 800843a:	4637      	mov	r7, r6
 800843c:	463d      	mov	r5, r7
 800843e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008442:	b10b      	cbz	r3, 8008448 <_svfiprintf_r+0x58>
 8008444:	2b25      	cmp	r3, #37	; 0x25
 8008446:	d13e      	bne.n	80084c6 <_svfiprintf_r+0xd6>
 8008448:	ebb7 0a06 	subs.w	sl, r7, r6
 800844c:	d00b      	beq.n	8008466 <_svfiprintf_r+0x76>
 800844e:	4653      	mov	r3, sl
 8008450:	4632      	mov	r2, r6
 8008452:	4621      	mov	r1, r4
 8008454:	4640      	mov	r0, r8
 8008456:	f7ff ff71 	bl	800833c <__ssputs_r>
 800845a:	3001      	adds	r0, #1
 800845c:	f000 80a4 	beq.w	80085a8 <_svfiprintf_r+0x1b8>
 8008460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008462:	4453      	add	r3, sl
 8008464:	9309      	str	r3, [sp, #36]	; 0x24
 8008466:	783b      	ldrb	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 809d 	beq.w	80085a8 <_svfiprintf_r+0x1b8>
 800846e:	2300      	movs	r3, #0
 8008470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	9307      	str	r3, [sp, #28]
 800847c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008480:	931a      	str	r3, [sp, #104]	; 0x68
 8008482:	462f      	mov	r7, r5
 8008484:	2205      	movs	r2, #5
 8008486:	f817 1b01 	ldrb.w	r1, [r7], #1
 800848a:	4850      	ldr	r0, [pc, #320]	; (80085cc <_svfiprintf_r+0x1dc>)
 800848c:	f7f7 feb0 	bl	80001f0 <memchr>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	b9d0      	cbnz	r0, 80084ca <_svfiprintf_r+0xda>
 8008494:	06d9      	lsls	r1, r3, #27
 8008496:	bf44      	itt	mi
 8008498:	2220      	movmi	r2, #32
 800849a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800849e:	071a      	lsls	r2, r3, #28
 80084a0:	bf44      	itt	mi
 80084a2:	222b      	movmi	r2, #43	; 0x2b
 80084a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084a8:	782a      	ldrb	r2, [r5, #0]
 80084aa:	2a2a      	cmp	r2, #42	; 0x2a
 80084ac:	d015      	beq.n	80084da <_svfiprintf_r+0xea>
 80084ae:	9a07      	ldr	r2, [sp, #28]
 80084b0:	462f      	mov	r7, r5
 80084b2:	2000      	movs	r0, #0
 80084b4:	250a      	movs	r5, #10
 80084b6:	4639      	mov	r1, r7
 80084b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084bc:	3b30      	subs	r3, #48	; 0x30
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d94d      	bls.n	800855e <_svfiprintf_r+0x16e>
 80084c2:	b1b8      	cbz	r0, 80084f4 <_svfiprintf_r+0x104>
 80084c4:	e00f      	b.n	80084e6 <_svfiprintf_r+0xf6>
 80084c6:	462f      	mov	r7, r5
 80084c8:	e7b8      	b.n	800843c <_svfiprintf_r+0x4c>
 80084ca:	4a40      	ldr	r2, [pc, #256]	; (80085cc <_svfiprintf_r+0x1dc>)
 80084cc:	1a80      	subs	r0, r0, r2
 80084ce:	fa0b f000 	lsl.w	r0, fp, r0
 80084d2:	4318      	orrs	r0, r3
 80084d4:	9004      	str	r0, [sp, #16]
 80084d6:	463d      	mov	r5, r7
 80084d8:	e7d3      	b.n	8008482 <_svfiprintf_r+0x92>
 80084da:	9a03      	ldr	r2, [sp, #12]
 80084dc:	1d11      	adds	r1, r2, #4
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	9103      	str	r1, [sp, #12]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	db01      	blt.n	80084ea <_svfiprintf_r+0xfa>
 80084e6:	9207      	str	r2, [sp, #28]
 80084e8:	e004      	b.n	80084f4 <_svfiprintf_r+0x104>
 80084ea:	4252      	negs	r2, r2
 80084ec:	f043 0302 	orr.w	r3, r3, #2
 80084f0:	9207      	str	r2, [sp, #28]
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	783b      	ldrb	r3, [r7, #0]
 80084f6:	2b2e      	cmp	r3, #46	; 0x2e
 80084f8:	d10c      	bne.n	8008514 <_svfiprintf_r+0x124>
 80084fa:	787b      	ldrb	r3, [r7, #1]
 80084fc:	2b2a      	cmp	r3, #42	; 0x2a
 80084fe:	d133      	bne.n	8008568 <_svfiprintf_r+0x178>
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	1d1a      	adds	r2, r3, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	9203      	str	r2, [sp, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfb8      	it	lt
 800850c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008510:	3702      	adds	r7, #2
 8008512:	9305      	str	r3, [sp, #20]
 8008514:	4d2e      	ldr	r5, [pc, #184]	; (80085d0 <_svfiprintf_r+0x1e0>)
 8008516:	7839      	ldrb	r1, [r7, #0]
 8008518:	2203      	movs	r2, #3
 800851a:	4628      	mov	r0, r5
 800851c:	f7f7 fe68 	bl	80001f0 <memchr>
 8008520:	b138      	cbz	r0, 8008532 <_svfiprintf_r+0x142>
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	1b40      	subs	r0, r0, r5
 8008526:	fa03 f000 	lsl.w	r0, r3, r0
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	4303      	orrs	r3, r0
 800852e:	3701      	adds	r7, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	7839      	ldrb	r1, [r7, #0]
 8008534:	4827      	ldr	r0, [pc, #156]	; (80085d4 <_svfiprintf_r+0x1e4>)
 8008536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853a:	2206      	movs	r2, #6
 800853c:	1c7e      	adds	r6, r7, #1
 800853e:	f7f7 fe57 	bl	80001f0 <memchr>
 8008542:	2800      	cmp	r0, #0
 8008544:	d038      	beq.n	80085b8 <_svfiprintf_r+0x1c8>
 8008546:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <_svfiprintf_r+0x1e8>)
 8008548:	bb13      	cbnz	r3, 8008590 <_svfiprintf_r+0x1a0>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	3307      	adds	r3, #7
 800854e:	f023 0307 	bic.w	r3, r3, #7
 8008552:	3308      	adds	r3, #8
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	444b      	add	r3, r9
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	e76d      	b.n	800843a <_svfiprintf_r+0x4a>
 800855e:	fb05 3202 	mla	r2, r5, r2, r3
 8008562:	2001      	movs	r0, #1
 8008564:	460f      	mov	r7, r1
 8008566:	e7a6      	b.n	80084b6 <_svfiprintf_r+0xc6>
 8008568:	2300      	movs	r3, #0
 800856a:	3701      	adds	r7, #1
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	4619      	mov	r1, r3
 8008570:	250a      	movs	r5, #10
 8008572:	4638      	mov	r0, r7
 8008574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008578:	3a30      	subs	r2, #48	; 0x30
 800857a:	2a09      	cmp	r2, #9
 800857c:	d903      	bls.n	8008586 <_svfiprintf_r+0x196>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0c8      	beq.n	8008514 <_svfiprintf_r+0x124>
 8008582:	9105      	str	r1, [sp, #20]
 8008584:	e7c6      	b.n	8008514 <_svfiprintf_r+0x124>
 8008586:	fb05 2101 	mla	r1, r5, r1, r2
 800858a:	2301      	movs	r3, #1
 800858c:	4607      	mov	r7, r0
 800858e:	e7f0      	b.n	8008572 <_svfiprintf_r+0x182>
 8008590:	ab03      	add	r3, sp, #12
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4622      	mov	r2, r4
 8008596:	4b11      	ldr	r3, [pc, #68]	; (80085dc <_svfiprintf_r+0x1ec>)
 8008598:	a904      	add	r1, sp, #16
 800859a:	4640      	mov	r0, r8
 800859c:	f7fe f8ee 	bl	800677c <_printf_float>
 80085a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80085a4:	4681      	mov	r9, r0
 80085a6:	d1d6      	bne.n	8008556 <_svfiprintf_r+0x166>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	065b      	lsls	r3, r3, #25
 80085ac:	f53f af35 	bmi.w	800841a <_svfiprintf_r+0x2a>
 80085b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b2:	b01d      	add	sp, #116	; 0x74
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	4622      	mov	r2, r4
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <_svfiprintf_r+0x1ec>)
 80085c0:	a904      	add	r1, sp, #16
 80085c2:	4640      	mov	r0, r8
 80085c4:	f7fe fb90 	bl	8006ce8 <_printf_i>
 80085c8:	e7ea      	b.n	80085a0 <_svfiprintf_r+0x1b0>
 80085ca:	bf00      	nop
 80085cc:	08009914 	.word	0x08009914
 80085d0:	0800991a 	.word	0x0800991a
 80085d4:	0800991e 	.word	0x0800991e
 80085d8:	0800677d 	.word	0x0800677d
 80085dc:	0800833d 	.word	0x0800833d

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4c06      	ldr	r4, [pc, #24]	; (80085fc <_sbrk_r+0x1c>)
 80085e4:	2300      	movs	r3, #0
 80085e6:	4605      	mov	r5, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	f7fa fb74 	bl	8002cd8 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	2000050c 	.word	0x2000050c

08008600 <__ascii_mbtowc>:
 8008600:	b082      	sub	sp, #8
 8008602:	b901      	cbnz	r1, 8008606 <__ascii_mbtowc+0x6>
 8008604:	a901      	add	r1, sp, #4
 8008606:	b142      	cbz	r2, 800861a <__ascii_mbtowc+0x1a>
 8008608:	b14b      	cbz	r3, 800861e <__ascii_mbtowc+0x1e>
 800860a:	7813      	ldrb	r3, [r2, #0]
 800860c:	600b      	str	r3, [r1, #0]
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	1c10      	adds	r0, r2, #0
 8008612:	bf18      	it	ne
 8008614:	2001      	movne	r0, #1
 8008616:	b002      	add	sp, #8
 8008618:	4770      	bx	lr
 800861a:	4610      	mov	r0, r2
 800861c:	e7fb      	b.n	8008616 <__ascii_mbtowc+0x16>
 800861e:	f06f 0001 	mvn.w	r0, #1
 8008622:	e7f8      	b.n	8008616 <__ascii_mbtowc+0x16>

08008624 <memmove>:
 8008624:	4288      	cmp	r0, r1
 8008626:	b510      	push	{r4, lr}
 8008628:	eb01 0302 	add.w	r3, r1, r2
 800862c:	d807      	bhi.n	800863e <memmove+0x1a>
 800862e:	1e42      	subs	r2, r0, #1
 8008630:	4299      	cmp	r1, r3
 8008632:	d00a      	beq.n	800864a <memmove+0x26>
 8008634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008638:	f802 4f01 	strb.w	r4, [r2, #1]!
 800863c:	e7f8      	b.n	8008630 <memmove+0xc>
 800863e:	4283      	cmp	r3, r0
 8008640:	d9f5      	bls.n	800862e <memmove+0xa>
 8008642:	1881      	adds	r1, r0, r2
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	42d3      	cmn	r3, r2
 8008648:	d100      	bne.n	800864c <memmove+0x28>
 800864a:	bd10      	pop	{r4, pc}
 800864c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008650:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008654:	e7f7      	b.n	8008646 <memmove+0x22>

08008656 <__malloc_lock>:
 8008656:	4770      	bx	lr

08008658 <__malloc_unlock>:
 8008658:	4770      	bx	lr

0800865a <_realloc_r>:
 800865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865c:	4607      	mov	r7, r0
 800865e:	4614      	mov	r4, r2
 8008660:	460e      	mov	r6, r1
 8008662:	b921      	cbnz	r1, 800866e <_realloc_r+0x14>
 8008664:	4611      	mov	r1, r2
 8008666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800866a:	f7ff be0d 	b.w	8008288 <_malloc_r>
 800866e:	b922      	cbnz	r2, 800867a <_realloc_r+0x20>
 8008670:	f7ff fdbc 	bl	80081ec <_free_r>
 8008674:	4625      	mov	r5, r4
 8008676:	4628      	mov	r0, r5
 8008678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867a:	f000 f821 	bl	80086c0 <_malloc_usable_size_r>
 800867e:	42a0      	cmp	r0, r4
 8008680:	d20f      	bcs.n	80086a2 <_realloc_r+0x48>
 8008682:	4621      	mov	r1, r4
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff fdff 	bl	8008288 <_malloc_r>
 800868a:	4605      	mov	r5, r0
 800868c:	2800      	cmp	r0, #0
 800868e:	d0f2      	beq.n	8008676 <_realloc_r+0x1c>
 8008690:	4631      	mov	r1, r6
 8008692:	4622      	mov	r2, r4
 8008694:	f7ff fab6 	bl	8007c04 <memcpy>
 8008698:	4631      	mov	r1, r6
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff fda6 	bl	80081ec <_free_r>
 80086a0:	e7e9      	b.n	8008676 <_realloc_r+0x1c>
 80086a2:	4635      	mov	r5, r6
 80086a4:	e7e7      	b.n	8008676 <_realloc_r+0x1c>

080086a6 <__ascii_wctomb>:
 80086a6:	b149      	cbz	r1, 80086bc <__ascii_wctomb+0x16>
 80086a8:	2aff      	cmp	r2, #255	; 0xff
 80086aa:	bf85      	ittet	hi
 80086ac:	238a      	movhi	r3, #138	; 0x8a
 80086ae:	6003      	strhi	r3, [r0, #0]
 80086b0:	700a      	strbls	r2, [r1, #0]
 80086b2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80086b6:	bf98      	it	ls
 80086b8:	2001      	movls	r0, #1
 80086ba:	4770      	bx	lr
 80086bc:	4608      	mov	r0, r1
 80086be:	4770      	bx	lr

080086c0 <_malloc_usable_size_r>:
 80086c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c4:	1f18      	subs	r0, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bfbc      	itt	lt
 80086ca:	580b      	ldrlt	r3, [r1, r0]
 80086cc:	18c0      	addlt	r0, r0, r3
 80086ce:	4770      	bx	lr

080086d0 <pow>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	ed2d 8b04 	vpush	{d8-d9}
 80086d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80089ac <pow+0x2dc>
 80086dc:	b08d      	sub	sp, #52	; 0x34
 80086de:	ec57 6b10 	vmov	r6, r7, d0
 80086e2:	ec55 4b11 	vmov	r4, r5, d1
 80086e6:	f000 f963 	bl	80089b0 <__ieee754_pow>
 80086ea:	f999 3000 	ldrsb.w	r3, [r9]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	eeb0 8a40 	vmov.f32	s16, s0
 80086f6:	eef0 8a60 	vmov.f32	s17, s1
 80086fa:	46c8      	mov	r8, r9
 80086fc:	d05f      	beq.n	80087be <pow+0xee>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	f7f8 fa19 	bl	8000b3c <__aeabi_dcmpun>
 800870a:	4683      	mov	fp, r0
 800870c:	2800      	cmp	r0, #0
 800870e:	d156      	bne.n	80087be <pow+0xee>
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 fa10 	bl	8000b3c <__aeabi_dcmpun>
 800871c:	9001      	str	r0, [sp, #4]
 800871e:	b1e8      	cbz	r0, 800875c <pow+0x8c>
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f8 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800872c:	2800      	cmp	r0, #0
 800872e:	d046      	beq.n	80087be <pow+0xee>
 8008730:	2301      	movs	r3, #1
 8008732:	9302      	str	r3, [sp, #8]
 8008734:	4b96      	ldr	r3, [pc, #600]	; (8008990 <pow+0x2c0>)
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	4b96      	ldr	r3, [pc, #600]	; (8008994 <pow+0x2c4>)
 800873a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800873e:	2200      	movs	r2, #0
 8008740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008744:	9b00      	ldr	r3, [sp, #0]
 8008746:	2b02      	cmp	r3, #2
 8008748:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800874c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008750:	d033      	beq.n	80087ba <pow+0xea>
 8008752:	a802      	add	r0, sp, #8
 8008754:	f000 fefb 	bl	800954e <matherr>
 8008758:	bb48      	cbnz	r0, 80087ae <pow+0xde>
 800875a:	e05d      	b.n	8008818 <pow+0x148>
 800875c:	f04f 0a00 	mov.w	sl, #0
 8008760:	f04f 0b00 	mov.w	fp, #0
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f8 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008770:	ec4b ab19 	vmov	d9, sl, fp
 8008774:	2800      	cmp	r0, #0
 8008776:	d054      	beq.n	8008822 <pow+0x152>
 8008778:	4652      	mov	r2, sl
 800877a:	465b      	mov	r3, fp
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f8 f9aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008784:	4680      	mov	r8, r0
 8008786:	b318      	cbz	r0, 80087d0 <pow+0x100>
 8008788:	2301      	movs	r3, #1
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	4b80      	ldr	r3, [pc, #512]	; (8008990 <pow+0x2c0>)
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	930a      	str	r3, [sp, #40]	; 0x28
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800879a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800879e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0d5      	beq.n	8008752 <pow+0x82>
 80087a6:	4b7b      	ldr	r3, [pc, #492]	; (8008994 <pow+0x2c4>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b0:	b11b      	cbz	r3, 80087ba <pow+0xea>
 80087b2:	f7fd ff1d 	bl	80065f0 <__errno>
 80087b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b8:	6003      	str	r3, [r0, #0]
 80087ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 80087be:	eeb0 0a48 	vmov.f32	s0, s16
 80087c2:	eef0 0a68 	vmov.f32	s1, s17
 80087c6:	b00d      	add	sp, #52	; 0x34
 80087c8:	ecbd 8b04 	vpop	{d8-d9}
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	ec45 4b10 	vmov	d0, r4, r5
 80087d4:	f000 feb3 	bl	800953e <finite>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0f0      	beq.n	80087be <pow+0xee>
 80087dc:	4652      	mov	r2, sl
 80087de:	465b      	mov	r3, fp
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f8 f982 	bl	8000aec <__aeabi_dcmplt>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0e8      	beq.n	80087be <pow+0xee>
 80087ec:	2301      	movs	r3, #1
 80087ee:	9302      	str	r3, [sp, #8]
 80087f0:	4b67      	ldr	r3, [pc, #412]	; (8008990 <pow+0x2c0>)
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	f999 3000 	ldrsb.w	r3, [r9]
 80087f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80087fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008800:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008804:	b913      	cbnz	r3, 800880c <pow+0x13c>
 8008806:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800880a:	e7a2      	b.n	8008752 <pow+0x82>
 800880c:	4962      	ldr	r1, [pc, #392]	; (8008998 <pow+0x2c8>)
 800880e:	2000      	movs	r0, #0
 8008810:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d19c      	bne.n	8008752 <pow+0x82>
 8008818:	f7fd feea 	bl	80065f0 <__errno>
 800881c:	2321      	movs	r3, #33	; 0x21
 800881e:	6003      	str	r3, [r0, #0]
 8008820:	e7c5      	b.n	80087ae <pow+0xde>
 8008822:	eeb0 0a48 	vmov.f32	s0, s16
 8008826:	eef0 0a68 	vmov.f32	s1, s17
 800882a:	f000 fe88 	bl	800953e <finite>
 800882e:	9000      	str	r0, [sp, #0]
 8008830:	2800      	cmp	r0, #0
 8008832:	f040 8081 	bne.w	8008938 <pow+0x268>
 8008836:	ec47 6b10 	vmov	d0, r6, r7
 800883a:	f000 fe80 	bl	800953e <finite>
 800883e:	2800      	cmp	r0, #0
 8008840:	d07a      	beq.n	8008938 <pow+0x268>
 8008842:	ec45 4b10 	vmov	d0, r4, r5
 8008846:	f000 fe7a 	bl	800953e <finite>
 800884a:	2800      	cmp	r0, #0
 800884c:	d074      	beq.n	8008938 <pow+0x268>
 800884e:	ec53 2b18 	vmov	r2, r3, d8
 8008852:	ee18 0a10 	vmov	r0, s16
 8008856:	4619      	mov	r1, r3
 8008858:	f7f8 f970 	bl	8000b3c <__aeabi_dcmpun>
 800885c:	f999 9000 	ldrsb.w	r9, [r9]
 8008860:	4b4b      	ldr	r3, [pc, #300]	; (8008990 <pow+0x2c0>)
 8008862:	b1b0      	cbz	r0, 8008892 <pow+0x1c2>
 8008864:	2201      	movs	r2, #1
 8008866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	930a      	str	r3, [sp, #40]	; 0x28
 800886e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008872:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	d0c4      	beq.n	8008806 <pow+0x136>
 800887c:	4652      	mov	r2, sl
 800887e:	465b      	mov	r3, fp
 8008880:	4650      	mov	r0, sl
 8008882:	4659      	mov	r1, fp
 8008884:	f7f7 ffea 	bl	800085c <__aeabi_ddiv>
 8008888:	f1b9 0f02 	cmp.w	r9, #2
 800888c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008890:	e7c1      	b.n	8008816 <pow+0x146>
 8008892:	2203      	movs	r2, #3
 8008894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008898:	900a      	str	r0, [sp, #40]	; 0x28
 800889a:	4629      	mov	r1, r5
 800889c:	4620      	mov	r0, r4
 800889e:	2200      	movs	r2, #0
 80088a0:	4b3e      	ldr	r3, [pc, #248]	; (800899c <pow+0x2cc>)
 80088a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80088a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088aa:	f7f7 fead 	bl	8000608 <__aeabi_dmul>
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	f1b9 0f00 	cmp.w	r9, #0
 80088b6:	d124      	bne.n	8008902 <pow+0x232>
 80088b8:	4b39      	ldr	r3, [pc, #228]	; (80089a0 <pow+0x2d0>)
 80088ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80088be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088c2:	4630      	mov	r0, r6
 80088c4:	4652      	mov	r2, sl
 80088c6:	465b      	mov	r3, fp
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f8 f90f 	bl	8000aec <__aeabi_dcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d056      	beq.n	8008980 <pow+0x2b0>
 80088d2:	ec45 4b10 	vmov	d0, r4, r5
 80088d6:	f000 fe47 	bl	8009568 <rint>
 80088da:	4622      	mov	r2, r4
 80088dc:	462b      	mov	r3, r5
 80088de:	ec51 0b10 	vmov	r0, r1, d0
 80088e2:	f7f8 f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80088e6:	b920      	cbnz	r0, 80088f2 <pow+0x222>
 80088e8:	4b2e      	ldr	r3, [pc, #184]	; (80089a4 <pow+0x2d4>)
 80088ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80088ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088f2:	f998 3000 	ldrsb.w	r3, [r8]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d142      	bne.n	8008980 <pow+0x2b0>
 80088fa:	f7fd fe79 	bl	80065f0 <__errno>
 80088fe:	2322      	movs	r3, #34	; 0x22
 8008900:	e78d      	b.n	800881e <pow+0x14e>
 8008902:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <pow+0x2d8>)
 8008904:	2200      	movs	r2, #0
 8008906:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800890a:	4630      	mov	r0, r6
 800890c:	4652      	mov	r2, sl
 800890e:	465b      	mov	r3, fp
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f8eb 	bl	8000aec <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	d0eb      	beq.n	80088f2 <pow+0x222>
 800891a:	ec45 4b10 	vmov	d0, r4, r5
 800891e:	f000 fe23 	bl	8009568 <rint>
 8008922:	4622      	mov	r2, r4
 8008924:	462b      	mov	r3, r5
 8008926:	ec51 0b10 	vmov	r0, r1, d0
 800892a:	f7f8 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800892e:	2800      	cmp	r0, #0
 8008930:	d1df      	bne.n	80088f2 <pow+0x222>
 8008932:	2200      	movs	r2, #0
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <pow+0x2c8>)
 8008936:	e7da      	b.n	80088ee <pow+0x21e>
 8008938:	2200      	movs	r2, #0
 800893a:	2300      	movs	r3, #0
 800893c:	ec51 0b18 	vmov	r0, r1, d8
 8008940:	f7f8 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f af3a 	beq.w	80087be <pow+0xee>
 800894a:	ec47 6b10 	vmov	d0, r6, r7
 800894e:	f000 fdf6 	bl	800953e <finite>
 8008952:	2800      	cmp	r0, #0
 8008954:	f43f af33 	beq.w	80087be <pow+0xee>
 8008958:	ec45 4b10 	vmov	d0, r4, r5
 800895c:	f000 fdef 	bl	800953e <finite>
 8008960:	2800      	cmp	r0, #0
 8008962:	f43f af2c 	beq.w	80087be <pow+0xee>
 8008966:	2304      	movs	r3, #4
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <pow+0x2c0>)
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	2300      	movs	r3, #0
 8008970:	930a      	str	r3, [sp, #40]	; 0x28
 8008972:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008976:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800897a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800897e:	e7b8      	b.n	80088f2 <pow+0x222>
 8008980:	a802      	add	r0, sp, #8
 8008982:	f000 fde4 	bl	800954e <matherr>
 8008986:	2800      	cmp	r0, #0
 8008988:	f47f af11 	bne.w	80087ae <pow+0xde>
 800898c:	e7b5      	b.n	80088fa <pow+0x22a>
 800898e:	bf00      	nop
 8008990:	08009a30 	.word	0x08009a30
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	fff00000 	.word	0xfff00000
 800899c:	3fe00000 	.word	0x3fe00000
 80089a0:	47efffff 	.word	0x47efffff
 80089a4:	c7efffff 	.word	0xc7efffff
 80089a8:	7ff00000 	.word	0x7ff00000
 80089ac:	200001ec 	.word	0x200001ec

080089b0 <__ieee754_pow>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	b091      	sub	sp, #68	; 0x44
 80089b6:	ed8d 1b00 	vstr	d1, [sp]
 80089ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80089be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80089c2:	ea58 0302 	orrs.w	r3, r8, r2
 80089c6:	ec57 6b10 	vmov	r6, r7, d0
 80089ca:	f000 84be 	beq.w	800934a <__ieee754_pow+0x99a>
 80089ce:	4b7a      	ldr	r3, [pc, #488]	; (8008bb8 <__ieee754_pow+0x208>)
 80089d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80089d4:	429c      	cmp	r4, r3
 80089d6:	463d      	mov	r5, r7
 80089d8:	ee10 aa10 	vmov	sl, s0
 80089dc:	dc09      	bgt.n	80089f2 <__ieee754_pow+0x42>
 80089de:	d103      	bne.n	80089e8 <__ieee754_pow+0x38>
 80089e0:	b93e      	cbnz	r6, 80089f2 <__ieee754_pow+0x42>
 80089e2:	45a0      	cmp	r8, r4
 80089e4:	dc0d      	bgt.n	8008a02 <__ieee754_pow+0x52>
 80089e6:	e001      	b.n	80089ec <__ieee754_pow+0x3c>
 80089e8:	4598      	cmp	r8, r3
 80089ea:	dc02      	bgt.n	80089f2 <__ieee754_pow+0x42>
 80089ec:	4598      	cmp	r8, r3
 80089ee:	d10e      	bne.n	8008a0e <__ieee754_pow+0x5e>
 80089f0:	b16a      	cbz	r2, 8008a0e <__ieee754_pow+0x5e>
 80089f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089fa:	ea54 030a 	orrs.w	r3, r4, sl
 80089fe:	f000 84a4 	beq.w	800934a <__ieee754_pow+0x99a>
 8008a02:	486e      	ldr	r0, [pc, #440]	; (8008bbc <__ieee754_pow+0x20c>)
 8008a04:	b011      	add	sp, #68	; 0x44
 8008a06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	f000 bda5 	b.w	8009558 <nan>
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	da53      	bge.n	8008aba <__ieee754_pow+0x10a>
 8008a12:	4b6b      	ldr	r3, [pc, #428]	; (8008bc0 <__ieee754_pow+0x210>)
 8008a14:	4598      	cmp	r8, r3
 8008a16:	dc4d      	bgt.n	8008ab4 <__ieee754_pow+0x104>
 8008a18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008a1c:	4598      	cmp	r8, r3
 8008a1e:	dd4c      	ble.n	8008aba <__ieee754_pow+0x10a>
 8008a20:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a28:	2b14      	cmp	r3, #20
 8008a2a:	dd26      	ble.n	8008a7a <__ieee754_pow+0xca>
 8008a2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008a30:	fa22 f103 	lsr.w	r1, r2, r3
 8008a34:	fa01 f303 	lsl.w	r3, r1, r3
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d13e      	bne.n	8008aba <__ieee754_pow+0x10a>
 8008a3c:	f001 0101 	and.w	r1, r1, #1
 8008a40:	f1c1 0b02 	rsb	fp, r1, #2
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d15b      	bne.n	8008b00 <__ieee754_pow+0x150>
 8008a48:	4b5b      	ldr	r3, [pc, #364]	; (8008bb8 <__ieee754_pow+0x208>)
 8008a4a:	4598      	cmp	r8, r3
 8008a4c:	d124      	bne.n	8008a98 <__ieee754_pow+0xe8>
 8008a4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008a52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a56:	ea53 030a 	orrs.w	r3, r3, sl
 8008a5a:	f000 8476 	beq.w	800934a <__ieee754_pow+0x99a>
 8008a5e:	4b59      	ldr	r3, [pc, #356]	; (8008bc4 <__ieee754_pow+0x214>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	dd2d      	ble.n	8008ac0 <__ieee754_pow+0x110>
 8008a64:	f1b9 0f00 	cmp.w	r9, #0
 8008a68:	f280 8473 	bge.w	8009352 <__ieee754_pow+0x9a2>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	ec41 0b10 	vmov	d0, r0, r1
 8008a74:	b011      	add	sp, #68	; 0x44
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	d13e      	bne.n	8008afc <__ieee754_pow+0x14c>
 8008a7e:	f1c3 0314 	rsb	r3, r3, #20
 8008a82:	fa48 f103 	asr.w	r1, r8, r3
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	4543      	cmp	r3, r8
 8008a8c:	f040 8469 	bne.w	8009362 <__ieee754_pow+0x9b2>
 8008a90:	f001 0101 	and.w	r1, r1, #1
 8008a94:	f1c1 0b02 	rsb	fp, r1, #2
 8008a98:	4b4b      	ldr	r3, [pc, #300]	; (8008bc8 <__ieee754_pow+0x218>)
 8008a9a:	4598      	cmp	r8, r3
 8008a9c:	d118      	bne.n	8008ad0 <__ieee754_pow+0x120>
 8008a9e:	f1b9 0f00 	cmp.w	r9, #0
 8008aa2:	f280 845a 	bge.w	800935a <__ieee754_pow+0x9aa>
 8008aa6:	4948      	ldr	r1, [pc, #288]	; (8008bc8 <__ieee754_pow+0x218>)
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	463b      	mov	r3, r7
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7f7 fed5 	bl	800085c <__aeabi_ddiv>
 8008ab2:	e7dd      	b.n	8008a70 <__ieee754_pow+0xc0>
 8008ab4:	f04f 0b02 	mov.w	fp, #2
 8008ab8:	e7c4      	b.n	8008a44 <__ieee754_pow+0x94>
 8008aba:	f04f 0b00 	mov.w	fp, #0
 8008abe:	e7c1      	b.n	8008a44 <__ieee754_pow+0x94>
 8008ac0:	f1b9 0f00 	cmp.w	r9, #0
 8008ac4:	dad2      	bge.n	8008a6c <__ieee754_pow+0xbc>
 8008ac6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008aca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ace:	e7cf      	b.n	8008a70 <__ieee754_pow+0xc0>
 8008ad0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008ad4:	d106      	bne.n	8008ae4 <__ieee754_pow+0x134>
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	463b      	mov	r3, r7
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	f7f7 fd93 	bl	8000608 <__aeabi_dmul>
 8008ae2:	e7c5      	b.n	8008a70 <__ieee754_pow+0xc0>
 8008ae4:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <__ieee754_pow+0x21c>)
 8008ae6:	4599      	cmp	r9, r3
 8008ae8:	d10a      	bne.n	8008b00 <__ieee754_pow+0x150>
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	db08      	blt.n	8008b00 <__ieee754_pow+0x150>
 8008aee:	ec47 6b10 	vmov	d0, r6, r7
 8008af2:	b011      	add	sp, #68	; 0x44
 8008af4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	f000 bc68 	b.w	80093cc <__ieee754_sqrt>
 8008afc:	f04f 0b00 	mov.w	fp, #0
 8008b00:	ec47 6b10 	vmov	d0, r6, r7
 8008b04:	f000 fd12 	bl	800952c <fabs>
 8008b08:	ec51 0b10 	vmov	r0, r1, d0
 8008b0c:	f1ba 0f00 	cmp.w	sl, #0
 8008b10:	d127      	bne.n	8008b62 <__ieee754_pow+0x1b2>
 8008b12:	b124      	cbz	r4, 8008b1e <__ieee754_pow+0x16e>
 8008b14:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <__ieee754_pow+0x218>)
 8008b16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d121      	bne.n	8008b62 <__ieee754_pow+0x1b2>
 8008b1e:	f1b9 0f00 	cmp.w	r9, #0
 8008b22:	da05      	bge.n	8008b30 <__ieee754_pow+0x180>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4927      	ldr	r1, [pc, #156]	; (8008bc8 <__ieee754_pow+0x218>)
 8008b2c:	f7f7 fe96 	bl	800085c <__aeabi_ddiv>
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	da9d      	bge.n	8008a70 <__ieee754_pow+0xc0>
 8008b34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b3c:	ea54 030b 	orrs.w	r3, r4, fp
 8008b40:	d108      	bne.n	8008b54 <__ieee754_pow+0x1a4>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4610      	mov	r0, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7f7 fba5 	bl	8000298 <__aeabi_dsub>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e7ac      	b.n	8008aae <__ieee754_pow+0xfe>
 8008b54:	f1bb 0f01 	cmp.w	fp, #1
 8008b58:	d18a      	bne.n	8008a70 <__ieee754_pow+0xc0>
 8008b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b5e:	4619      	mov	r1, r3
 8008b60:	e786      	b.n	8008a70 <__ieee754_pow+0xc0>
 8008b62:	0fed      	lsrs	r5, r5, #31
 8008b64:	1e6b      	subs	r3, r5, #1
 8008b66:	930d      	str	r3, [sp, #52]	; 0x34
 8008b68:	ea5b 0303 	orrs.w	r3, fp, r3
 8008b6c:	d102      	bne.n	8008b74 <__ieee754_pow+0x1c4>
 8008b6e:	4632      	mov	r2, r6
 8008b70:	463b      	mov	r3, r7
 8008b72:	e7e8      	b.n	8008b46 <__ieee754_pow+0x196>
 8008b74:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <__ieee754_pow+0x220>)
 8008b76:	4598      	cmp	r8, r3
 8008b78:	f340 80fe 	ble.w	8008d78 <__ieee754_pow+0x3c8>
 8008b7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b80:	4598      	cmp	r8, r3
 8008b82:	dd0a      	ble.n	8008b9a <__ieee754_pow+0x1ea>
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <__ieee754_pow+0x214>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	dc0d      	bgt.n	8008ba6 <__ieee754_pow+0x1f6>
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	f6bf af6d 	bge.w	8008a6c <__ieee754_pow+0xbc>
 8008b92:	a307      	add	r3, pc, #28	; (adr r3, 8008bb0 <__ieee754_pow+0x200>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	e79f      	b.n	8008ada <__ieee754_pow+0x12a>
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <__ieee754_pow+0x224>)
 8008b9c:	429c      	cmp	r4, r3
 8008b9e:	ddf4      	ble.n	8008b8a <__ieee754_pow+0x1da>
 8008ba0:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <__ieee754_pow+0x218>)
 8008ba2:	429c      	cmp	r4, r3
 8008ba4:	dd18      	ble.n	8008bd8 <__ieee754_pow+0x228>
 8008ba6:	f1b9 0f00 	cmp.w	r9, #0
 8008baa:	dcf2      	bgt.n	8008b92 <__ieee754_pow+0x1e2>
 8008bac:	e75e      	b.n	8008a6c <__ieee754_pow+0xbc>
 8008bae:	bf00      	nop
 8008bb0:	8800759c 	.word	0x8800759c
 8008bb4:	7e37e43c 	.word	0x7e37e43c
 8008bb8:	7ff00000 	.word	0x7ff00000
 8008bbc:	08009919 	.word	0x08009919
 8008bc0:	433fffff 	.word	0x433fffff
 8008bc4:	3fefffff 	.word	0x3fefffff
 8008bc8:	3ff00000 	.word	0x3ff00000
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	41e00000 	.word	0x41e00000
 8008bd4:	3feffffe 	.word	0x3feffffe
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4b63      	ldr	r3, [pc, #396]	; (8008d68 <__ieee754_pow+0x3b8>)
 8008bdc:	f7f7 fb5c 	bl	8000298 <__aeabi_dsub>
 8008be0:	a355      	add	r3, pc, #340	; (adr r3, 8008d38 <__ieee754_pow+0x388>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	4604      	mov	r4, r0
 8008be8:	460d      	mov	r5, r1
 8008bea:	f7f7 fd0d 	bl	8000608 <__aeabi_dmul>
 8008bee:	a354      	add	r3, pc, #336	; (adr r3, 8008d40 <__ieee754_pow+0x390>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 fd04 	bl	8000608 <__aeabi_dmul>
 8008c00:	2200      	movs	r2, #0
 8008c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c06:	4b59      	ldr	r3, [pc, #356]	; (8008d6c <__ieee754_pow+0x3bc>)
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	f7f7 fcfc 	bl	8000608 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	a14c      	add	r1, pc, #304	; (adr r1, 8008d48 <__ieee754_pow+0x398>)
 8008c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c1a:	f7f7 fb3d 	bl	8000298 <__aeabi_dsub>
 8008c1e:	4622      	mov	r2, r4
 8008c20:	462b      	mov	r3, r5
 8008c22:	f7f7 fcf1 	bl	8000608 <__aeabi_dmul>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	4950      	ldr	r1, [pc, #320]	; (8008d70 <__ieee754_pow+0x3c0>)
 8008c2e:	f7f7 fb33 	bl	8000298 <__aeabi_dsub>
 8008c32:	4622      	mov	r2, r4
 8008c34:	462b      	mov	r3, r5
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4640      	mov	r0, r8
 8008c48:	4649      	mov	r1, r9
 8008c4a:	f7f7 fcdd 	bl	8000608 <__aeabi_dmul>
 8008c4e:	a340      	add	r3, pc, #256	; (adr r3, 8008d50 <__ieee754_pow+0x3a0>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 fcd8 	bl	8000608 <__aeabi_dmul>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c60:	f7f7 fb1a 	bl	8000298 <__aeabi_dsub>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 fb14 	bl	800029c <__adddf3>
 8008c74:	2000      	movs	r0, #0
 8008c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	f7f7 fb0b 	bl	8000298 <__aeabi_dsub>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 fb05 	bl	8000298 <__aeabi_dsub>
 8008c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c90:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008c94:	4313      	orrs	r3, r2
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	f040 81eb 	bne.w	8009074 <__ieee754_pow+0x6c4>
 8008c9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008d58 <__ieee754_pow+0x3a8>
 8008ca2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008ca6:	2400      	movs	r4, #0
 8008ca8:	4622      	mov	r2, r4
 8008caa:	462b      	mov	r3, r5
 8008cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cb4:	f7f7 faf0 	bl	8000298 <__aeabi_dsub>
 8008cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	f7f7 fae0 	bl	800029c <__adddf3>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	462b      	mov	r3, r5
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	4689      	mov	r9, r1
 8008ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	460b      	mov	r3, r1
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	e9cd 4500 	strd	r4, r5, [sp]
 8008cfc:	f7f7 face 	bl	800029c <__adddf3>
 8008d00:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <__ieee754_pow+0x3c4>)
 8008d02:	4299      	cmp	r1, r3
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	468b      	mov	fp, r1
 8008d0a:	f340 82f7 	ble.w	80092fc <__ieee754_pow+0x94c>
 8008d0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d16:	4303      	orrs	r3, r0
 8008d18:	f000 81ea 	beq.w	80090f0 <__ieee754_pow+0x740>
 8008d1c:	a310      	add	r3, pc, #64	; (adr r3, 8008d60 <__ieee754_pow+0x3b0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d26:	f7f7 fc6f 	bl	8000608 <__aeabi_dmul>
 8008d2a:	a30d      	add	r3, pc, #52	; (adr r3, 8008d60 <__ieee754_pow+0x3b0>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	e6d5      	b.n	8008ade <__ieee754_pow+0x12e>
 8008d32:	bf00      	nop
 8008d34:	f3af 8000 	nop.w
 8008d38:	60000000 	.word	0x60000000
 8008d3c:	3ff71547 	.word	0x3ff71547
 8008d40:	f85ddf44 	.word	0xf85ddf44
 8008d44:	3e54ae0b 	.word	0x3e54ae0b
 8008d48:	55555555 	.word	0x55555555
 8008d4c:	3fd55555 	.word	0x3fd55555
 8008d50:	652b82fe 	.word	0x652b82fe
 8008d54:	3ff71547 	.word	0x3ff71547
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	bff00000 	.word	0xbff00000
 8008d60:	8800759c 	.word	0x8800759c
 8008d64:	7e37e43c 	.word	0x7e37e43c
 8008d68:	3ff00000 	.word	0x3ff00000
 8008d6c:	3fd00000 	.word	0x3fd00000
 8008d70:	3fe00000 	.word	0x3fe00000
 8008d74:	408fffff 	.word	0x408fffff
 8008d78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	da05      	bge.n	8008d8e <__ieee754_pow+0x3de>
 8008d82:	4bd3      	ldr	r3, [pc, #844]	; (80090d0 <__ieee754_pow+0x720>)
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	1523      	asrs	r3, r4, #20
 8008d90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d94:	4413      	add	r3, r2
 8008d96:	9309      	str	r3, [sp, #36]	; 0x24
 8008d98:	4bce      	ldr	r3, [pc, #824]	; (80090d4 <__ieee754_pow+0x724>)
 8008d9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008da2:	429c      	cmp	r4, r3
 8008da4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008da8:	dd08      	ble.n	8008dbc <__ieee754_pow+0x40c>
 8008daa:	4bcb      	ldr	r3, [pc, #812]	; (80090d8 <__ieee754_pow+0x728>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	f340 815e 	ble.w	800906e <__ieee754_pow+0x6be>
 8008db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db4:	3301      	adds	r3, #1
 8008db6:	9309      	str	r3, [sp, #36]	; 0x24
 8008db8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008dbc:	f04f 0a00 	mov.w	sl, #0
 8008dc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8008dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc8:	4bc4      	ldr	r3, [pc, #784]	; (80090dc <__ieee754_pow+0x72c>)
 8008dca:	4413      	add	r3, r2
 8008dcc:	ed93 7b00 	vldr	d7, [r3]
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	ec53 2b17 	vmov	r2, r3, d7
 8008dd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008dde:	f7f7 fa5b 	bl	8000298 <__aeabi_dsub>
 8008de2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dee:	f7f7 fa55 	bl	800029c <__adddf3>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	2000      	movs	r0, #0
 8008df8:	49b9      	ldr	r1, [pc, #740]	; (80090e0 <__ieee754_pow+0x730>)
 8008dfa:	f7f7 fd2f 	bl	800085c <__aeabi_ddiv>
 8008dfe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 fbfd 	bl	8000608 <__aeabi_dmul>
 8008e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008e16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e22:	106d      	asrs	r5, r5, #1
 8008e24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008e28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	4614      	mov	r4, r2
 8008e38:	461d      	mov	r5, r3
 8008e3a:	f7f7 fbe5 	bl	8000608 <__aeabi_dmul>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7f7 fa27 	bl	8000298 <__aeabi_dsub>
 8008e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	4620      	mov	r0, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7f7 fa1f 	bl	8000298 <__aeabi_dsub>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e62:	f7f7 fa19 	bl	8000298 <__aeabi_dsub>
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	f7f7 fbcd 	bl	8000608 <__aeabi_dmul>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4630      	mov	r0, r6
 8008e74:	4639      	mov	r1, r7
 8008e76:	f7f7 fa0f 	bl	8000298 <__aeabi_dsub>
 8008e7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008e7e:	f7f7 fbc3 	bl	8000608 <__aeabi_dmul>
 8008e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f7f7 fbbb 	bl	8000608 <__aeabi_dmul>
 8008e92:	a37b      	add	r3, pc, #492	; (adr r3, 8009080 <__ieee754_pow+0x6d0>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	a379      	add	r3, pc, #484	; (adr r3, 8009088 <__ieee754_pow+0x6d8>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 f9f9 	bl	800029c <__adddf3>
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	a377      	add	r3, pc, #476	; (adr r3, 8009090 <__ieee754_pow+0x6e0>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 f9f0 	bl	800029c <__adddf3>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	f7f7 fba2 	bl	8000608 <__aeabi_dmul>
 8008ec4:	a374      	add	r3, pc, #464	; (adr r3, 8009098 <__ieee754_pow+0x6e8>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f9e7 	bl	800029c <__adddf3>
 8008ece:	4622      	mov	r2, r4
 8008ed0:	462b      	mov	r3, r5
 8008ed2:	f7f7 fb99 	bl	8000608 <__aeabi_dmul>
 8008ed6:	a372      	add	r3, pc, #456	; (adr r3, 80090a0 <__ieee754_pow+0x6f0>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 f9de 	bl	800029c <__adddf3>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	a36f      	add	r3, pc, #444	; (adr r3, 80090a8 <__ieee754_pow+0x6f8>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9d5 	bl	800029c <__adddf3>
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	462b      	mov	r3, r5
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb83 	bl	8000608 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4630      	mov	r0, r6
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 fb7d 	bl	8000608 <__aeabi_dmul>
 8008f0e:	4642      	mov	r2, r8
 8008f10:	4604      	mov	r4, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	464b      	mov	r3, r9
 8008f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f1a:	f7f7 f9bf 	bl	800029c <__adddf3>
 8008f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f22:	f7f7 fb71 	bl	8000608 <__aeabi_dmul>
 8008f26:	4622      	mov	r2, r4
 8008f28:	462b      	mov	r3, r5
 8008f2a:	f7f7 f9b7 	bl	800029c <__adddf3>
 8008f2e:	4642      	mov	r2, r8
 8008f30:	4606      	mov	r6, r0
 8008f32:	460f      	mov	r7, r1
 8008f34:	464b      	mov	r3, r9
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 fb65 	bl	8000608 <__aeabi_dmul>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4b68      	ldr	r3, [pc, #416]	; (80090e4 <__ieee754_pow+0x734>)
 8008f42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008f46:	f7f7 f9a9 	bl	800029c <__adddf3>
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	f7f7 f9a5 	bl	800029c <__adddf3>
 8008f52:	9802      	ldr	r0, [sp, #8]
 8008f54:	460d      	mov	r5, r1
 8008f56:	4604      	mov	r4, r0
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 fb52 	bl	8000608 <__aeabi_dmul>
 8008f64:	2200      	movs	r2, #0
 8008f66:	4680      	mov	r8, r0
 8008f68:	4689      	mov	r9, r1
 8008f6a:	4b5e      	ldr	r3, [pc, #376]	; (80090e4 <__ieee754_pow+0x734>)
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 f992 	bl	8000298 <__aeabi_dsub>
 8008f74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f78:	f7f7 f98e 	bl	8000298 <__aeabi_dsub>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 f988 	bl	8000298 <__aeabi_dsub>
 8008f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f8c:	f7f7 fb3c 	bl	8000608 <__aeabi_dmul>
 8008f90:	4622      	mov	r2, r4
 8008f92:	4606      	mov	r6, r0
 8008f94:	460f      	mov	r7, r1
 8008f96:	462b      	mov	r3, r5
 8008f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f9c:	f7f7 fb34 	bl	8000608 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 f978 	bl	800029c <__adddf3>
 8008fac:	4606      	mov	r6, r0
 8008fae:	460f      	mov	r7, r1
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 f970 	bl	800029c <__adddf3>
 8008fbc:	9802      	ldr	r0, [sp, #8]
 8008fbe:	a33c      	add	r3, pc, #240	; (adr r3, 80090b0 <__ieee754_pow+0x700>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	f7f7 fb1e 	bl	8000608 <__aeabi_dmul>
 8008fcc:	4642      	mov	r2, r8
 8008fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f95e 	bl	8000298 <__aeabi_dsub>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 f958 	bl	8000298 <__aeabi_dsub>
 8008fe8:	a333      	add	r3, pc, #204	; (adr r3, 80090b8 <__ieee754_pow+0x708>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 fb0b 	bl	8000608 <__aeabi_dmul>
 8008ff2:	a333      	add	r3, pc, #204	; (adr r3, 80090c0 <__ieee754_pow+0x710>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	4629      	mov	r1, r5
 8009000:	f7f7 fb02 	bl	8000608 <__aeabi_dmul>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	f7f7 f946 	bl	800029c <__adddf3>
 8009010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009012:	4b35      	ldr	r3, [pc, #212]	; (80090e8 <__ieee754_pow+0x738>)
 8009014:	4413      	add	r3, r2
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f93f 	bl	800029c <__adddf3>
 800901e:	4604      	mov	r4, r0
 8009020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009022:	460d      	mov	r5, r1
 8009024:	f7f7 fa86 	bl	8000534 <__aeabi_i2d>
 8009028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800902a:	4b30      	ldr	r3, [pc, #192]	; (80090ec <__ieee754_pow+0x73c>)
 800902c:	4413      	add	r3, r2
 800902e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009032:	4606      	mov	r6, r0
 8009034:	460f      	mov	r7, r1
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800903e:	f7f7 f92d 	bl	800029c <__adddf3>
 8009042:	4642      	mov	r2, r8
 8009044:	464b      	mov	r3, r9
 8009046:	f7f7 f929 	bl	800029c <__adddf3>
 800904a:	4632      	mov	r2, r6
 800904c:	463b      	mov	r3, r7
 800904e:	f7f7 f925 	bl	800029c <__adddf3>
 8009052:	9802      	ldr	r0, [sp, #8]
 8009054:	4632      	mov	r2, r6
 8009056:	463b      	mov	r3, r7
 8009058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800905c:	f7f7 f91c 	bl	8000298 <__aeabi_dsub>
 8009060:	4642      	mov	r2, r8
 8009062:	464b      	mov	r3, r9
 8009064:	f7f7 f918 	bl	8000298 <__aeabi_dsub>
 8009068:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800906c:	e607      	b.n	8008c7e <__ieee754_pow+0x2ce>
 800906e:	f04f 0a01 	mov.w	sl, #1
 8009072:	e6a5      	b.n	8008dc0 <__ieee754_pow+0x410>
 8009074:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80090c8 <__ieee754_pow+0x718>
 8009078:	e613      	b.n	8008ca2 <__ieee754_pow+0x2f2>
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	4a454eef 	.word	0x4a454eef
 8009084:	3fca7e28 	.word	0x3fca7e28
 8009088:	93c9db65 	.word	0x93c9db65
 800908c:	3fcd864a 	.word	0x3fcd864a
 8009090:	a91d4101 	.word	0xa91d4101
 8009094:	3fd17460 	.word	0x3fd17460
 8009098:	518f264d 	.word	0x518f264d
 800909c:	3fd55555 	.word	0x3fd55555
 80090a0:	db6fabff 	.word	0xdb6fabff
 80090a4:	3fdb6db6 	.word	0x3fdb6db6
 80090a8:	33333303 	.word	0x33333303
 80090ac:	3fe33333 	.word	0x3fe33333
 80090b0:	e0000000 	.word	0xe0000000
 80090b4:	3feec709 	.word	0x3feec709
 80090b8:	dc3a03fd 	.word	0xdc3a03fd
 80090bc:	3feec709 	.word	0x3feec709
 80090c0:	145b01f5 	.word	0x145b01f5
 80090c4:	be3e2fe0 	.word	0xbe3e2fe0
 80090c8:	00000000 	.word	0x00000000
 80090cc:	3ff00000 	.word	0x3ff00000
 80090d0:	43400000 	.word	0x43400000
 80090d4:	0003988e 	.word	0x0003988e
 80090d8:	000bb679 	.word	0x000bb679
 80090dc:	08009a38 	.word	0x08009a38
 80090e0:	3ff00000 	.word	0x3ff00000
 80090e4:	40080000 	.word	0x40080000
 80090e8:	08009a58 	.word	0x08009a58
 80090ec:	08009a48 	.word	0x08009a48
 80090f0:	a3b4      	add	r3, pc, #720	; (adr r3, 80093c4 <__ieee754_pow+0xa14>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 f8cf 	bl	800029c <__adddf3>
 80090fe:	4622      	mov	r2, r4
 8009100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009104:	462b      	mov	r3, r5
 8009106:	4630      	mov	r0, r6
 8009108:	4639      	mov	r1, r7
 800910a:	f7f7 f8c5 	bl	8000298 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009116:	f7f7 fd07 	bl	8000b28 <__aeabi_dcmpgt>
 800911a:	2800      	cmp	r0, #0
 800911c:	f47f adfe 	bne.w	8008d1c <__ieee754_pow+0x36c>
 8009120:	4aa3      	ldr	r2, [pc, #652]	; (80093b0 <__ieee754_pow+0xa00>)
 8009122:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009126:	4293      	cmp	r3, r2
 8009128:	f340 810a 	ble.w	8009340 <__ieee754_pow+0x990>
 800912c:	151b      	asrs	r3, r3, #20
 800912e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009132:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009136:	fa4a f303 	asr.w	r3, sl, r3
 800913a:	445b      	add	r3, fp
 800913c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009140:	4e9c      	ldr	r6, [pc, #624]	; (80093b4 <__ieee754_pow+0xa04>)
 8009142:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009146:	4116      	asrs	r6, r2
 8009148:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800914c:	2000      	movs	r0, #0
 800914e:	ea23 0106 	bic.w	r1, r3, r6
 8009152:	f1c2 0214 	rsb	r2, r2, #20
 8009156:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800915a:	fa4a fa02 	asr.w	sl, sl, r2
 800915e:	f1bb 0f00 	cmp.w	fp, #0
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	bfb8      	it	lt
 800916c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009170:	f7f7 f892 	bl	8000298 <__aeabi_dsub>
 8009174:	e9cd 0100 	strd	r0, r1, [sp]
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009180:	f7f7 f88c 	bl	800029c <__adddf3>
 8009184:	2000      	movs	r0, #0
 8009186:	a378      	add	r3, pc, #480	; (adr r3, 8009368 <__ieee754_pow+0x9b8>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4604      	mov	r4, r0
 800918e:	460d      	mov	r5, r1
 8009190:	f7f7 fa3a 	bl	8000608 <__aeabi_dmul>
 8009194:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009198:	4606      	mov	r6, r0
 800919a:	460f      	mov	r7, r1
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 f87a 	bl	8000298 <__aeabi_dsub>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	a36f      	add	r3, pc, #444	; (adr r3, 8009370 <__ieee754_pow+0x9c0>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fa27 	bl	8000608 <__aeabi_dmul>
 80091ba:	a36f      	add	r3, pc, #444	; (adr r3, 8009378 <__ieee754_pow+0x9c8>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 fa1e 	bl	8000608 <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 f862 	bl	800029c <__adddf3>
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 f85a 	bl	800029c <__adddf3>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	f7f7 f852 	bl	8000298 <__aeabi_dsub>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f7 f84c 	bl	8000298 <__aeabi_dsub>
 8009200:	4642      	mov	r2, r8
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	464b      	mov	r3, r9
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 f9fc 	bl	8000608 <__aeabi_dmul>
 8009210:	a35b      	add	r3, pc, #364	; (adr r3, 8009380 <__ieee754_pow+0x9d0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	4604      	mov	r4, r0
 8009218:	460d      	mov	r5, r1
 800921a:	f7f7 f9f5 	bl	8000608 <__aeabi_dmul>
 800921e:	a35a      	add	r3, pc, #360	; (adr r3, 8009388 <__ieee754_pow+0x9d8>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 f838 	bl	8000298 <__aeabi_dsub>
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	f7f7 f9ec 	bl	8000608 <__aeabi_dmul>
 8009230:	a357      	add	r3, pc, #348	; (adr r3, 8009390 <__ieee754_pow+0x9e0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f831 	bl	800029c <__adddf3>
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	f7f7 f9e3 	bl	8000608 <__aeabi_dmul>
 8009242:	a355      	add	r3, pc, #340	; (adr r3, 8009398 <__ieee754_pow+0x9e8>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f826 	bl	8000298 <__aeabi_dsub>
 800924c:	4622      	mov	r2, r4
 800924e:	462b      	mov	r3, r5
 8009250:	f7f7 f9da 	bl	8000608 <__aeabi_dmul>
 8009254:	a352      	add	r3, pc, #328	; (adr r3, 80093a0 <__ieee754_pow+0x9f0>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f81f 	bl	800029c <__adddf3>
 800925e:	4622      	mov	r2, r4
 8009260:	462b      	mov	r3, r5
 8009262:	f7f7 f9d1 	bl	8000608 <__aeabi_dmul>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f813 	bl	8000298 <__aeabi_dsub>
 8009272:	4604      	mov	r4, r0
 8009274:	460d      	mov	r5, r1
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4640      	mov	r0, r8
 800927c:	4649      	mov	r1, r9
 800927e:	f7f7 f9c3 	bl	8000608 <__aeabi_dmul>
 8009282:	2200      	movs	r2, #0
 8009284:	e9cd 0100 	strd	r0, r1, [sp]
 8009288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800928c:	4620      	mov	r0, r4
 800928e:	4629      	mov	r1, r5
 8009290:	f7f7 f802 	bl	8000298 <__aeabi_dsub>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800929c:	f7f7 fade 	bl	800085c <__aeabi_ddiv>
 80092a0:	4632      	mov	r2, r6
 80092a2:	4604      	mov	r4, r0
 80092a4:	460d      	mov	r5, r1
 80092a6:	463b      	mov	r3, r7
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 f9ac 	bl	8000608 <__aeabi_dmul>
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	f7f6 fff2 	bl	800029c <__adddf3>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4620      	mov	r0, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	f7f6 ffea 	bl	8000298 <__aeabi_dsub>
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	f7f6 ffe6 	bl	8000298 <__aeabi_dsub>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	2000      	movs	r0, #0
 80092d2:	4939      	ldr	r1, [pc, #228]	; (80093b8 <__ieee754_pow+0xa08>)
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80092dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	da2f      	bge.n	8009346 <__ieee754_pow+0x996>
 80092e6:	4650      	mov	r0, sl
 80092e8:	ec43 2b10 	vmov	d0, r2, r3
 80092ec:	f000 f9c0 	bl	8009670 <scalbn>
 80092f0:	ec51 0b10 	vmov	r0, r1, d0
 80092f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092f8:	f7ff bbf1 	b.w	8008ade <__ieee754_pow+0x12e>
 80092fc:	4b2f      	ldr	r3, [pc, #188]	; (80093bc <__ieee754_pow+0xa0c>)
 80092fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009302:	429e      	cmp	r6, r3
 8009304:	f77f af0c 	ble.w	8009120 <__ieee754_pow+0x770>
 8009308:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <__ieee754_pow+0xa10>)
 800930a:	440b      	add	r3, r1
 800930c:	4303      	orrs	r3, r0
 800930e:	d00b      	beq.n	8009328 <__ieee754_pow+0x978>
 8009310:	a325      	add	r3, pc, #148	; (adr r3, 80093a8 <__ieee754_pow+0x9f8>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 f975 	bl	8000608 <__aeabi_dmul>
 800931e:	a322      	add	r3, pc, #136	; (adr r3, 80093a8 <__ieee754_pow+0x9f8>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7ff bbdb 	b.w	8008ade <__ieee754_pow+0x12e>
 8009328:	4622      	mov	r2, r4
 800932a:	462b      	mov	r3, r5
 800932c:	f7f6 ffb4 	bl	8000298 <__aeabi_dsub>
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	f7f7 fbee 	bl	8000b14 <__aeabi_dcmpge>
 8009338:	2800      	cmp	r0, #0
 800933a:	f43f aef1 	beq.w	8009120 <__ieee754_pow+0x770>
 800933e:	e7e7      	b.n	8009310 <__ieee754_pow+0x960>
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	e718      	b.n	8009178 <__ieee754_pow+0x7c8>
 8009346:	4621      	mov	r1, r4
 8009348:	e7d4      	b.n	80092f4 <__ieee754_pow+0x944>
 800934a:	2000      	movs	r0, #0
 800934c:	491a      	ldr	r1, [pc, #104]	; (80093b8 <__ieee754_pow+0xa08>)
 800934e:	f7ff bb8f 	b.w	8008a70 <__ieee754_pow+0xc0>
 8009352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009356:	f7ff bb8b 	b.w	8008a70 <__ieee754_pow+0xc0>
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7ff bb87 	b.w	8008a70 <__ieee754_pow+0xc0>
 8009362:	4693      	mov	fp, r2
 8009364:	f7ff bb98 	b.w	8008a98 <__ieee754_pow+0xe8>
 8009368:	00000000 	.word	0x00000000
 800936c:	3fe62e43 	.word	0x3fe62e43
 8009370:	fefa39ef 	.word	0xfefa39ef
 8009374:	3fe62e42 	.word	0x3fe62e42
 8009378:	0ca86c39 	.word	0x0ca86c39
 800937c:	be205c61 	.word	0xbe205c61
 8009380:	72bea4d0 	.word	0x72bea4d0
 8009384:	3e663769 	.word	0x3e663769
 8009388:	c5d26bf1 	.word	0xc5d26bf1
 800938c:	3ebbbd41 	.word	0x3ebbbd41
 8009390:	af25de2c 	.word	0xaf25de2c
 8009394:	3f11566a 	.word	0x3f11566a
 8009398:	16bebd93 	.word	0x16bebd93
 800939c:	3f66c16c 	.word	0x3f66c16c
 80093a0:	5555553e 	.word	0x5555553e
 80093a4:	3fc55555 	.word	0x3fc55555
 80093a8:	c2f8f359 	.word	0xc2f8f359
 80093ac:	01a56e1f 	.word	0x01a56e1f
 80093b0:	3fe00000 	.word	0x3fe00000
 80093b4:	000fffff 	.word	0x000fffff
 80093b8:	3ff00000 	.word	0x3ff00000
 80093bc:	4090cbff 	.word	0x4090cbff
 80093c0:	3f6f3400 	.word	0x3f6f3400
 80093c4:	652b82fe 	.word	0x652b82fe
 80093c8:	3c971547 	.word	0x3c971547

080093cc <__ieee754_sqrt>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4955      	ldr	r1, [pc, #340]	; (8009528 <__ieee754_sqrt+0x15c>)
 80093d2:	ec55 4b10 	vmov	r4, r5, d0
 80093d6:	43a9      	bics	r1, r5
 80093d8:	462b      	mov	r3, r5
 80093da:	462a      	mov	r2, r5
 80093dc:	d112      	bne.n	8009404 <__ieee754_sqrt+0x38>
 80093de:	ee10 2a10 	vmov	r2, s0
 80093e2:	ee10 0a10 	vmov	r0, s0
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 f90e 	bl	8000608 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff52 	bl	800029c <__adddf3>
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	ec45 4b10 	vmov	d0, r4, r5
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009404:	2d00      	cmp	r5, #0
 8009406:	ee10 0a10 	vmov	r0, s0
 800940a:	4621      	mov	r1, r4
 800940c:	dc0f      	bgt.n	800942e <__ieee754_sqrt+0x62>
 800940e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009412:	4330      	orrs	r0, r6
 8009414:	d0f2      	beq.n	80093fc <__ieee754_sqrt+0x30>
 8009416:	b155      	cbz	r5, 800942e <__ieee754_sqrt+0x62>
 8009418:	ee10 2a10 	vmov	r2, s0
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f6 ff3a 	bl	8000298 <__aeabi_dsub>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	f7f7 fa18 	bl	800085c <__aeabi_ddiv>
 800942c:	e7e4      	b.n	80093f8 <__ieee754_sqrt+0x2c>
 800942e:	151b      	asrs	r3, r3, #20
 8009430:	d073      	beq.n	800951a <__ieee754_sqrt+0x14e>
 8009432:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009436:	07dd      	lsls	r5, r3, #31
 8009438:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800943c:	bf48      	it	mi
 800943e:	0fc8      	lsrmi	r0, r1, #31
 8009440:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009444:	bf44      	itt	mi
 8009446:	0049      	lslmi	r1, r1, #1
 8009448:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800944c:	2500      	movs	r5, #0
 800944e:	1058      	asrs	r0, r3, #1
 8009450:	0fcb      	lsrs	r3, r1, #31
 8009452:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009456:	0049      	lsls	r1, r1, #1
 8009458:	2316      	movs	r3, #22
 800945a:	462c      	mov	r4, r5
 800945c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009460:	19a7      	adds	r7, r4, r6
 8009462:	4297      	cmp	r7, r2
 8009464:	bfde      	ittt	le
 8009466:	19bc      	addle	r4, r7, r6
 8009468:	1bd2      	suble	r2, r2, r7
 800946a:	19ad      	addle	r5, r5, r6
 800946c:	0fcf      	lsrs	r7, r1, #31
 800946e:	3b01      	subs	r3, #1
 8009470:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009474:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009478:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800947c:	d1f0      	bne.n	8009460 <__ieee754_sqrt+0x94>
 800947e:	f04f 0c20 	mov.w	ip, #32
 8009482:	469e      	mov	lr, r3
 8009484:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009488:	42a2      	cmp	r2, r4
 800948a:	eb06 070e 	add.w	r7, r6, lr
 800948e:	dc02      	bgt.n	8009496 <__ieee754_sqrt+0xca>
 8009490:	d112      	bne.n	80094b8 <__ieee754_sqrt+0xec>
 8009492:	428f      	cmp	r7, r1
 8009494:	d810      	bhi.n	80094b8 <__ieee754_sqrt+0xec>
 8009496:	2f00      	cmp	r7, #0
 8009498:	eb07 0e06 	add.w	lr, r7, r6
 800949c:	da42      	bge.n	8009524 <__ieee754_sqrt+0x158>
 800949e:	f1be 0f00 	cmp.w	lr, #0
 80094a2:	db3f      	blt.n	8009524 <__ieee754_sqrt+0x158>
 80094a4:	f104 0801 	add.w	r8, r4, #1
 80094a8:	1b12      	subs	r2, r2, r4
 80094aa:	428f      	cmp	r7, r1
 80094ac:	bf88      	it	hi
 80094ae:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80094b2:	1bc9      	subs	r1, r1, r7
 80094b4:	4433      	add	r3, r6
 80094b6:	4644      	mov	r4, r8
 80094b8:	0052      	lsls	r2, r2, #1
 80094ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80094be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80094c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80094c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80094ca:	d1dd      	bne.n	8009488 <__ieee754_sqrt+0xbc>
 80094cc:	430a      	orrs	r2, r1
 80094ce:	d006      	beq.n	80094de <__ieee754_sqrt+0x112>
 80094d0:	1c5c      	adds	r4, r3, #1
 80094d2:	bf13      	iteet	ne
 80094d4:	3301      	addne	r3, #1
 80094d6:	3501      	addeq	r5, #1
 80094d8:	4663      	moveq	r3, ip
 80094da:	f023 0301 	bicne.w	r3, r3, #1
 80094de:	106a      	asrs	r2, r5, #1
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	07e9      	lsls	r1, r5, #31
 80094e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80094e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80094ec:	bf48      	it	mi
 80094ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80094f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80094f6:	461c      	mov	r4, r3
 80094f8:	e780      	b.n	80093fc <__ieee754_sqrt+0x30>
 80094fa:	0aca      	lsrs	r2, r1, #11
 80094fc:	3815      	subs	r0, #21
 80094fe:	0549      	lsls	r1, r1, #21
 8009500:	2a00      	cmp	r2, #0
 8009502:	d0fa      	beq.n	80094fa <__ieee754_sqrt+0x12e>
 8009504:	02d6      	lsls	r6, r2, #11
 8009506:	d50a      	bpl.n	800951e <__ieee754_sqrt+0x152>
 8009508:	f1c3 0420 	rsb	r4, r3, #32
 800950c:	fa21 f404 	lsr.w	r4, r1, r4
 8009510:	1e5d      	subs	r5, r3, #1
 8009512:	4099      	lsls	r1, r3
 8009514:	4322      	orrs	r2, r4
 8009516:	1b43      	subs	r3, r0, r5
 8009518:	e78b      	b.n	8009432 <__ieee754_sqrt+0x66>
 800951a:	4618      	mov	r0, r3
 800951c:	e7f0      	b.n	8009500 <__ieee754_sqrt+0x134>
 800951e:	0052      	lsls	r2, r2, #1
 8009520:	3301      	adds	r3, #1
 8009522:	e7ef      	b.n	8009504 <__ieee754_sqrt+0x138>
 8009524:	46a0      	mov	r8, r4
 8009526:	e7bf      	b.n	80094a8 <__ieee754_sqrt+0xdc>
 8009528:	7ff00000 	.word	0x7ff00000

0800952c <fabs>:
 800952c:	ec51 0b10 	vmov	r0, r1, d0
 8009530:	ee10 2a10 	vmov	r2, s0
 8009534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009538:	ec43 2b10 	vmov	d0, r2, r3
 800953c:	4770      	bx	lr

0800953e <finite>:
 800953e:	ee10 3a90 	vmov	r3, s1
 8009542:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009546:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800954a:	0fc0      	lsrs	r0, r0, #31
 800954c:	4770      	bx	lr

0800954e <matherr>:
 800954e:	2000      	movs	r0, #0
 8009550:	4770      	bx	lr
 8009552:	0000      	movs	r0, r0
 8009554:	0000      	movs	r0, r0
	...

08009558 <nan>:
 8009558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009560 <nan+0x8>
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	00000000 	.word	0x00000000
 8009564:	7ff80000 	.word	0x7ff80000

08009568 <rint>:
 8009568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800956a:	ec51 0b10 	vmov	r0, r1, d0
 800956e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009572:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009576:	2e13      	cmp	r6, #19
 8009578:	460b      	mov	r3, r1
 800957a:	ee10 4a10 	vmov	r4, s0
 800957e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009582:	dc56      	bgt.n	8009632 <rint+0xca>
 8009584:	2e00      	cmp	r6, #0
 8009586:	da2b      	bge.n	80095e0 <rint+0x78>
 8009588:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800958c:	4302      	orrs	r2, r0
 800958e:	d023      	beq.n	80095d8 <rint+0x70>
 8009590:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009594:	4302      	orrs	r2, r0
 8009596:	4254      	negs	r4, r2
 8009598:	4314      	orrs	r4, r2
 800959a:	0c4b      	lsrs	r3, r1, #17
 800959c:	0b24      	lsrs	r4, r4, #12
 800959e:	045b      	lsls	r3, r3, #17
 80095a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80095a4:	ea44 0103 	orr.w	r1, r4, r3
 80095a8:	460b      	mov	r3, r1
 80095aa:	492f      	ldr	r1, [pc, #188]	; (8009668 <rint+0x100>)
 80095ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80095b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80095b4:	4602      	mov	r2, r0
 80095b6:	4639      	mov	r1, r7
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7f6 fe6f 	bl	800029c <__adddf3>
 80095be:	e9cd 0100 	strd	r0, r1, [sp]
 80095c2:	463b      	mov	r3, r7
 80095c4:	4632      	mov	r2, r6
 80095c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095ca:	f7f6 fe65 	bl	8000298 <__aeabi_dsub>
 80095ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80095d6:	4639      	mov	r1, r7
 80095d8:	ec41 0b10 	vmov	d0, r0, r1
 80095dc:	b003      	add	sp, #12
 80095de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e0:	4a22      	ldr	r2, [pc, #136]	; (800966c <rint+0x104>)
 80095e2:	4132      	asrs	r2, r6
 80095e4:	ea01 0702 	and.w	r7, r1, r2
 80095e8:	4307      	orrs	r7, r0
 80095ea:	d0f5      	beq.n	80095d8 <rint+0x70>
 80095ec:	0852      	lsrs	r2, r2, #1
 80095ee:	4011      	ands	r1, r2
 80095f0:	430c      	orrs	r4, r1
 80095f2:	d00b      	beq.n	800960c <rint+0xa4>
 80095f4:	ea23 0202 	bic.w	r2, r3, r2
 80095f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095fc:	2e13      	cmp	r6, #19
 80095fe:	fa43 f306 	asr.w	r3, r3, r6
 8009602:	bf0c      	ite	eq
 8009604:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009608:	2400      	movne	r4, #0
 800960a:	4313      	orrs	r3, r2
 800960c:	4916      	ldr	r1, [pc, #88]	; (8009668 <rint+0x100>)
 800960e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009612:	4622      	mov	r2, r4
 8009614:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009618:	4620      	mov	r0, r4
 800961a:	4629      	mov	r1, r5
 800961c:	f7f6 fe3e 	bl	800029c <__adddf3>
 8009620:	e9cd 0100 	strd	r0, r1, [sp]
 8009624:	4622      	mov	r2, r4
 8009626:	462b      	mov	r3, r5
 8009628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800962c:	f7f6 fe34 	bl	8000298 <__aeabi_dsub>
 8009630:	e7d2      	b.n	80095d8 <rint+0x70>
 8009632:	2e33      	cmp	r6, #51	; 0x33
 8009634:	dd07      	ble.n	8009646 <rint+0xde>
 8009636:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800963a:	d1cd      	bne.n	80095d8 <rint+0x70>
 800963c:	ee10 2a10 	vmov	r2, s0
 8009640:	f7f6 fe2c 	bl	800029c <__adddf3>
 8009644:	e7c8      	b.n	80095d8 <rint+0x70>
 8009646:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800964a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800964e:	40f2      	lsrs	r2, r6
 8009650:	4210      	tst	r0, r2
 8009652:	d0c1      	beq.n	80095d8 <rint+0x70>
 8009654:	0852      	lsrs	r2, r2, #1
 8009656:	4210      	tst	r0, r2
 8009658:	bf1f      	itttt	ne
 800965a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800965e:	ea20 0202 	bicne.w	r2, r0, r2
 8009662:	4134      	asrne	r4, r6
 8009664:	4314      	orrne	r4, r2
 8009666:	e7d1      	b.n	800960c <rint+0xa4>
 8009668:	08009a68 	.word	0x08009a68
 800966c:	000fffff 	.word	0x000fffff

08009670 <scalbn>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	ec55 4b10 	vmov	r4, r5, d0
 8009676:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800967a:	4606      	mov	r6, r0
 800967c:	462b      	mov	r3, r5
 800967e:	b9aa      	cbnz	r2, 80096ac <scalbn+0x3c>
 8009680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009684:	4323      	orrs	r3, r4
 8009686:	d03b      	beq.n	8009700 <scalbn+0x90>
 8009688:	4b31      	ldr	r3, [pc, #196]	; (8009750 <scalbn+0xe0>)
 800968a:	4629      	mov	r1, r5
 800968c:	2200      	movs	r2, #0
 800968e:	ee10 0a10 	vmov	r0, s0
 8009692:	f7f6 ffb9 	bl	8000608 <__aeabi_dmul>
 8009696:	4b2f      	ldr	r3, [pc, #188]	; (8009754 <scalbn+0xe4>)
 8009698:	429e      	cmp	r6, r3
 800969a:	4604      	mov	r4, r0
 800969c:	460d      	mov	r5, r1
 800969e:	da12      	bge.n	80096c6 <scalbn+0x56>
 80096a0:	a327      	add	r3, pc, #156	; (adr r3, 8009740 <scalbn+0xd0>)
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	f7f6 ffaf 	bl	8000608 <__aeabi_dmul>
 80096aa:	e009      	b.n	80096c0 <scalbn+0x50>
 80096ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096b0:	428a      	cmp	r2, r1
 80096b2:	d10c      	bne.n	80096ce <scalbn+0x5e>
 80096b4:	ee10 2a10 	vmov	r2, s0
 80096b8:	4620      	mov	r0, r4
 80096ba:	4629      	mov	r1, r5
 80096bc:	f7f6 fdee 	bl	800029c <__adddf3>
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	e01c      	b.n	8009700 <scalbn+0x90>
 80096c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096ca:	460b      	mov	r3, r1
 80096cc:	3a36      	subs	r2, #54	; 0x36
 80096ce:	4432      	add	r2, r6
 80096d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80096d4:	428a      	cmp	r2, r1
 80096d6:	dd0b      	ble.n	80096f0 <scalbn+0x80>
 80096d8:	ec45 4b11 	vmov	d1, r4, r5
 80096dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009748 <scalbn+0xd8>
 80096e0:	f000 f83c 	bl	800975c <copysign>
 80096e4:	a318      	add	r3, pc, #96	; (adr r3, 8009748 <scalbn+0xd8>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	ec51 0b10 	vmov	r0, r1, d0
 80096ee:	e7da      	b.n	80096a6 <scalbn+0x36>
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	dd08      	ble.n	8009706 <scalbn+0x96>
 80096f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009700:	ec45 4b10 	vmov	d0, r4, r5
 8009704:	bd70      	pop	{r4, r5, r6, pc}
 8009706:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800970a:	da0d      	bge.n	8009728 <scalbn+0xb8>
 800970c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009710:	429e      	cmp	r6, r3
 8009712:	ec45 4b11 	vmov	d1, r4, r5
 8009716:	dce1      	bgt.n	80096dc <scalbn+0x6c>
 8009718:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009740 <scalbn+0xd0>
 800971c:	f000 f81e 	bl	800975c <copysign>
 8009720:	a307      	add	r3, pc, #28	; (adr r3, 8009740 <scalbn+0xd0>)
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	e7e0      	b.n	80096ea <scalbn+0x7a>
 8009728:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800972c:	3236      	adds	r2, #54	; 0x36
 800972e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009732:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	2200      	movs	r2, #0
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <scalbn+0xe8>)
 800973e:	e7b2      	b.n	80096a6 <scalbn+0x36>
 8009740:	c2f8f359 	.word	0xc2f8f359
 8009744:	01a56e1f 	.word	0x01a56e1f
 8009748:	8800759c 	.word	0x8800759c
 800974c:	7e37e43c 	.word	0x7e37e43c
 8009750:	43500000 	.word	0x43500000
 8009754:	ffff3cb0 	.word	0xffff3cb0
 8009758:	3c900000 	.word	0x3c900000

0800975c <copysign>:
 800975c:	ec51 0b10 	vmov	r0, r1, d0
 8009760:	ee11 0a90 	vmov	r0, s3
 8009764:	ee10 2a10 	vmov	r2, s0
 8009768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800976c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009770:	ea41 0300 	orr.w	r3, r1, r0
 8009774:	ec43 2b10 	vmov	d0, r2, r3
 8009778:	4770      	bx	lr
	...

0800977c <_init>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr

08009788 <_fini>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr
